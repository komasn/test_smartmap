{"ast":null,"code":"import _toConsumableArray from \"/home/magari/git/test_smartmap/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _classCallCheck from \"/home/magari/git/test_smartmap/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/magari/git/test_smartmap/node_modules/@babel/runtime/helpers/esm/createClass.js\";\n/******************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\n\nvar _assign = function __assign() {\n  _assign = Object.assign || function __assign(t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return _assign.apply(this, arguments);\n};\nfunction __values(o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator,\n    m = s && o[s],\n    i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n    next: function next() {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n}\nfunction __read(o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n    r,\n    ar = [],\n    e;\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n  return ar;\n}\nfunction __spreadArray(to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n    if (ar || !(i in from)) {\n      if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n      ar[i] = from[i];\n    }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n}\nfunction isZFXYTile(tile) {\n  return 'z' in tile && 'f' in tile && 'x' in tile && 'y' in tile;\n}\nvar ZFXY_1M_ZOOM_BASE = 25;\nvar ZFXY_ROOT_TILE = {\n  f: 0,\n  x: 0,\n  y: 0,\n  z: 0\n};\nvar rad2deg = 180 / Math.PI;\nfunction getParent(tile, steps) {\n  if (steps === void 0) {\n    steps = 1;\n  }\n  var f = tile.f,\n    x = tile.x,\n    y = tile.y,\n    z = tile.z;\n  if (steps <= 0) {\n    throw new Error('steps must be greater than 0');\n  }\n  if (steps > z) {\n    throw new Error(\"Getting parent tile of \".concat(tile, \", \").concat(steps, \" steps is not possible because it would go beyond the root tile (z=0)\"));\n  }\n  return {\n    f: f >> steps,\n    x: x >> steps,\n    y: y >> steps,\n    z: z - steps\n  };\n}\nfunction getChildren(tile) {\n  if (tile === void 0) {\n    tile = ZFXY_ROOT_TILE;\n  }\n  var f = tile.f,\n    x = tile.x,\n    y = tile.y,\n    z = tile.z;\n  return [{\n    f: f * 2,\n    x: x * 2,\n    y: y * 2,\n    z: z + 1\n  }, {\n    f: f * 2,\n    x: x * 2 + 1,\n    y: y * 2,\n    z: z + 1\n  }, {\n    f: f * 2,\n    x: x * 2,\n    y: y * 2 + 1,\n    z: z + 1\n  }, {\n    f: f * 2,\n    x: x * 2 + 1,\n    y: y * 2 + 1,\n    z: z + 1\n  }, {\n    f: f * 2 + 1,\n    x: x * 2,\n    y: y * 2,\n    z: z + 1\n  }, {\n    f: f * 2 + 1,\n    x: x * 2 + 1,\n    y: y * 2,\n    z: z + 1\n  }, {\n    f: f * 2 + 1,\n    x: x * 2,\n    y: y * 2 + 1,\n    z: z + 1\n  }, {\n    f: f * 2 + 1,\n    x: x * 2 + 1,\n    y: y * 2 + 1,\n    z: z + 1\n  } // f +1, x +1, y +1\n  ];\n}\n\nfunction getSurrounding(tile) {\n  if (tile === void 0) {\n    tile = ZFXY_ROOT_TILE;\n  }\n  var f = tile.f,\n    x = tile.x,\n    y = tile.y,\n    z = tile.z;\n  return [zfxyWraparound({\n    f: f,\n    x: x,\n    y: y,\n    z: z\n  }), zfxyWraparound({\n    f: f,\n    x: x + 1,\n    y: y,\n    z: z\n  }), zfxyWraparound({\n    f: f,\n    x: x,\n    y: y + 1,\n    z: z\n  }), zfxyWraparound({\n    f: f,\n    x: x + 1,\n    y: y + 1,\n    z: z\n  }), zfxyWraparound({\n    f: f,\n    x: x - 1,\n    y: y,\n    z: z\n  }), zfxyWraparound({\n    f: f,\n    x: x,\n    y: y - 1,\n    z: z\n  }), zfxyWraparound({\n    f: f,\n    x: x - 1,\n    y: y - 1,\n    z: z\n  }), zfxyWraparound({\n    f: f,\n    x: x + 1,\n    y: y - 1,\n    z: z\n  }), zfxyWraparound({\n    f: f,\n    x: x - 1,\n    y: y + 1,\n    z: z\n  }) // f +0, x -1, y +1\n  ];\n}\n\nfunction parseZFXYString(str) {\n  var match = str.match(/^\\/?(\\d+)\\/(?:(\\d+)\\/)?(\\d+)\\/(\\d+)$/);\n  if (!match) {\n    return undefined;\n  }\n  return {\n    z: parseInt(match[1], 10),\n    f: parseInt(match[2] || '0', 10),\n    x: parseInt(match[3], 10),\n    y: parseInt(match[4], 10)\n  };\n}\n/** Returns the lng,lat of the northwest corner of the provided tile */\nfunction getLngLat(tile) {\n  var n = Math.PI - 2 * Math.PI * tile.y / Math.pow(2, tile.z);\n  return {\n    lng: tile.x / Math.pow(2, tile.z) * 360 - 180,\n    lat: rad2deg * Math.atan(0.5 * (Math.exp(n) - Math.exp(-n)))\n  };\n}\nfunction getCenterLngLat(tile) {\n  var x = tile.x * 2 + 1,\n    y = tile.y * 2 + 1,\n    z = tile.z + 1;\n  return getLngLat({\n    x: x,\n    y: y,\n    z: z,\n    f: 0\n  });\n}\nfunction getCenterLngLatAlt(tile) {\n  return _assign(_assign({}, getCenterLngLat(tile)), {\n    alt: getFloor(tile) + Math.pow(2, ZFXY_1M_ZOOM_BASE) / Math.pow(2, tile.z + 1)\n  });\n}\nfunction getBBox(tile) {\n  var nw = getLngLat(tile),\n    se = getLngLat(_assign(_assign({}, tile), {\n      y: tile.y + 1,\n      x: tile.x + 1\n    }));\n  return [nw, se];\n}\n/** Returns the floor of the voxel, in meters */\nfunction getFloor(tile) {\n  return tile.f * Math.pow(2, ZFXY_1M_ZOOM_BASE) / Math.pow(2, tile.z);\n}\nfunction calculateZFXY(input) {\n  var meters = typeof input.alt !== 'undefined' ? input.alt : 0;\n  if (meters <= -Math.pow(2, ZFXY_1M_ZOOM_BASE) || meters >= Math.pow(2, ZFXY_1M_ZOOM_BASE)) {\n    // TODO: make altitude unlimited?\n    throw new Error(\"ZFXY only supports altitude between -2^\".concat(ZFXY_1M_ZOOM_BASE, \" and +2^\").concat(ZFXY_1M_ZOOM_BASE, \".\"));\n  }\n  var f = Math.floor(Math.pow(2, input.zoom) * meters / Math.pow(2, ZFXY_1M_ZOOM_BASE));\n  // Algorithm adapted from tilebelt.js\n  var d2r = Math.PI / 180;\n  var sin = Math.sin(input.lat * d2r);\n  var z2 = Math.pow(2, input.zoom);\n  var x = z2 * (input.lng / 360 + 0.5);\n  var y = z2 * (0.5 - 0.25 * Math.log((1 + sin) / (1 - sin)) / Math.PI);\n  // Wrap Tile X\n  x = x % z2;\n  if (x < 0) x = x + z2;\n  return {\n    f: f,\n    x: Math.floor(x),\n    y: Math.floor(y),\n    z: input.zoom\n  };\n}\n/**\r\n * Fix a tile that has out-of-bounds coordinates by:\r\n * for the x and y coordinates: wrapping the coordinates around.\r\n * for the f coordinate: limiting to maximum or minimum.\r\n */\nfunction zfxyWraparound(tile) {\n  var z = tile.z,\n    f = tile.f,\n    x = tile.x,\n    y = tile.y;\n  return {\n    z: z,\n    f: Math.max(Math.min(f, Math.pow(2, z)), -Math.pow(2, z)),\n    x: x < 0 ? x + Math.pow(2, z) : x % Math.pow(2, z),\n    y: y < 0 ? y + Math.pow(2, z) : y % Math.pow(2, z)\n  };\n}\nfunction parseZFXYTilehash(th) {\n  var e_1, _a;\n  var negativeF = false;\n  if (th[0] === '-') {\n    negativeF = true;\n    th = th.substring(1);\n  }\n  var children = getChildren();\n  var lastChild;\n  try {\n    for (var th_1 = __values(th), th_1_1 = th_1.next(); !th_1_1.done; th_1_1 = th_1.next()) {\n      var c = th_1_1.value;\n      lastChild = _assign({}, children[parseInt(c, 10) - 1]);\n      children = getChildren(lastChild);\n    }\n  } catch (e_1_1) {\n    e_1 = {\n      error: e_1_1\n    };\n  } finally {\n    try {\n      if (th_1_1 && !th_1_1.done && (_a = th_1.return)) _a.call(th_1);\n    } finally {\n      if (e_1) throw e_1.error;\n    }\n  }\n  if (negativeF) {\n    lastChild.f = -lastChild.f;\n  }\n  return lastChild;\n}\nfunction generateTilehash(tile) {\n  var f = tile.f,\n    x = tile.x,\n    y = tile.y,\n    z = tile.z;\n  var originalF = f;\n  var out = '';\n  while (z > 0) {\n    var thisTile = {\n      f: Math.abs(f),\n      x: x,\n      y: y,\n      z: z\n    };\n    var parent_1 = getParent(thisTile);\n    var childrenOfParent = getChildren(parent_1);\n    var positionInParent = childrenOfParent.findIndex(function (child) {\n      return child.f === Math.abs(f) && child.x === x && child.y === y && child.z === z;\n    });\n    out = (positionInParent + 1).toString() + out;\n    f = parent_1.f;\n    x = parent_1.x;\n    y = parent_1.y;\n    z = parent_1.z;\n  }\n  return (originalF < 0 ? '-' : '') + out;\n}\n\n/**\n * @module helpers\n */\n/**\n * Wraps a GeoJSON {@link Geometry} in a GeoJSON {@link Feature}.\n *\n * @name feature\n * @param {Geometry} geometry input geometry\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature} a GeoJSON Feature\n * @example\n * var geometry = {\n *   \"type\": \"Point\",\n *   \"coordinates\": [110, 50]\n * };\n *\n * var feature = turf.feature(geometry);\n *\n * //=feature\n */\nfunction feature(geom, properties, options) {\n  if (options === void 0) {\n    options = {};\n  }\n  var feat = {\n    type: \"Feature\"\n  };\n  if (options.id === 0 || options.id) {\n    feat.id = options.id;\n  }\n  if (options.bbox) {\n    feat.bbox = options.bbox;\n  }\n  feat.properties = properties || {};\n  feat.geometry = geom;\n  return feat;\n}\n/**\n * Creates a {@link Point} {@link Feature} from a Position.\n *\n * @name point\n * @param {Array<number>} coordinates longitude, latitude position (each in decimal degrees)\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<Point>} a Point feature\n * @example\n * var point = turf.point([-75.343, 39.984]);\n *\n * //=point\n */\nfunction point(coordinates, properties, options) {\n  if (options === void 0) {\n    options = {};\n  }\n  if (!coordinates) {\n    throw new Error(\"coordinates is required\");\n  }\n  if (!Array.isArray(coordinates)) {\n    throw new Error(\"coordinates must be an Array\");\n  }\n  if (coordinates.length < 2) {\n    throw new Error(\"coordinates must be at least 2 numbers long\");\n  }\n  if (!isNumber(coordinates[0]) || !isNumber(coordinates[1])) {\n    throw new Error(\"coordinates must contain numbers\");\n  }\n  var geom = {\n    type: \"Point\",\n    coordinates: coordinates\n  };\n  return feature(geom, properties, options);\n}\n/**\n * Creates a {@link LineString} {@link Feature} from an Array of Positions.\n *\n * @name lineString\n * @param {Array<Array<number>>} coordinates an array of Positions\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<LineString>} LineString Feature\n * @example\n * var linestring1 = turf.lineString([[-24, 63], [-23, 60], [-25, 65], [-20, 69]], {name: 'line 1'});\n * var linestring2 = turf.lineString([[-14, 43], [-13, 40], [-15, 45], [-10, 49]], {name: 'line 2'});\n *\n * //=linestring1\n * //=linestring2\n */\nfunction lineString(coordinates, properties, options) {\n  if (options === void 0) {\n    options = {};\n  }\n  if (coordinates.length < 2) {\n    throw new Error(\"coordinates must be an array of two or more positions\");\n  }\n  var geom = {\n    type: \"LineString\",\n    coordinates: coordinates\n  };\n  return feature(geom, properties, options);\n}\n/**\n * Takes one or more {@link Feature|Features} and creates a {@link FeatureCollection}.\n *\n * @name featureCollection\n * @param {Feature[]} features input features\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {FeatureCollection} FeatureCollection of Features\n * @example\n * var locationA = turf.point([-75.343, 39.984], {name: 'Location A'});\n * var locationB = turf.point([-75.833, 39.284], {name: 'Location B'});\n * var locationC = turf.point([-75.534, 39.123], {name: 'Location C'});\n *\n * var collection = turf.featureCollection([\n *   locationA,\n *   locationB,\n *   locationC\n * ]);\n *\n * //=collection\n */\nfunction featureCollection$1(features, options) {\n  if (options === void 0) {\n    options = {};\n  }\n  var fc = {\n    type: \"FeatureCollection\"\n  };\n  if (options.id) {\n    fc.id = options.id;\n  }\n  if (options.bbox) {\n    fc.bbox = options.bbox;\n  }\n  fc.features = features;\n  return fc;\n}\n/**\n * Creates a {@link Feature<MultiLineString>} based on a\n * coordinate array. Properties can be added optionally.\n *\n * @name multiLineString\n * @param {Array<Array<Array<number>>>} coordinates an array of LineStrings\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<MultiLineString>} a MultiLineString feature\n * @throws {Error} if no coordinates are passed\n * @example\n * var multiLine = turf.multiLineString([[[0,0],[10,10]]]);\n *\n * //=multiLine\n */\nfunction multiLineString(coordinates, properties, options) {\n  if (options === void 0) {\n    options = {};\n  }\n  var geom = {\n    type: \"MultiLineString\",\n    coordinates: coordinates\n  };\n  return feature(geom, properties, options);\n}\n/**\n * isNumber\n *\n * @param {*} num Number to validate\n * @returns {boolean} true/false\n * @example\n * turf.isNumber(123)\n * //=true\n * turf.isNumber('foo')\n * //=false\n */\nfunction isNumber(num) {\n  return !isNaN(num) && num !== null && !Array.isArray(num);\n}\n\n/**\n * Callback for coordEach\n *\n * @callback coordEachCallback\n * @param {Array<number>} currentCoord The current coordinate being processed.\n * @param {number} coordIndex The current index of the coordinate being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed.\n * @param {number} geometryIndex The current index of the Geometry being processed.\n */\n\n/**\n * Iterate over coordinates in any GeoJSON object, similar to Array.forEach()\n *\n * @name coordEach\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object\n * @param {Function} callback a method that takes (currentCoord, coordIndex, featureIndex, multiFeatureIndex)\n * @param {boolean} [excludeWrapCoord=false] whether or not to include the final coordinate of LinearRings that wraps the ring in its iteration.\n * @returns {void}\n * @example\n * var features = turf.featureCollection([\n *   turf.point([26, 37], {\"foo\": \"bar\"}),\n *   turf.point([36, 53], {\"hello\": \"world\"})\n * ]);\n *\n * turf.coordEach(features, function (currentCoord, coordIndex, featureIndex, multiFeatureIndex, geometryIndex) {\n *   //=currentCoord\n *   //=coordIndex\n *   //=featureIndex\n *   //=multiFeatureIndex\n *   //=geometryIndex\n * });\n */\nfunction coordEach$1(geojson, callback, excludeWrapCoord) {\n  // Handles null Geometry -- Skips this GeoJSON\n  if (geojson === null) return;\n  var j,\n    k,\n    l,\n    geometry,\n    stopG,\n    coords,\n    geometryMaybeCollection,\n    wrapShrink = 0,\n    coordIndex = 0,\n    isGeometryCollection,\n    type = geojson.type,\n    isFeatureCollection = type === \"FeatureCollection\",\n    isFeature = type === \"Feature\",\n    stop = isFeatureCollection ? geojson.features.length : 1;\n\n  // This logic may look a little weird. The reason why it is that way\n  // is because it's trying to be fast. GeoJSON supports multiple kinds\n  // of objects at its root: FeatureCollection, Features, Geometries.\n  // This function has the responsibility of handling all of them, and that\n  // means that some of the `for` loops you see below actually just don't apply\n  // to certain inputs. For instance, if you give this just a\n  // Point geometry, then both loops are short-circuited and all we do\n  // is gradually rename the input until it's called 'geometry'.\n  //\n  // This also aims to allocate as few resources as possible: just a\n  // few numbers and booleans, rather than any temporary arrays as would\n  // be required with the normalization approach.\n  for (var featureIndex = 0; featureIndex < stop; featureIndex++) {\n    geometryMaybeCollection = isFeatureCollection ? geojson.features[featureIndex].geometry : isFeature ? geojson.geometry : geojson;\n    isGeometryCollection = geometryMaybeCollection ? geometryMaybeCollection.type === \"GeometryCollection\" : false;\n    stopG = isGeometryCollection ? geometryMaybeCollection.geometries.length : 1;\n    for (var geomIndex = 0; geomIndex < stopG; geomIndex++) {\n      var multiFeatureIndex = 0;\n      var geometryIndex = 0;\n      geometry = isGeometryCollection ? geometryMaybeCollection.geometries[geomIndex] : geometryMaybeCollection;\n\n      // Handles null Geometry -- Skips this geometry\n      if (geometry === null) continue;\n      coords = geometry.coordinates;\n      var geomType = geometry.type;\n      wrapShrink = excludeWrapCoord && (geomType === \"Polygon\" || geomType === \"MultiPolygon\") ? 1 : 0;\n      switch (geomType) {\n        case null:\n          break;\n        case \"Point\":\n          if (callback(coords, coordIndex, featureIndex, multiFeatureIndex, geometryIndex) === false) return false;\n          coordIndex++;\n          multiFeatureIndex++;\n          break;\n        case \"LineString\":\n        case \"MultiPoint\":\n          for (j = 0; j < coords.length; j++) {\n            if (callback(coords[j], coordIndex, featureIndex, multiFeatureIndex, geometryIndex) === false) return false;\n            coordIndex++;\n            if (geomType === \"MultiPoint\") multiFeatureIndex++;\n          }\n          if (geomType === \"LineString\") multiFeatureIndex++;\n          break;\n        case \"Polygon\":\n        case \"MultiLineString\":\n          for (j = 0; j < coords.length; j++) {\n            for (k = 0; k < coords[j].length - wrapShrink; k++) {\n              if (callback(coords[j][k], coordIndex, featureIndex, multiFeatureIndex, geometryIndex) === false) return false;\n              coordIndex++;\n            }\n            if (geomType === \"MultiLineString\") multiFeatureIndex++;\n            if (geomType === \"Polygon\") geometryIndex++;\n          }\n          if (geomType === \"Polygon\") multiFeatureIndex++;\n          break;\n        case \"MultiPolygon\":\n          for (j = 0; j < coords.length; j++) {\n            geometryIndex = 0;\n            for (k = 0; k < coords[j].length; k++) {\n              for (l = 0; l < coords[j][k].length - wrapShrink; l++) {\n                if (callback(coords[j][k][l], coordIndex, featureIndex, multiFeatureIndex, geometryIndex) === false) return false;\n                coordIndex++;\n              }\n              geometryIndex++;\n            }\n            multiFeatureIndex++;\n          }\n          break;\n        case \"GeometryCollection\":\n          for (j = 0; j < geometry.geometries.length; j++) if (coordEach$1(geometry.geometries[j], callback, excludeWrapCoord) === false) return false;\n          break;\n        default:\n          throw new Error(\"Unknown Geometry Type\");\n      }\n    }\n  }\n}\n\n/**\n * Callback for featureEach\n *\n * @callback featureEachCallback\n * @param {Feature<any>} currentFeature The current Feature being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n */\n\n/**\n * Iterate over features in any GeoJSON object, similar to\n * Array.forEach.\n *\n * @name featureEach\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object\n * @param {Function} callback a method that takes (currentFeature, featureIndex)\n * @returns {void}\n * @example\n * var features = turf.featureCollection([\n *   turf.point([26, 37], {foo: 'bar'}),\n *   turf.point([36, 53], {hello: 'world'})\n * ]);\n *\n * turf.featureEach(features, function (currentFeature, featureIndex) {\n *   //=currentFeature\n *   //=featureIndex\n * });\n */\nfunction featureEach$2(geojson, callback) {\n  if (geojson.type === \"Feature\") {\n    callback(geojson, 0);\n  } else if (geojson.type === \"FeatureCollection\") {\n    for (var i = 0; i < geojson.features.length; i++) {\n      if (callback(geojson.features[i], i) === false) break;\n    }\n  }\n}\n\n/**\n * Callback for geomEach\n *\n * @callback geomEachCallback\n * @param {Geometry} currentGeometry The current Geometry being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n * @param {Object} featureProperties The current Feature Properties being processed.\n * @param {Array<number>} featureBBox The current Feature BBox being processed.\n * @param {number|string} featureId The current Feature Id being processed.\n */\n\n/**\n * Iterate over each geometry in any GeoJSON object, similar to Array.forEach()\n *\n * @name geomEach\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object\n * @param {Function} callback a method that takes (currentGeometry, featureIndex, featureProperties, featureBBox, featureId)\n * @returns {void}\n * @example\n * var features = turf.featureCollection([\n *     turf.point([26, 37], {foo: 'bar'}),\n *     turf.point([36, 53], {hello: 'world'})\n * ]);\n *\n * turf.geomEach(features, function (currentGeometry, featureIndex, featureProperties, featureBBox, featureId) {\n *   //=currentGeometry\n *   //=featureIndex\n *   //=featureProperties\n *   //=featureBBox\n *   //=featureId\n * });\n */\nfunction geomEach$1(geojson, callback) {\n  var i,\n    j,\n    g,\n    geometry,\n    stopG,\n    geometryMaybeCollection,\n    isGeometryCollection,\n    featureProperties,\n    featureBBox,\n    featureId,\n    featureIndex = 0,\n    isFeatureCollection = geojson.type === \"FeatureCollection\",\n    isFeature = geojson.type === \"Feature\",\n    stop = isFeatureCollection ? geojson.features.length : 1;\n\n  // This logic may look a little weird. The reason why it is that way\n  // is because it's trying to be fast. GeoJSON supports multiple kinds\n  // of objects at its root: FeatureCollection, Features, Geometries.\n  // This function has the responsibility of handling all of them, and that\n  // means that some of the `for` loops you see below actually just don't apply\n  // to certain inputs. For instance, if you give this just a\n  // Point geometry, then both loops are short-circuited and all we do\n  // is gradually rename the input until it's called 'geometry'.\n  //\n  // This also aims to allocate as few resources as possible: just a\n  // few numbers and booleans, rather than any temporary arrays as would\n  // be required with the normalization approach.\n  for (i = 0; i < stop; i++) {\n    geometryMaybeCollection = isFeatureCollection ? geojson.features[i].geometry : isFeature ? geojson.geometry : geojson;\n    featureProperties = isFeatureCollection ? geojson.features[i].properties : isFeature ? geojson.properties : {};\n    featureBBox = isFeatureCollection ? geojson.features[i].bbox : isFeature ? geojson.bbox : undefined;\n    featureId = isFeatureCollection ? geojson.features[i].id : isFeature ? geojson.id : undefined;\n    isGeometryCollection = geometryMaybeCollection ? geometryMaybeCollection.type === \"GeometryCollection\" : false;\n    stopG = isGeometryCollection ? geometryMaybeCollection.geometries.length : 1;\n    for (g = 0; g < stopG; g++) {\n      geometry = isGeometryCollection ? geometryMaybeCollection.geometries[g] : geometryMaybeCollection;\n\n      // Handle null Geometry\n      if (geometry === null) {\n        if (callback(null, featureIndex, featureProperties, featureBBox, featureId) === false) return false;\n        continue;\n      }\n      switch (geometry.type) {\n        case \"Point\":\n        case \"LineString\":\n        case \"MultiPoint\":\n        case \"Polygon\":\n        case \"MultiLineString\":\n        case \"MultiPolygon\":\n          {\n            if (callback(geometry, featureIndex, featureProperties, featureBBox, featureId) === false) return false;\n            break;\n          }\n        case \"GeometryCollection\":\n          {\n            for (j = 0; j < geometry.geometries.length; j++) {\n              if (callback(geometry.geometries[j], featureIndex, featureProperties, featureBBox, featureId) === false) return false;\n            }\n            break;\n          }\n        default:\n          throw new Error(\"Unknown Geometry Type\");\n      }\n    }\n    // Only increase `featureIndex` per each feature\n    featureIndex++;\n  }\n}\n\n/**\n * Callback for flattenEach\n *\n * @callback flattenEachCallback\n * @param {Feature} currentFeature The current flattened feature being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed.\n */\n\n/**\n * Iterate over flattened features in any GeoJSON object, similar to\n * Array.forEach.\n *\n * @name flattenEach\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object\n * @param {Function} callback a method that takes (currentFeature, featureIndex, multiFeatureIndex)\n * @example\n * var features = turf.featureCollection([\n *     turf.point([26, 37], {foo: 'bar'}),\n *     turf.multiPoint([[40, 30], [36, 53]], {hello: 'world'})\n * ]);\n *\n * turf.flattenEach(features, function (currentFeature, featureIndex, multiFeatureIndex) {\n *   //=currentFeature\n *   //=featureIndex\n *   //=multiFeatureIndex\n * });\n */\nfunction flattenEach$1(geojson, callback) {\n  geomEach$1(geojson, function (geometry, featureIndex, properties, bbox, id) {\n    // Callback for single geometry\n    var type = geometry === null ? null : geometry.type;\n    switch (type) {\n      case null:\n      case \"Point\":\n      case \"LineString\":\n      case \"Polygon\":\n        if (callback(feature(geometry, properties, {\n          bbox: bbox,\n          id: id\n        }), featureIndex, 0) === false) return false;\n        return;\n    }\n    var geomType;\n\n    // Callback for multi-geometry\n    switch (type) {\n      case \"MultiPoint\":\n        geomType = \"Point\";\n        break;\n      case \"MultiLineString\":\n        geomType = \"LineString\";\n        break;\n      case \"MultiPolygon\":\n        geomType = \"Polygon\";\n        break;\n    }\n    for (var multiFeatureIndex = 0; multiFeatureIndex < geometry.coordinates.length; multiFeatureIndex++) {\n      var coordinate = geometry.coordinates[multiFeatureIndex];\n      var geom = {\n        type: geomType,\n        coordinates: coordinate\n      };\n      if (callback(feature(geom, properties), featureIndex, multiFeatureIndex) === false) return false;\n    }\n  });\n}\n\n/**\n * Takes a set of features, calculates the bbox of all input features, and returns a bounding box.\n *\n * @name bbox\n * @param {GeoJSON} geojson any GeoJSON object\n * @returns {BBox} bbox extent in [minX, minY, maxX, maxY] order\n * @example\n * var line = turf.lineString([[-74, 40], [-78, 42], [-82, 35]]);\n * var bbox = turf.bbox(line);\n * var bboxPolygon = turf.bboxPolygon(bbox);\n *\n * //addToMap\n * var addToMap = [line, bboxPolygon]\n */\nfunction bbox$2(geojson) {\n  var result = [Infinity, Infinity, -Infinity, -Infinity];\n  coordEach$1(geojson, function (coord) {\n    if (result[0] > coord[0]) {\n      result[0] = coord[0];\n    }\n    if (result[1] > coord[1]) {\n      result[1] = coord[1];\n    }\n    if (result[2] < coord[0]) {\n      result[2] = coord[0];\n    }\n    if (result[3] < coord[1]) {\n      result[3] = coord[1];\n    }\n  });\n  return result;\n}\nbbox$2[\"default\"] = bbox$2;\n\n/**\n * Unwrap a coordinate from a Point Feature, Geometry or a single coordinate.\n *\n * @name getCoord\n * @param {Array<number>|Geometry<Point>|Feature<Point>} coord GeoJSON Point or an Array of numbers\n * @returns {Array<number>} coordinates\n * @example\n * var pt = turf.point([10, 10]);\n *\n * var coord = turf.getCoord(pt);\n * //= [10, 10]\n */\nfunction getCoord(coord) {\n  if (!coord) {\n    throw new Error(\"coord is required\");\n  }\n  if (!Array.isArray(coord)) {\n    if (coord.type === \"Feature\" && coord.geometry !== null && coord.geometry.type === \"Point\") {\n      return coord.geometry.coordinates;\n    }\n    if (coord.type === \"Point\") {\n      return coord.coordinates;\n    }\n  }\n  if (Array.isArray(coord) && coord.length >= 2 && !Array.isArray(coord[0]) && !Array.isArray(coord[1])) {\n    return coord;\n  }\n  throw new Error(\"coord must be GeoJSON Point or an Array of numbers\");\n}\n/**\n * Unwrap coordinates from a Feature, Geometry Object or an Array\n *\n * @name getCoords\n * @param {Array<any>|Geometry|Feature} coords Feature, Geometry Object or an Array\n * @returns {Array<any>} coordinates\n * @example\n * var poly = turf.polygon([[[119.32, -8.7], [119.55, -8.69], [119.51, -8.54], [119.32, -8.7]]]);\n *\n * var coords = turf.getCoords(poly);\n * //= [[[119.32, -8.7], [119.55, -8.69], [119.51, -8.54], [119.32, -8.7]]]\n */\nfunction getCoords(coords) {\n  if (Array.isArray(coords)) {\n    return coords;\n  }\n  // Feature\n  if (coords.type === \"Feature\") {\n    if (coords.geometry !== null) {\n      return coords.geometry.coordinates;\n    }\n  } else {\n    // Geometry\n    if (coords.coordinates) {\n      return coords.coordinates;\n    }\n  }\n  throw new Error(\"coords must be GeoJSON Feature, Geometry Object or an Array\");\n}\n/**\n * Get Geometry from Feature or Geometry Object\n *\n * @param {Feature|Geometry} geojson GeoJSON Feature or Geometry Object\n * @returns {Geometry|null} GeoJSON Geometry Object\n * @throws {Error} if geojson is not a Feature or Geometry Object\n * @example\n * var point = {\n *   \"type\": \"Feature\",\n *   \"properties\": {},\n *   \"geometry\": {\n *     \"type\": \"Point\",\n *     \"coordinates\": [110, 40]\n *   }\n * }\n * var geom = turf.getGeom(point)\n * //={\"type\": \"Point\", \"coordinates\": [110, 40]}\n */\nfunction getGeom(geojson) {\n  if (geojson.type === \"Feature\") {\n    return geojson.geometry;\n  }\n  return geojson;\n}\n\n// http://en.wikipedia.org/wiki/Even%E2%80%93odd_rule\n// modified from: https://github.com/substack/point-in-polygon/blob/master/index.js\n// which was modified from http://www.ecse.rpi.edu/Homepages/wrf/Research/Short_Notes/pnpoly.html\n/**\n * Takes a {@link Point} and a {@link Polygon} or {@link MultiPolygon} and determines if the point\n * resides inside the polygon. The polygon can be convex or concave. The function accounts for holes.\n *\n * @name booleanPointInPolygon\n * @param {Coord} point input point\n * @param {Feature<Polygon|MultiPolygon>} polygon input polygon or multipolygon\n * @param {Object} [options={}] Optional parameters\n * @param {boolean} [options.ignoreBoundary=false] True if polygon boundary should be ignored when determining if\n * the point is inside the polygon otherwise false.\n * @returns {boolean} `true` if the Point is inside the Polygon; `false` if the Point is not inside the Polygon\n * @example\n * var pt = turf.point([-77, 44]);\n * var poly = turf.polygon([[\n *   [-81, 41],\n *   [-81, 47],\n *   [-72, 47],\n *   [-72, 41],\n *   [-81, 41]\n * ]]);\n *\n * turf.booleanPointInPolygon(pt, poly);\n * //= true\n */\nfunction booleanPointInPolygon(point, polygon, options) {\n  if (options === void 0) {\n    options = {};\n  }\n  // validation\n  if (!point) {\n    throw new Error(\"point is required\");\n  }\n  if (!polygon) {\n    throw new Error(\"polygon is required\");\n  }\n  var pt = getCoord(point);\n  var geom = getGeom(polygon);\n  var type = geom.type;\n  var bbox = polygon.bbox;\n  var polys = geom.coordinates;\n  // Quick elimination if point is not inside bbox\n  if (bbox && inBBox(pt, bbox) === false) {\n    return false;\n  }\n  // normalize to multipolygon\n  if (type === \"Polygon\") {\n    polys = [polys];\n  }\n  var insidePoly = false;\n  for (var i = 0; i < polys.length && !insidePoly; i++) {\n    // check if it is in the outer ring first\n    if (inRing(pt, polys[i][0], options.ignoreBoundary)) {\n      var inHole = false;\n      var k = 1;\n      // check for the point in any of the holes\n      while (k < polys[i].length && !inHole) {\n        if (inRing(pt, polys[i][k], !options.ignoreBoundary)) {\n          inHole = true;\n        }\n        k++;\n      }\n      if (!inHole) {\n        insidePoly = true;\n      }\n    }\n  }\n  return insidePoly;\n}\n/**\n * inRing\n *\n * @private\n * @param {Array<number>} pt [x,y]\n * @param {Array<Array<number>>} ring [[x,y], [x,y],..]\n * @param {boolean} ignoreBoundary ignoreBoundary\n * @returns {boolean} inRing\n */\nfunction inRing(pt, ring, ignoreBoundary) {\n  var isInside = false;\n  if (ring[0][0] === ring[ring.length - 1][0] && ring[0][1] === ring[ring.length - 1][1]) {\n    ring = ring.slice(0, ring.length - 1);\n  }\n  for (var i = 0, j = ring.length - 1; i < ring.length; j = i++) {\n    var xi = ring[i][0];\n    var yi = ring[i][1];\n    var xj = ring[j][0];\n    var yj = ring[j][1];\n    var onBoundary = pt[1] * (xi - xj) + yi * (xj - pt[0]) + yj * (pt[0] - xi) === 0 && (xi - pt[0]) * (xj - pt[0]) <= 0 && (yi - pt[1]) * (yj - pt[1]) <= 0;\n    if (onBoundary) {\n      return !ignoreBoundary;\n    }\n    var intersect = yi > pt[1] !== yj > pt[1] && pt[0] < (xj - xi) * (pt[1] - yi) / (yj - yi) + xi;\n    if (intersect) {\n      isInside = !isInside;\n    }\n  }\n  return isInside;\n}\n/**\n * inBBox\n *\n * @private\n * @param {Position} pt point [x,y]\n * @param {BBox} bbox BBox [west, south, east, north]\n * @returns {boolean} true/false if point is inside BBox\n */\nfunction inBBox(pt, bbox) {\n  return bbox[0] <= pt[0] && bbox[1] <= pt[1] && bbox[2] >= pt[0] && bbox[3] >= pt[1];\n}\n\n/**\n * Creates a {@link FeatureCollection} of 2-vertex {@link LineString} segments from a\n * {@link LineString|(Multi)LineString} or {@link Polygon|(Multi)Polygon}.\n *\n * @name lineSegment\n * @param {GeoJSON} geojson GeoJSON Polygon or LineString\n * @returns {FeatureCollection<LineString>} 2-vertex line segments\n * @example\n * var polygon = turf.polygon([[[-50, 5], [-40, -10], [-50, -10], [-40, 5], [-50, 5]]]);\n * var segments = turf.lineSegment(polygon);\n *\n * //addToMap\n * var addToMap = [polygon, segments]\n */\nfunction lineSegment(geojson) {\n  if (!geojson) {\n    throw new Error(\"geojson is required\");\n  }\n  var results = [];\n  flattenEach$1(geojson, function (feature) {\n    lineSegmentFeature(feature, results);\n  });\n  return featureCollection$1(results);\n}\n/**\n * Line Segment\n *\n * @private\n * @param {Feature<LineString|Polygon>} geojson Line or polygon feature\n * @param {Array} results push to results\n * @returns {void}\n */\nfunction lineSegmentFeature(geojson, results) {\n  var coords = [];\n  var geometry = geojson.geometry;\n  if (geometry !== null) {\n    switch (geometry.type) {\n      case \"Polygon\":\n        coords = getCoords(geometry);\n        break;\n      case \"LineString\":\n        coords = [getCoords(geometry)];\n    }\n    coords.forEach(function (coord) {\n      var segments = createSegments(coord, geojson.properties);\n      segments.forEach(function (segment) {\n        segment.id = results.length;\n        results.push(segment);\n      });\n    });\n  }\n}\n/**\n * Create Segments from LineString coordinates\n *\n * @private\n * @param {Array<Array<number>>} coords LineString coordinates\n * @param {*} properties GeoJSON properties\n * @returns {Array<Feature<LineString>>} line segments\n */\nfunction createSegments(coords, properties) {\n  var segments = [];\n  coords.reduce(function (previousCoords, currentCoords) {\n    var segment = lineString([previousCoords, currentCoords], properties);\n    segment.bbox = bbox$1(previousCoords, currentCoords);\n    segments.push(segment);\n    return currentCoords;\n  });\n  return segments;\n}\n/**\n * Create BBox between two coordinates (faster than @turf/bbox)\n *\n * @private\n * @param {Array<number>} coords1 Point coordinate\n * @param {Array<number>} coords2 Point coordinate\n * @returns {BBox} [west, south, east, north]\n */\nfunction bbox$1(coords1, coords2) {\n  var x1 = coords1[0];\n  var y1 = coords1[1];\n  var x2 = coords2[0];\n  var y2 = coords2[1];\n  var west = x1 < x2 ? x1 : x2;\n  var south = y1 < y2 ? y1 : y2;\n  var east = x1 > x2 ? x1 : x2;\n  var north = y1 > y2 ? y1 : y2;\n  return [west, south, east, north];\n}\nvar geojsonRbush$1 = {\n  exports: {}\n};\nfunction quickselect(arr, k, left, right, compare) {\n  quickselectStep(arr, k, left || 0, right || arr.length - 1, compare || defaultCompare);\n}\nfunction quickselectStep(arr, k, left, right, compare) {\n  while (right > left) {\n    if (right - left > 600) {\n      var n = right - left + 1;\n      var m = k - left + 1;\n      var z = Math.log(n);\n      var s = 0.5 * Math.exp(2 * z / 3);\n      var sd = 0.5 * Math.sqrt(z * s * (n - s) / n) * (m - n / 2 < 0 ? -1 : 1);\n      var newLeft = Math.max(left, Math.floor(k - m * s / n + sd));\n      var newRight = Math.min(right, Math.floor(k + (n - m) * s / n + sd));\n      quickselectStep(arr, k, newLeft, newRight, compare);\n    }\n    var t = arr[k];\n    var i = left;\n    var j = right;\n    swap(arr, left, k);\n    if (compare(arr[right], t) > 0) swap(arr, left, right);\n    while (i < j) {\n      swap(arr, i, j);\n      i++;\n      j--;\n      while (compare(arr[i], t) < 0) i++;\n      while (compare(arr[j], t) > 0) j--;\n    }\n    if (compare(arr[left], t) === 0) swap(arr, left, j);else {\n      j++;\n      swap(arr, j, right);\n    }\n    if (j <= k) left = j + 1;\n    if (k <= j) right = j - 1;\n  }\n}\nfunction swap(arr, i, j) {\n  var tmp = arr[i];\n  arr[i] = arr[j];\n  arr[j] = tmp;\n}\nfunction defaultCompare(a, b) {\n  return a < b ? -1 : a > b ? 1 : 0;\n}\nvar RBush = /*#__PURE__*/function () {\n  function RBush() {\n    var maxEntries = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 9;\n    _classCallCheck(this, RBush);\n    // max entries in a node is 9 by default; min node fill is 40% for best performance\n    this._maxEntries = Math.max(4, maxEntries);\n    this._minEntries = Math.max(2, Math.ceil(this._maxEntries * 0.4));\n    this.clear();\n  }\n  _createClass(RBush, [{\n    key: \"all\",\n    value: function all() {\n      return this._all(this.data, []);\n    }\n  }, {\n    key: \"search\",\n    value: function search(bbox) {\n      var node = this.data;\n      var result = [];\n      if (!intersects$1(bbox, node)) return result;\n      var toBBox = this.toBBox;\n      var nodesToSearch = [];\n      while (node) {\n        for (var i = 0; i < node.children.length; i++) {\n          var child = node.children[i];\n          var childBBox = node.leaf ? toBBox(child) : child;\n          if (intersects$1(bbox, childBBox)) {\n            if (node.leaf) result.push(child);else if (contains(bbox, childBBox)) this._all(child, result);else nodesToSearch.push(child);\n          }\n        }\n        node = nodesToSearch.pop();\n      }\n      return result;\n    }\n  }, {\n    key: \"collides\",\n    value: function collides(bbox) {\n      var node = this.data;\n      if (!intersects$1(bbox, node)) return false;\n      var nodesToSearch = [];\n      while (node) {\n        for (var i = 0; i < node.children.length; i++) {\n          var child = node.children[i];\n          var childBBox = node.leaf ? this.toBBox(child) : child;\n          if (intersects$1(bbox, childBBox)) {\n            if (node.leaf || contains(bbox, childBBox)) return true;\n            nodesToSearch.push(child);\n          }\n        }\n        node = nodesToSearch.pop();\n      }\n      return false;\n    }\n  }, {\n    key: \"load\",\n    value: function load(data) {\n      if (!(data && data.length)) return this;\n      if (data.length < this._minEntries) {\n        for (var i = 0; i < data.length; i++) {\n          this.insert(data[i]);\n        }\n        return this;\n      }\n\n      // recursively build the tree with the given data from scratch using OMT algorithm\n      var node = this._build(data.slice(), 0, data.length - 1, 0);\n      if (!this.data.children.length) {\n        // save as is if tree is empty\n        this.data = node;\n      } else if (this.data.height === node.height) {\n        // split root if trees have the same height\n        this._splitRoot(this.data, node);\n      } else {\n        if (this.data.height < node.height) {\n          // swap trees if inserted one is bigger\n          var tmpNode = this.data;\n          this.data = node;\n          node = tmpNode;\n        }\n\n        // insert the small tree into the large tree at appropriate level\n        this._insert(node, this.data.height - node.height - 1, true);\n      }\n      return this;\n    }\n  }, {\n    key: \"insert\",\n    value: function insert(item) {\n      if (item) this._insert(item, this.data.height - 1);\n      return this;\n    }\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      this.data = createNode([]);\n      return this;\n    }\n  }, {\n    key: \"remove\",\n    value: function remove(item, equalsFn) {\n      if (!item) return this;\n      var node = this.data;\n      var bbox = this.toBBox(item);\n      var path = [];\n      var indexes = [];\n      var i, parent, goingUp;\n\n      // depth-first iterative tree traversal\n      while (node || path.length) {\n        if (!node) {\n          // go up\n          node = path.pop();\n          parent = path[path.length - 1];\n          i = indexes.pop();\n          goingUp = true;\n        }\n        if (node.leaf) {\n          // check current node\n          var index = findItem(item, node.children, equalsFn);\n          if (index !== -1) {\n            // item found, remove the item and condense tree upwards\n            node.children.splice(index, 1);\n            path.push(node);\n            this._condense(path);\n            return this;\n          }\n        }\n        if (!goingUp && !node.leaf && contains(node, bbox)) {\n          // go down\n          path.push(node);\n          indexes.push(i);\n          i = 0;\n          parent = node;\n          node = node.children[0];\n        } else if (parent) {\n          // go right\n          i++;\n          node = parent.children[i];\n          goingUp = false;\n        } else node = null; // nothing found\n      }\n\n      return this;\n    }\n  }, {\n    key: \"toBBox\",\n    value: function toBBox(item) {\n      return item;\n    }\n  }, {\n    key: \"compareMinX\",\n    value: function compareMinX(a, b) {\n      return a.minX - b.minX;\n    }\n  }, {\n    key: \"compareMinY\",\n    value: function compareMinY(a, b) {\n      return a.minY - b.minY;\n    }\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      return this.data;\n    }\n  }, {\n    key: \"fromJSON\",\n    value: function fromJSON(data) {\n      this.data = data;\n      return this;\n    }\n  }, {\n    key: \"_all\",\n    value: function _all(node, result) {\n      var nodesToSearch = [];\n      while (node) {\n        if (node.leaf) result.push.apply(result, _toConsumableArray(node.children));else nodesToSearch.push.apply(nodesToSearch, _toConsumableArray(node.children));\n        node = nodesToSearch.pop();\n      }\n      return result;\n    }\n  }, {\n    key: \"_build\",\n    value: function _build(items, left, right, height) {\n      var N = right - left + 1;\n      var M = this._maxEntries;\n      var node;\n      if (N <= M) {\n        // reached leaf level; return leaf\n        node = createNode(items.slice(left, right + 1));\n        calcBBox(node, this.toBBox);\n        return node;\n      }\n      if (!height) {\n        // target height of the bulk-loaded tree\n        height = Math.ceil(Math.log(N) / Math.log(M));\n\n        // target number of root entries to maximize storage utilization\n        M = Math.ceil(N / Math.pow(M, height - 1));\n      }\n      node = createNode([]);\n      node.leaf = false;\n      node.height = height;\n\n      // split the items into M mostly square tiles\n\n      var N2 = Math.ceil(N / M);\n      var N1 = N2 * Math.ceil(Math.sqrt(M));\n      multiSelect(items, left, right, N1, this.compareMinX);\n      for (var i = left; i <= right; i += N1) {\n        var right2 = Math.min(i + N1 - 1, right);\n        multiSelect(items, i, right2, N2, this.compareMinY);\n        for (var j = i; j <= right2; j += N2) {\n          var right3 = Math.min(j + N2 - 1, right2);\n\n          // pack each entry recursively\n          node.children.push(this._build(items, j, right3, height - 1));\n        }\n      }\n      calcBBox(node, this.toBBox);\n      return node;\n    }\n  }, {\n    key: \"_chooseSubtree\",\n    value: function _chooseSubtree(bbox, node, level, path) {\n      while (true) {\n        path.push(node);\n        if (node.leaf || path.length - 1 === level) break;\n        var minArea = Infinity;\n        var minEnlargement = Infinity;\n        var targetNode = void 0;\n        for (var i = 0; i < node.children.length; i++) {\n          var child = node.children[i];\n          var area = bboxArea(child);\n          var enlargement = enlargedArea(bbox, child) - area;\n\n          // choose entry with the least area enlargement\n          if (enlargement < minEnlargement) {\n            minEnlargement = enlargement;\n            minArea = area < minArea ? area : minArea;\n            targetNode = child;\n          } else if (enlargement === minEnlargement) {\n            // otherwise choose one with the smallest area\n            if (area < minArea) {\n              minArea = area;\n              targetNode = child;\n            }\n          }\n        }\n        node = targetNode || node.children[0];\n      }\n      return node;\n    }\n  }, {\n    key: \"_insert\",\n    value: function _insert(item, level, isNode) {\n      var bbox = isNode ? item : this.toBBox(item);\n      var insertPath = [];\n\n      // find the best node for accommodating the item, saving all nodes along the path too\n      var node = this._chooseSubtree(bbox, this.data, level, insertPath);\n\n      // put the item into the node\n      node.children.push(item);\n      extend(node, bbox);\n\n      // split on node overflow; propagate upwards if necessary\n      while (level >= 0) {\n        if (insertPath[level].children.length > this._maxEntries) {\n          this._split(insertPath, level);\n          level--;\n        } else break;\n      }\n\n      // adjust bboxes along the insertion path\n      this._adjustParentBBoxes(bbox, insertPath, level);\n    }\n\n    // split overflowed node into two\n  }, {\n    key: \"_split\",\n    value: function _split(insertPath, level) {\n      var node = insertPath[level];\n      var M = node.children.length;\n      var m = this._minEntries;\n      this._chooseSplitAxis(node, m, M);\n      var splitIndex = this._chooseSplitIndex(node, m, M);\n      var newNode = createNode(node.children.splice(splitIndex, node.children.length - splitIndex));\n      newNode.height = node.height;\n      newNode.leaf = node.leaf;\n      calcBBox(node, this.toBBox);\n      calcBBox(newNode, this.toBBox);\n      if (level) insertPath[level - 1].children.push(newNode);else this._splitRoot(node, newNode);\n    }\n  }, {\n    key: \"_splitRoot\",\n    value: function _splitRoot(node, newNode) {\n      // split root node\n      this.data = createNode([node, newNode]);\n      this.data.height = node.height + 1;\n      this.data.leaf = false;\n      calcBBox(this.data, this.toBBox);\n    }\n  }, {\n    key: \"_chooseSplitIndex\",\n    value: function _chooseSplitIndex(node, m, M) {\n      var index;\n      var minOverlap = Infinity;\n      var minArea = Infinity;\n      for (var i = m; i <= M - m; i++) {\n        var bbox1 = distBBox(node, 0, i, this.toBBox);\n        var bbox2 = distBBox(node, i, M, this.toBBox);\n        var overlap = intersectionArea(bbox1, bbox2);\n        var area = bboxArea(bbox1) + bboxArea(bbox2);\n\n        // choose distribution with minimum overlap\n        if (overlap < minOverlap) {\n          minOverlap = overlap;\n          index = i;\n          minArea = area < minArea ? area : minArea;\n        } else if (overlap === minOverlap) {\n          // otherwise choose distribution with minimum area\n          if (area < minArea) {\n            minArea = area;\n            index = i;\n          }\n        }\n      }\n      return index || M - m;\n    }\n\n    // sorts node children by the best axis for split\n  }, {\n    key: \"_chooseSplitAxis\",\n    value: function _chooseSplitAxis(node, m, M) {\n      var compareMinX = node.leaf ? this.compareMinX : compareNodeMinX;\n      var compareMinY = node.leaf ? this.compareMinY : compareNodeMinY;\n      var xMargin = this._allDistMargin(node, m, M, compareMinX);\n      var yMargin = this._allDistMargin(node, m, M, compareMinY);\n\n      // if total distributions margin value is minimal for x, sort by minX,\n      // otherwise it's already sorted by minY\n      if (xMargin < yMargin) node.children.sort(compareMinX);\n    }\n\n    // total margin of all possible split distributions where each node is at least m full\n  }, {\n    key: \"_allDistMargin\",\n    value: function _allDistMargin(node, m, M, compare) {\n      node.children.sort(compare);\n      var toBBox = this.toBBox;\n      var leftBBox = distBBox(node, 0, m, toBBox);\n      var rightBBox = distBBox(node, M - m, M, toBBox);\n      var margin = bboxMargin(leftBBox) + bboxMargin(rightBBox);\n      for (var i = m; i < M - m; i++) {\n        var child = node.children[i];\n        extend(leftBBox, node.leaf ? toBBox(child) : child);\n        margin += bboxMargin(leftBBox);\n      }\n      for (var _i2 = M - m - 1; _i2 >= m; _i2--) {\n        var _child = node.children[_i2];\n        extend(rightBBox, node.leaf ? toBBox(_child) : _child);\n        margin += bboxMargin(rightBBox);\n      }\n      return margin;\n    }\n  }, {\n    key: \"_adjustParentBBoxes\",\n    value: function _adjustParentBBoxes(bbox, path, level) {\n      // adjust bboxes along the given tree path\n      for (var i = level; i >= 0; i--) {\n        extend(path[i], bbox);\n      }\n    }\n  }, {\n    key: \"_condense\",\n    value: function _condense(path) {\n      // go through the path, removing empty nodes and updating bboxes\n      for (var i = path.length - 1, siblings; i >= 0; i--) {\n        if (path[i].children.length === 0) {\n          if (i > 0) {\n            siblings = path[i - 1].children;\n            siblings.splice(siblings.indexOf(path[i]), 1);\n          } else this.clear();\n        } else calcBBox(path[i], this.toBBox);\n      }\n    }\n  }]);\n  return RBush;\n}();\nfunction findItem(item, items, equalsFn) {\n  if (!equalsFn) return items.indexOf(item);\n  for (var i = 0; i < items.length; i++) {\n    if (equalsFn(item, items[i])) return i;\n  }\n  return -1;\n}\n\n// calculate node's bbox from bboxes of its children\nfunction calcBBox(node, toBBox) {\n  distBBox(node, 0, node.children.length, toBBox, node);\n}\n\n// min bounding rectangle of node children from k to p-1\nfunction distBBox(node, k, p, toBBox, destNode) {\n  if (!destNode) destNode = createNode(null);\n  destNode.minX = Infinity;\n  destNode.minY = Infinity;\n  destNode.maxX = -Infinity;\n  destNode.maxY = -Infinity;\n  for (var i = k; i < p; i++) {\n    var child = node.children[i];\n    extend(destNode, node.leaf ? toBBox(child) : child);\n  }\n  return destNode;\n}\nfunction extend(a, b) {\n  a.minX = Math.min(a.minX, b.minX);\n  a.minY = Math.min(a.minY, b.minY);\n  a.maxX = Math.max(a.maxX, b.maxX);\n  a.maxY = Math.max(a.maxY, b.maxY);\n  return a;\n}\nfunction compareNodeMinX(a, b) {\n  return a.minX - b.minX;\n}\nfunction compareNodeMinY(a, b) {\n  return a.minY - b.minY;\n}\nfunction bboxArea(a) {\n  return (a.maxX - a.minX) * (a.maxY - a.minY);\n}\nfunction bboxMargin(a) {\n  return a.maxX - a.minX + (a.maxY - a.minY);\n}\nfunction enlargedArea(a, b) {\n  return (Math.max(b.maxX, a.maxX) - Math.min(b.minX, a.minX)) * (Math.max(b.maxY, a.maxY) - Math.min(b.minY, a.minY));\n}\nfunction intersectionArea(a, b) {\n  var minX = Math.max(a.minX, b.minX);\n  var minY = Math.max(a.minY, b.minY);\n  var maxX = Math.min(a.maxX, b.maxX);\n  var maxY = Math.min(a.maxY, b.maxY);\n  return Math.max(0, maxX - minX) * Math.max(0, maxY - minY);\n}\nfunction contains(a, b) {\n  return a.minX <= b.minX && a.minY <= b.minY && b.maxX <= a.maxX && b.maxY <= a.maxY;\n}\nfunction intersects$1(a, b) {\n  return b.minX <= a.maxX && b.minY <= a.maxY && b.maxX >= a.minX && b.maxY >= a.minY;\n}\nfunction createNode(children) {\n  return {\n    children: children,\n    height: 1,\n    leaf: true,\n    minX: Infinity,\n    minY: Infinity,\n    maxX: -Infinity,\n    maxY: -Infinity\n  };\n}\n\n// sort an array so that items come in groups of n unsorted items, with groups sorted between each other;\n// combines selection algorithm with binary divide & conquer approach\n\nfunction multiSelect(arr, left, right, n, compare) {\n  var stack = [left, right];\n  while (stack.length) {\n    right = stack.pop();\n    left = stack.pop();\n    if (right - left <= n) continue;\n    var mid = left + Math.ceil((right - left) / n / 2) * n;\n    quickselect(arr, mid, left, right, compare);\n    stack.push(left, mid, mid, right);\n  }\n}\nvar js$2 = {};\n(function (exports) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  /**\n   * @module helpers\n   */\n  /**\n   * Earth Radius used with the Harvesine formula and approximates using a spherical (non-ellipsoid) Earth.\n   *\n   * @memberof helpers\n   * @type {number}\n   */\n  exports.earthRadius = 6371008.8;\n  /**\n   * Unit of measurement factors using a spherical (non-ellipsoid) earth radius.\n   *\n   * @memberof helpers\n   * @type {Object}\n   */\n  exports.factors = {\n    centimeters: exports.earthRadius * 100,\n    centimetres: exports.earthRadius * 100,\n    degrees: exports.earthRadius / 111325,\n    feet: exports.earthRadius * 3.28084,\n    inches: exports.earthRadius * 39.37,\n    kilometers: exports.earthRadius / 1000,\n    kilometres: exports.earthRadius / 1000,\n    meters: exports.earthRadius,\n    metres: exports.earthRadius,\n    miles: exports.earthRadius / 1609.344,\n    millimeters: exports.earthRadius * 1000,\n    millimetres: exports.earthRadius * 1000,\n    nauticalmiles: exports.earthRadius / 1852,\n    radians: 1,\n    yards: exports.earthRadius * 1.0936\n  };\n  /**\n   * Units of measurement factors based on 1 meter.\n   *\n   * @memberof helpers\n   * @type {Object}\n   */\n  exports.unitsFactors = {\n    centimeters: 100,\n    centimetres: 100,\n    degrees: 1 / 111325,\n    feet: 3.28084,\n    inches: 39.37,\n    kilometers: 1 / 1000,\n    kilometres: 1 / 1000,\n    meters: 1,\n    metres: 1,\n    miles: 1 / 1609.344,\n    millimeters: 1000,\n    millimetres: 1000,\n    nauticalmiles: 1 / 1852,\n    radians: 1 / exports.earthRadius,\n    yards: 1.0936133\n  };\n  /**\n   * Area of measurement factors based on 1 square meter.\n   *\n   * @memberof helpers\n   * @type {Object}\n   */\n  exports.areaFactors = {\n    acres: 0.000247105,\n    centimeters: 10000,\n    centimetres: 10000,\n    feet: 10.763910417,\n    hectares: 0.0001,\n    inches: 1550.003100006,\n    kilometers: 0.000001,\n    kilometres: 0.000001,\n    meters: 1,\n    metres: 1,\n    miles: 3.86e-7,\n    millimeters: 1000000,\n    millimetres: 1000000,\n    yards: 1.195990046\n  };\n  /**\n   * Wraps a GeoJSON {@link Geometry} in a GeoJSON {@link Feature}.\n   *\n   * @name feature\n   * @param {Geometry} geometry input geometry\n   * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n   * @param {Object} [options={}] Optional Parameters\n   * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n   * @param {string|number} [options.id] Identifier associated with the Feature\n   * @returns {Feature} a GeoJSON Feature\n   * @example\n   * var geometry = {\n   *   \"type\": \"Point\",\n   *   \"coordinates\": [110, 50]\n   * };\n   *\n   * var feature = turf.feature(geometry);\n   *\n   * //=feature\n   */\n  function feature(geom, properties, options) {\n    if (options === void 0) {\n      options = {};\n    }\n    var feat = {\n      type: \"Feature\"\n    };\n    if (options.id === 0 || options.id) {\n      feat.id = options.id;\n    }\n    if (options.bbox) {\n      feat.bbox = options.bbox;\n    }\n    feat.properties = properties || {};\n    feat.geometry = geom;\n    return feat;\n  }\n  exports.feature = feature;\n  /**\n   * Creates a GeoJSON {@link Geometry} from a Geometry string type & coordinates.\n   * For GeometryCollection type use `helpers.geometryCollection`\n   *\n   * @name geometry\n   * @param {string} type Geometry Type\n   * @param {Array<any>} coordinates Coordinates\n   * @param {Object} [options={}] Optional Parameters\n   * @returns {Geometry} a GeoJSON Geometry\n   * @example\n   * var type = \"Point\";\n   * var coordinates = [110, 50];\n   * var geometry = turf.geometry(type, coordinates);\n   * // => geometry\n   */\n  function geometry(type, coordinates, _options) {\n    if (_options === void 0) {\n      _options = {};\n    }\n    switch (type) {\n      case \"Point\":\n        return point(coordinates).geometry;\n      case \"LineString\":\n        return lineString(coordinates).geometry;\n      case \"Polygon\":\n        return polygon(coordinates).geometry;\n      case \"MultiPoint\":\n        return multiPoint(coordinates).geometry;\n      case \"MultiLineString\":\n        return multiLineString(coordinates).geometry;\n      case \"MultiPolygon\":\n        return multiPolygon(coordinates).geometry;\n      default:\n        throw new Error(type + \" is invalid\");\n    }\n  }\n  exports.geometry = geometry;\n  /**\n   * Creates a {@link Point} {@link Feature} from a Position.\n   *\n   * @name point\n   * @param {Array<number>} coordinates longitude, latitude position (each in decimal degrees)\n   * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n   * @param {Object} [options={}] Optional Parameters\n   * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n   * @param {string|number} [options.id] Identifier associated with the Feature\n   * @returns {Feature<Point>} a Point feature\n   * @example\n   * var point = turf.point([-75.343, 39.984]);\n   *\n   * //=point\n   */\n  function point(coordinates, properties, options) {\n    if (options === void 0) {\n      options = {};\n    }\n    if (!coordinates) {\n      throw new Error(\"coordinates is required\");\n    }\n    if (!Array.isArray(coordinates)) {\n      throw new Error(\"coordinates must be an Array\");\n    }\n    if (coordinates.length < 2) {\n      throw new Error(\"coordinates must be at least 2 numbers long\");\n    }\n    if (!isNumber(coordinates[0]) || !isNumber(coordinates[1])) {\n      throw new Error(\"coordinates must contain numbers\");\n    }\n    var geom = {\n      type: \"Point\",\n      coordinates: coordinates\n    };\n    return feature(geom, properties, options);\n  }\n  exports.point = point;\n  /**\n   * Creates a {@link Point} {@link FeatureCollection} from an Array of Point coordinates.\n   *\n   * @name points\n   * @param {Array<Array<number>>} coordinates an array of Points\n   * @param {Object} [properties={}] Translate these properties to each Feature\n   * @param {Object} [options={}] Optional Parameters\n   * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north]\n   * associated with the FeatureCollection\n   * @param {string|number} [options.id] Identifier associated with the FeatureCollection\n   * @returns {FeatureCollection<Point>} Point Feature\n   * @example\n   * var points = turf.points([\n   *   [-75, 39],\n   *   [-80, 45],\n   *   [-78, 50]\n   * ]);\n   *\n   * //=points\n   */\n  function points(coordinates, properties, options) {\n    if (options === void 0) {\n      options = {};\n    }\n    return featureCollection(coordinates.map(function (coords) {\n      return point(coords, properties);\n    }), options);\n  }\n  exports.points = points;\n  /**\n   * Creates a {@link Polygon} {@link Feature} from an Array of LinearRings.\n   *\n   * @name polygon\n   * @param {Array<Array<Array<number>>>} coordinates an array of LinearRings\n   * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n   * @param {Object} [options={}] Optional Parameters\n   * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n   * @param {string|number} [options.id] Identifier associated with the Feature\n   * @returns {Feature<Polygon>} Polygon Feature\n   * @example\n   * var polygon = turf.polygon([[[-5, 52], [-4, 56], [-2, 51], [-7, 54], [-5, 52]]], { name: 'poly1' });\n   *\n   * //=polygon\n   */\n  function polygon(coordinates, properties, options) {\n    if (options === void 0) {\n      options = {};\n    }\n    for (var _i = 0, coordinates_1 = coordinates; _i < coordinates_1.length; _i++) {\n      var ring = coordinates_1[_i];\n      if (ring.length < 4) {\n        throw new Error(\"Each LinearRing of a Polygon must have 4 or more Positions.\");\n      }\n      for (var j = 0; j < ring[ring.length - 1].length; j++) {\n        // Check if first point of Polygon contains two numbers\n        if (ring[ring.length - 1][j] !== ring[0][j]) {\n          throw new Error(\"First and last Position are not equivalent.\");\n        }\n      }\n    }\n    var geom = {\n      type: \"Polygon\",\n      coordinates: coordinates\n    };\n    return feature(geom, properties, options);\n  }\n  exports.polygon = polygon;\n  /**\n   * Creates a {@link Polygon} {@link FeatureCollection} from an Array of Polygon coordinates.\n   *\n   * @name polygons\n   * @param {Array<Array<Array<Array<number>>>>} coordinates an array of Polygon coordinates\n   * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n   * @param {Object} [options={}] Optional Parameters\n   * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n   * @param {string|number} [options.id] Identifier associated with the FeatureCollection\n   * @returns {FeatureCollection<Polygon>} Polygon FeatureCollection\n   * @example\n   * var polygons = turf.polygons([\n   *   [[[-5, 52], [-4, 56], [-2, 51], [-7, 54], [-5, 52]]],\n   *   [[[-15, 42], [-14, 46], [-12, 41], [-17, 44], [-15, 42]]],\n   * ]);\n   *\n   * //=polygons\n   */\n  function polygons(coordinates, properties, options) {\n    if (options === void 0) {\n      options = {};\n    }\n    return featureCollection(coordinates.map(function (coords) {\n      return polygon(coords, properties);\n    }), options);\n  }\n  exports.polygons = polygons;\n  /**\n   * Creates a {@link LineString} {@link Feature} from an Array of Positions.\n   *\n   * @name lineString\n   * @param {Array<Array<number>>} coordinates an array of Positions\n   * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n   * @param {Object} [options={}] Optional Parameters\n   * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n   * @param {string|number} [options.id] Identifier associated with the Feature\n   * @returns {Feature<LineString>} LineString Feature\n   * @example\n   * var linestring1 = turf.lineString([[-24, 63], [-23, 60], [-25, 65], [-20, 69]], {name: 'line 1'});\n   * var linestring2 = turf.lineString([[-14, 43], [-13, 40], [-15, 45], [-10, 49]], {name: 'line 2'});\n   *\n   * //=linestring1\n   * //=linestring2\n   */\n  function lineString(coordinates, properties, options) {\n    if (options === void 0) {\n      options = {};\n    }\n    if (coordinates.length < 2) {\n      throw new Error(\"coordinates must be an array of two or more positions\");\n    }\n    var geom = {\n      type: \"LineString\",\n      coordinates: coordinates\n    };\n    return feature(geom, properties, options);\n  }\n  exports.lineString = lineString;\n  /**\n   * Creates a {@link LineString} {@link FeatureCollection} from an Array of LineString coordinates.\n   *\n   * @name lineStrings\n   * @param {Array<Array<Array<number>>>} coordinates an array of LinearRings\n   * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n   * @param {Object} [options={}] Optional Parameters\n   * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north]\n   * associated with the FeatureCollection\n   * @param {string|number} [options.id] Identifier associated with the FeatureCollection\n   * @returns {FeatureCollection<LineString>} LineString FeatureCollection\n   * @example\n   * var linestrings = turf.lineStrings([\n   *   [[-24, 63], [-23, 60], [-25, 65], [-20, 69]],\n   *   [[-14, 43], [-13, 40], [-15, 45], [-10, 49]]\n   * ]);\n   *\n   * //=linestrings\n   */\n  function lineStrings(coordinates, properties, options) {\n    if (options === void 0) {\n      options = {};\n    }\n    return featureCollection(coordinates.map(function (coords) {\n      return lineString(coords, properties);\n    }), options);\n  }\n  exports.lineStrings = lineStrings;\n  /**\n   * Takes one or more {@link Feature|Features} and creates a {@link FeatureCollection}.\n   *\n   * @name featureCollection\n   * @param {Feature[]} features input features\n   * @param {Object} [options={}] Optional Parameters\n   * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n   * @param {string|number} [options.id] Identifier associated with the Feature\n   * @returns {FeatureCollection} FeatureCollection of Features\n   * @example\n   * var locationA = turf.point([-75.343, 39.984], {name: 'Location A'});\n   * var locationB = turf.point([-75.833, 39.284], {name: 'Location B'});\n   * var locationC = turf.point([-75.534, 39.123], {name: 'Location C'});\n   *\n   * var collection = turf.featureCollection([\n   *   locationA,\n   *   locationB,\n   *   locationC\n   * ]);\n   *\n   * //=collection\n   */\n  function featureCollection(features, options) {\n    if (options === void 0) {\n      options = {};\n    }\n    var fc = {\n      type: \"FeatureCollection\"\n    };\n    if (options.id) {\n      fc.id = options.id;\n    }\n    if (options.bbox) {\n      fc.bbox = options.bbox;\n    }\n    fc.features = features;\n    return fc;\n  }\n  exports.featureCollection = featureCollection;\n  /**\n   * Creates a {@link Feature<MultiLineString>} based on a\n   * coordinate array. Properties can be added optionally.\n   *\n   * @name multiLineString\n   * @param {Array<Array<Array<number>>>} coordinates an array of LineStrings\n   * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n   * @param {Object} [options={}] Optional Parameters\n   * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n   * @param {string|number} [options.id] Identifier associated with the Feature\n   * @returns {Feature<MultiLineString>} a MultiLineString feature\n   * @throws {Error} if no coordinates are passed\n   * @example\n   * var multiLine = turf.multiLineString([[[0,0],[10,10]]]);\n   *\n   * //=multiLine\n   */\n  function multiLineString(coordinates, properties, options) {\n    if (options === void 0) {\n      options = {};\n    }\n    var geom = {\n      type: \"MultiLineString\",\n      coordinates: coordinates\n    };\n    return feature(geom, properties, options);\n  }\n  exports.multiLineString = multiLineString;\n  /**\n   * Creates a {@link Feature<MultiPoint>} based on a\n   * coordinate array. Properties can be added optionally.\n   *\n   * @name multiPoint\n   * @param {Array<Array<number>>} coordinates an array of Positions\n   * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n   * @param {Object} [options={}] Optional Parameters\n   * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n   * @param {string|number} [options.id] Identifier associated with the Feature\n   * @returns {Feature<MultiPoint>} a MultiPoint feature\n   * @throws {Error} if no coordinates are passed\n   * @example\n   * var multiPt = turf.multiPoint([[0,0],[10,10]]);\n   *\n   * //=multiPt\n   */\n  function multiPoint(coordinates, properties, options) {\n    if (options === void 0) {\n      options = {};\n    }\n    var geom = {\n      type: \"MultiPoint\",\n      coordinates: coordinates\n    };\n    return feature(geom, properties, options);\n  }\n  exports.multiPoint = multiPoint;\n  /**\n   * Creates a {@link Feature<MultiPolygon>} based on a\n   * coordinate array. Properties can be added optionally.\n   *\n   * @name multiPolygon\n   * @param {Array<Array<Array<Array<number>>>>} coordinates an array of Polygons\n   * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n   * @param {Object} [options={}] Optional Parameters\n   * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n   * @param {string|number} [options.id] Identifier associated with the Feature\n   * @returns {Feature<MultiPolygon>} a multipolygon feature\n   * @throws {Error} if no coordinates are passed\n   * @example\n   * var multiPoly = turf.multiPolygon([[[[0,0],[0,10],[10,10],[10,0],[0,0]]]]);\n   *\n   * //=multiPoly\n   *\n   */\n  function multiPolygon(coordinates, properties, options) {\n    if (options === void 0) {\n      options = {};\n    }\n    var geom = {\n      type: \"MultiPolygon\",\n      coordinates: coordinates\n    };\n    return feature(geom, properties, options);\n  }\n  exports.multiPolygon = multiPolygon;\n  /**\n   * Creates a {@link Feature<GeometryCollection>} based on a\n   * coordinate array. Properties can be added optionally.\n   *\n   * @name geometryCollection\n   * @param {Array<Geometry>} geometries an array of GeoJSON Geometries\n   * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n   * @param {Object} [options={}] Optional Parameters\n   * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n   * @param {string|number} [options.id] Identifier associated with the Feature\n   * @returns {Feature<GeometryCollection>} a GeoJSON GeometryCollection Feature\n   * @example\n   * var pt = turf.geometry(\"Point\", [100, 0]);\n   * var line = turf.geometry(\"LineString\", [[101, 0], [102, 1]]);\n   * var collection = turf.geometryCollection([pt, line]);\n   *\n   * // => collection\n   */\n  function geometryCollection(geometries, properties, options) {\n    if (options === void 0) {\n      options = {};\n    }\n    var geom = {\n      type: \"GeometryCollection\",\n      geometries: geometries\n    };\n    return feature(geom, properties, options);\n  }\n  exports.geometryCollection = geometryCollection;\n  /**\n   * Round number to precision\n   *\n   * @param {number} num Number\n   * @param {number} [precision=0] Precision\n   * @returns {number} rounded number\n   * @example\n   * turf.round(120.4321)\n   * //=120\n   *\n   * turf.round(120.4321, 2)\n   * //=120.43\n   */\n  function round(num, precision) {\n    if (precision === void 0) {\n      precision = 0;\n    }\n    if (precision && !(precision >= 0)) {\n      throw new Error(\"precision must be a positive number\");\n    }\n    var multiplier = Math.pow(10, precision || 0);\n    return Math.round(num * multiplier) / multiplier;\n  }\n  exports.round = round;\n  /**\n   * Convert a distance measurement (assuming a spherical Earth) from radians to a more friendly unit.\n   * Valid units: miles, nauticalmiles, inches, yards, meters, metres, kilometers, centimeters, feet\n   *\n   * @name radiansToLength\n   * @param {number} radians in radians across the sphere\n   * @param {string} [units=\"kilometers\"] can be degrees, radians, miles, inches, yards, metres,\n   * meters, kilometres, kilometers.\n   * @returns {number} distance\n   */\n  function radiansToLength(radians, units) {\n    if (units === void 0) {\n      units = \"kilometers\";\n    }\n    var factor = exports.factors[units];\n    if (!factor) {\n      throw new Error(units + \" units is invalid\");\n    }\n    return radians * factor;\n  }\n  exports.radiansToLength = radiansToLength;\n  /**\n   * Convert a distance measurement (assuming a spherical Earth) from a real-world unit into radians\n   * Valid units: miles, nauticalmiles, inches, yards, meters, metres, kilometers, centimeters, feet\n   *\n   * @name lengthToRadians\n   * @param {number} distance in real units\n   * @param {string} [units=\"kilometers\"] can be degrees, radians, miles, inches, yards, metres,\n   * meters, kilometres, kilometers.\n   * @returns {number} radians\n   */\n  function lengthToRadians(distance, units) {\n    if (units === void 0) {\n      units = \"kilometers\";\n    }\n    var factor = exports.factors[units];\n    if (!factor) {\n      throw new Error(units + \" units is invalid\");\n    }\n    return distance / factor;\n  }\n  exports.lengthToRadians = lengthToRadians;\n  /**\n   * Convert a distance measurement (assuming a spherical Earth) from a real-world unit into degrees\n   * Valid units: miles, nauticalmiles, inches, yards, meters, metres, centimeters, kilometres, feet\n   *\n   * @name lengthToDegrees\n   * @param {number} distance in real units\n   * @param {string} [units=\"kilometers\"] can be degrees, radians, miles, inches, yards, metres,\n   * meters, kilometres, kilometers.\n   * @returns {number} degrees\n   */\n  function lengthToDegrees(distance, units) {\n    return radiansToDegrees(lengthToRadians(distance, units));\n  }\n  exports.lengthToDegrees = lengthToDegrees;\n  /**\n   * Converts any bearing angle from the north line direction (positive clockwise)\n   * and returns an angle between 0-360 degrees (positive clockwise), 0 being the north line\n   *\n   * @name bearingToAzimuth\n   * @param {number} bearing angle, between -180 and +180 degrees\n   * @returns {number} angle between 0 and 360 degrees\n   */\n  function bearingToAzimuth(bearing) {\n    var angle = bearing % 360;\n    if (angle < 0) {\n      angle += 360;\n    }\n    return angle;\n  }\n  exports.bearingToAzimuth = bearingToAzimuth;\n  /**\n   * Converts an angle in radians to degrees\n   *\n   * @name radiansToDegrees\n   * @param {number} radians angle in radians\n   * @returns {number} degrees between 0 and 360 degrees\n   */\n  function radiansToDegrees(radians) {\n    var degrees = radians % (2 * Math.PI);\n    return degrees * 180 / Math.PI;\n  }\n  exports.radiansToDegrees = radiansToDegrees;\n  /**\n   * Converts an angle in degrees to radians\n   *\n   * @name degreesToRadians\n   * @param {number} degrees angle between 0 and 360 degrees\n   * @returns {number} angle in radians\n   */\n  function degreesToRadians(degrees) {\n    var radians = degrees % 360;\n    return radians * Math.PI / 180;\n  }\n  exports.degreesToRadians = degreesToRadians;\n  /**\n   * Converts a length to the requested unit.\n   * Valid units: miles, nauticalmiles, inches, yards, meters, metres, kilometers, centimeters, feet\n   *\n   * @param {number} length to be converted\n   * @param {Units} [originalUnit=\"kilometers\"] of the length\n   * @param {Units} [finalUnit=\"kilometers\"] returned unit\n   * @returns {number} the converted length\n   */\n  function convertLength(length, originalUnit, finalUnit) {\n    if (originalUnit === void 0) {\n      originalUnit = \"kilometers\";\n    }\n    if (finalUnit === void 0) {\n      finalUnit = \"kilometers\";\n    }\n    if (!(length >= 0)) {\n      throw new Error(\"length must be a positive number\");\n    }\n    return radiansToLength(lengthToRadians(length, originalUnit), finalUnit);\n  }\n  exports.convertLength = convertLength;\n  /**\n   * Converts a area to the requested unit.\n   * Valid units: kilometers, kilometres, meters, metres, centimetres, millimeters, acres, miles, yards, feet, inches, hectares\n   * @param {number} area to be converted\n   * @param {Units} [originalUnit=\"meters\"] of the distance\n   * @param {Units} [finalUnit=\"kilometers\"] returned unit\n   * @returns {number} the converted area\n   */\n  function convertArea(area, originalUnit, finalUnit) {\n    if (originalUnit === void 0) {\n      originalUnit = \"meters\";\n    }\n    if (finalUnit === void 0) {\n      finalUnit = \"kilometers\";\n    }\n    if (!(area >= 0)) {\n      throw new Error(\"area must be a positive number\");\n    }\n    var startFactor = exports.areaFactors[originalUnit];\n    if (!startFactor) {\n      throw new Error(\"invalid original units\");\n    }\n    var finalFactor = exports.areaFactors[finalUnit];\n    if (!finalFactor) {\n      throw new Error(\"invalid final units\");\n    }\n    return area / startFactor * finalFactor;\n  }\n  exports.convertArea = convertArea;\n  /**\n   * isNumber\n   *\n   * @param {*} num Number to validate\n   * @returns {boolean} true/false\n   * @example\n   * turf.isNumber(123)\n   * //=true\n   * turf.isNumber('foo')\n   * //=false\n   */\n  function isNumber(num) {\n    return !isNaN(num) && num !== null && !Array.isArray(num);\n  }\n  exports.isNumber = isNumber;\n  /**\n   * isObject\n   *\n   * @param {*} input variable to validate\n   * @returns {boolean} true/false\n   * @example\n   * turf.isObject({elevation: 10})\n   * //=true\n   * turf.isObject('foo')\n   * //=false\n   */\n  function isObject(input) {\n    return !!input && input.constructor === Object;\n  }\n  exports.isObject = isObject;\n  /**\n   * Validate BBox\n   *\n   * @private\n   * @param {Array<number>} bbox BBox to validate\n   * @returns {void}\n   * @throws Error if BBox is not valid\n   * @example\n   * validateBBox([-180, -40, 110, 50])\n   * //=OK\n   * validateBBox([-180, -40])\n   * //=Error\n   * validateBBox('Foo')\n   * //=Error\n   * validateBBox(5)\n   * //=Error\n   * validateBBox(null)\n   * //=Error\n   * validateBBox(undefined)\n   * //=Error\n   */\n  function validateBBox(bbox) {\n    if (!bbox) {\n      throw new Error(\"bbox is required\");\n    }\n    if (!Array.isArray(bbox)) {\n      throw new Error(\"bbox must be an Array\");\n    }\n    if (bbox.length !== 4 && bbox.length !== 6) {\n      throw new Error(\"bbox must be an Array of 4 or 6 numbers\");\n    }\n    bbox.forEach(function (num) {\n      if (!isNumber(num)) {\n        throw new Error(\"bbox must only contain numbers\");\n      }\n    });\n  }\n  exports.validateBBox = validateBBox;\n  /**\n   * Validate Id\n   *\n   * @private\n   * @param {string|number} id Id to validate\n   * @returns {void}\n   * @throws Error if Id is not valid\n   * @example\n   * validateId([-180, -40, 110, 50])\n   * //=Error\n   * validateId([-180, -40])\n   * //=Error\n   * validateId('Foo')\n   * //=OK\n   * validateId(5)\n   * //=OK\n   * validateId(null)\n   * //=Error\n   * validateId(undefined)\n   * //=Error\n   */\n  function validateId(id) {\n    if (!id) {\n      throw new Error(\"id is required\");\n    }\n    if ([\"string\", \"number\"].indexOf(typeof id) === -1) {\n      throw new Error(\"id must be a number or a string\");\n    }\n  }\n  exports.validateId = validateId;\n})(js$2);\nvar js$1 = {};\nObject.defineProperty(js$1, '__esModule', {\n  value: true\n});\nvar helpers$1 = js$2;\n\n/**\n * Callback for coordEach\n *\n * @callback coordEachCallback\n * @param {Array<number>} currentCoord The current coordinate being processed.\n * @param {number} coordIndex The current index of the coordinate being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed.\n * @param {number} geometryIndex The current index of the Geometry being processed.\n */\n\n/**\n * Iterate over coordinates in any GeoJSON object, similar to Array.forEach()\n *\n * @name coordEach\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object\n * @param {Function} callback a method that takes (currentCoord, coordIndex, featureIndex, multiFeatureIndex)\n * @param {boolean} [excludeWrapCoord=false] whether or not to include the final coordinate of LinearRings that wraps the ring in its iteration.\n * @returns {void}\n * @example\n * var features = turf.featureCollection([\n *   turf.point([26, 37], {\"foo\": \"bar\"}),\n *   turf.point([36, 53], {\"hello\": \"world\"})\n * ]);\n *\n * turf.coordEach(features, function (currentCoord, coordIndex, featureIndex, multiFeatureIndex, geometryIndex) {\n *   //=currentCoord\n *   //=coordIndex\n *   //=featureIndex\n *   //=multiFeatureIndex\n *   //=geometryIndex\n * });\n */\nfunction coordEach(geojson, callback, excludeWrapCoord) {\n  // Handles null Geometry -- Skips this GeoJSON\n  if (geojson === null) return;\n  var j,\n    k,\n    l,\n    geometry,\n    stopG,\n    coords,\n    geometryMaybeCollection,\n    wrapShrink = 0,\n    coordIndex = 0,\n    isGeometryCollection,\n    type = geojson.type,\n    isFeatureCollection = type === \"FeatureCollection\",\n    isFeature = type === \"Feature\",\n    stop = isFeatureCollection ? geojson.features.length : 1;\n\n  // This logic may look a little weird. The reason why it is that way\n  // is because it's trying to be fast. GeoJSON supports multiple kinds\n  // of objects at its root: FeatureCollection, Features, Geometries.\n  // This function has the responsibility of handling all of them, and that\n  // means that some of the `for` loops you see below actually just don't apply\n  // to certain inputs. For instance, if you give this just a\n  // Point geometry, then both loops are short-circuited and all we do\n  // is gradually rename the input until it's called 'geometry'.\n  //\n  // This also aims to allocate as few resources as possible: just a\n  // few numbers and booleans, rather than any temporary arrays as would\n  // be required with the normalization approach.\n  for (var featureIndex = 0; featureIndex < stop; featureIndex++) {\n    geometryMaybeCollection = isFeatureCollection ? geojson.features[featureIndex].geometry : isFeature ? geojson.geometry : geojson;\n    isGeometryCollection = geometryMaybeCollection ? geometryMaybeCollection.type === \"GeometryCollection\" : false;\n    stopG = isGeometryCollection ? geometryMaybeCollection.geometries.length : 1;\n    for (var geomIndex = 0; geomIndex < stopG; geomIndex++) {\n      var multiFeatureIndex = 0;\n      var geometryIndex = 0;\n      geometry = isGeometryCollection ? geometryMaybeCollection.geometries[geomIndex] : geometryMaybeCollection;\n\n      // Handles null Geometry -- Skips this geometry\n      if (geometry === null) continue;\n      coords = geometry.coordinates;\n      var geomType = geometry.type;\n      wrapShrink = excludeWrapCoord && (geomType === \"Polygon\" || geomType === \"MultiPolygon\") ? 1 : 0;\n      switch (geomType) {\n        case null:\n          break;\n        case \"Point\":\n          if (callback(coords, coordIndex, featureIndex, multiFeatureIndex, geometryIndex) === false) return false;\n          coordIndex++;\n          multiFeatureIndex++;\n          break;\n        case \"LineString\":\n        case \"MultiPoint\":\n          for (j = 0; j < coords.length; j++) {\n            if (callback(coords[j], coordIndex, featureIndex, multiFeatureIndex, geometryIndex) === false) return false;\n            coordIndex++;\n            if (geomType === \"MultiPoint\") multiFeatureIndex++;\n          }\n          if (geomType === \"LineString\") multiFeatureIndex++;\n          break;\n        case \"Polygon\":\n        case \"MultiLineString\":\n          for (j = 0; j < coords.length; j++) {\n            for (k = 0; k < coords[j].length - wrapShrink; k++) {\n              if (callback(coords[j][k], coordIndex, featureIndex, multiFeatureIndex, geometryIndex) === false) return false;\n              coordIndex++;\n            }\n            if (geomType === \"MultiLineString\") multiFeatureIndex++;\n            if (geomType === \"Polygon\") geometryIndex++;\n          }\n          if (geomType === \"Polygon\") multiFeatureIndex++;\n          break;\n        case \"MultiPolygon\":\n          for (j = 0; j < coords.length; j++) {\n            geometryIndex = 0;\n            for (k = 0; k < coords[j].length; k++) {\n              for (l = 0; l < coords[j][k].length - wrapShrink; l++) {\n                if (callback(coords[j][k][l], coordIndex, featureIndex, multiFeatureIndex, geometryIndex) === false) return false;\n                coordIndex++;\n              }\n              geometryIndex++;\n            }\n            multiFeatureIndex++;\n          }\n          break;\n        case \"GeometryCollection\":\n          for (j = 0; j < geometry.geometries.length; j++) if (coordEach(geometry.geometries[j], callback, excludeWrapCoord) === false) return false;\n          break;\n        default:\n          throw new Error(\"Unknown Geometry Type\");\n      }\n    }\n  }\n}\n\n/**\n * Callback for coordReduce\n *\n * The first time the callback function is called, the values provided as arguments depend\n * on whether the reduce method has an initialValue argument.\n *\n * If an initialValue is provided to the reduce method:\n *  - The previousValue argument is initialValue.\n *  - The currentValue argument is the value of the first element present in the array.\n *\n * If an initialValue is not provided:\n *  - The previousValue argument is the value of the first element present in the array.\n *  - The currentValue argument is the value of the second element present in the array.\n *\n * @callback coordReduceCallback\n * @param {*} previousValue The accumulated value previously returned in the last invocation\n * of the callback, or initialValue, if supplied.\n * @param {Array<number>} currentCoord The current coordinate being processed.\n * @param {number} coordIndex The current index of the coordinate being processed.\n * Starts at index 0, if an initialValue is provided, and at index 1 otherwise.\n * @param {number} featureIndex The current index of the Feature being processed.\n * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed.\n * @param {number} geometryIndex The current index of the Geometry being processed.\n */\n\n/**\n * Reduce coordinates in any GeoJSON object, similar to Array.reduce()\n *\n * @name coordReduce\n * @param {FeatureCollection|Geometry|Feature} geojson any GeoJSON object\n * @param {Function} callback a method that takes (previousValue, currentCoord, coordIndex)\n * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.\n * @param {boolean} [excludeWrapCoord=false] whether or not to include the final coordinate of LinearRings that wraps the ring in its iteration.\n * @returns {*} The value that results from the reduction.\n * @example\n * var features = turf.featureCollection([\n *   turf.point([26, 37], {\"foo\": \"bar\"}),\n *   turf.point([36, 53], {\"hello\": \"world\"})\n * ]);\n *\n * turf.coordReduce(features, function (previousValue, currentCoord, coordIndex, featureIndex, multiFeatureIndex, geometryIndex) {\n *   //=previousValue\n *   //=currentCoord\n *   //=coordIndex\n *   //=featureIndex\n *   //=multiFeatureIndex\n *   //=geometryIndex\n *   return currentCoord;\n * });\n */\nfunction coordReduce(geojson, callback, initialValue, excludeWrapCoord) {\n  var previousValue = initialValue;\n  coordEach(geojson, function (currentCoord, coordIndex, featureIndex, multiFeatureIndex, geometryIndex) {\n    if (coordIndex === 0 && initialValue === undefined) previousValue = currentCoord;else previousValue = callback(previousValue, currentCoord, coordIndex, featureIndex, multiFeatureIndex, geometryIndex);\n  }, excludeWrapCoord);\n  return previousValue;\n}\n\n/**\n * Callback for propEach\n *\n * @callback propEachCallback\n * @param {Object} currentProperties The current Properties being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n */\n\n/**\n * Iterate over properties in any GeoJSON object, similar to Array.forEach()\n *\n * @name propEach\n * @param {FeatureCollection|Feature} geojson any GeoJSON object\n * @param {Function} callback a method that takes (currentProperties, featureIndex)\n * @returns {void}\n * @example\n * var features = turf.featureCollection([\n *     turf.point([26, 37], {foo: 'bar'}),\n *     turf.point([36, 53], {hello: 'world'})\n * ]);\n *\n * turf.propEach(features, function (currentProperties, featureIndex) {\n *   //=currentProperties\n *   //=featureIndex\n * });\n */\nfunction propEach(geojson, callback) {\n  var i;\n  switch (geojson.type) {\n    case \"FeatureCollection\":\n      for (i = 0; i < geojson.features.length; i++) {\n        if (callback(geojson.features[i].properties, i) === false) break;\n      }\n      break;\n    case \"Feature\":\n      callback(geojson.properties, 0);\n      break;\n  }\n}\n\n/**\n * Callback for propReduce\n *\n * The first time the callback function is called, the values provided as arguments depend\n * on whether the reduce method has an initialValue argument.\n *\n * If an initialValue is provided to the reduce method:\n *  - The previousValue argument is initialValue.\n *  - The currentValue argument is the value of the first element present in the array.\n *\n * If an initialValue is not provided:\n *  - The previousValue argument is the value of the first element present in the array.\n *  - The currentValue argument is the value of the second element present in the array.\n *\n * @callback propReduceCallback\n * @param {*} previousValue The accumulated value previously returned in the last invocation\n * of the callback, or initialValue, if supplied.\n * @param {*} currentProperties The current Properties being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n */\n\n/**\n * Reduce properties in any GeoJSON object into a single value,\n * similar to how Array.reduce works. However, in this case we lazily run\n * the reduction, so an array of all properties is unnecessary.\n *\n * @name propReduce\n * @param {FeatureCollection|Feature} geojson any GeoJSON object\n * @param {Function} callback a method that takes (previousValue, currentProperties, featureIndex)\n * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.\n * @returns {*} The value that results from the reduction.\n * @example\n * var features = turf.featureCollection([\n *     turf.point([26, 37], {foo: 'bar'}),\n *     turf.point([36, 53], {hello: 'world'})\n * ]);\n *\n * turf.propReduce(features, function (previousValue, currentProperties, featureIndex) {\n *   //=previousValue\n *   //=currentProperties\n *   //=featureIndex\n *   return currentProperties\n * });\n */\nfunction propReduce(geojson, callback, initialValue) {\n  var previousValue = initialValue;\n  propEach(geojson, function (currentProperties, featureIndex) {\n    if (featureIndex === 0 && initialValue === undefined) previousValue = currentProperties;else previousValue = callback(previousValue, currentProperties, featureIndex);\n  });\n  return previousValue;\n}\n\n/**\n * Callback for featureEach\n *\n * @callback featureEachCallback\n * @param {Feature<any>} currentFeature The current Feature being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n */\n\n/**\n * Iterate over features in any GeoJSON object, similar to\n * Array.forEach.\n *\n * @name featureEach\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object\n * @param {Function} callback a method that takes (currentFeature, featureIndex)\n * @returns {void}\n * @example\n * var features = turf.featureCollection([\n *   turf.point([26, 37], {foo: 'bar'}),\n *   turf.point([36, 53], {hello: 'world'})\n * ]);\n *\n * turf.featureEach(features, function (currentFeature, featureIndex) {\n *   //=currentFeature\n *   //=featureIndex\n * });\n */\nfunction featureEach$1(geojson, callback) {\n  if (geojson.type === \"Feature\") {\n    callback(geojson, 0);\n  } else if (geojson.type === \"FeatureCollection\") {\n    for (var i = 0; i < geojson.features.length; i++) {\n      if (callback(geojson.features[i], i) === false) break;\n    }\n  }\n}\n\n/**\n * Callback for featureReduce\n *\n * The first time the callback function is called, the values provided as arguments depend\n * on whether the reduce method has an initialValue argument.\n *\n * If an initialValue is provided to the reduce method:\n *  - The previousValue argument is initialValue.\n *  - The currentValue argument is the value of the first element present in the array.\n *\n * If an initialValue is not provided:\n *  - The previousValue argument is the value of the first element present in the array.\n *  - The currentValue argument is the value of the second element present in the array.\n *\n * @callback featureReduceCallback\n * @param {*} previousValue The accumulated value previously returned in the last invocation\n * of the callback, or initialValue, if supplied.\n * @param {Feature} currentFeature The current Feature being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n */\n\n/**\n * Reduce features in any GeoJSON object, similar to Array.reduce().\n *\n * @name featureReduce\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object\n * @param {Function} callback a method that takes (previousValue, currentFeature, featureIndex)\n * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.\n * @returns {*} The value that results from the reduction.\n * @example\n * var features = turf.featureCollection([\n *   turf.point([26, 37], {\"foo\": \"bar\"}),\n *   turf.point([36, 53], {\"hello\": \"world\"})\n * ]);\n *\n * turf.featureReduce(features, function (previousValue, currentFeature, featureIndex) {\n *   //=previousValue\n *   //=currentFeature\n *   //=featureIndex\n *   return currentFeature\n * });\n */\nfunction featureReduce(geojson, callback, initialValue) {\n  var previousValue = initialValue;\n  featureEach$1(geojson, function (currentFeature, featureIndex) {\n    if (featureIndex === 0 && initialValue === undefined) previousValue = currentFeature;else previousValue = callback(previousValue, currentFeature, featureIndex);\n  });\n  return previousValue;\n}\n\n/**\n * Get all coordinates from any GeoJSON object.\n *\n * @name coordAll\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object\n * @returns {Array<Array<number>>} coordinate position array\n * @example\n * var features = turf.featureCollection([\n *   turf.point([26, 37], {foo: 'bar'}),\n *   turf.point([36, 53], {hello: 'world'})\n * ]);\n *\n * var coords = turf.coordAll(features);\n * //= [[26, 37], [36, 53]]\n */\nfunction coordAll(geojson) {\n  var coords = [];\n  coordEach(geojson, function (coord) {\n    coords.push(coord);\n  });\n  return coords;\n}\n\n/**\n * Callback for geomEach\n *\n * @callback geomEachCallback\n * @param {Geometry} currentGeometry The current Geometry being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n * @param {Object} featureProperties The current Feature Properties being processed.\n * @param {Array<number>} featureBBox The current Feature BBox being processed.\n * @param {number|string} featureId The current Feature Id being processed.\n */\n\n/**\n * Iterate over each geometry in any GeoJSON object, similar to Array.forEach()\n *\n * @name geomEach\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object\n * @param {Function} callback a method that takes (currentGeometry, featureIndex, featureProperties, featureBBox, featureId)\n * @returns {void}\n * @example\n * var features = turf.featureCollection([\n *     turf.point([26, 37], {foo: 'bar'}),\n *     turf.point([36, 53], {hello: 'world'})\n * ]);\n *\n * turf.geomEach(features, function (currentGeometry, featureIndex, featureProperties, featureBBox, featureId) {\n *   //=currentGeometry\n *   //=featureIndex\n *   //=featureProperties\n *   //=featureBBox\n *   //=featureId\n * });\n */\nfunction geomEach(geojson, callback) {\n  var i,\n    j,\n    g,\n    geometry,\n    stopG,\n    geometryMaybeCollection,\n    isGeometryCollection,\n    featureProperties,\n    featureBBox,\n    featureId,\n    featureIndex = 0,\n    isFeatureCollection = geojson.type === \"FeatureCollection\",\n    isFeature = geojson.type === \"Feature\",\n    stop = isFeatureCollection ? geojson.features.length : 1;\n\n  // This logic may look a little weird. The reason why it is that way\n  // is because it's trying to be fast. GeoJSON supports multiple kinds\n  // of objects at its root: FeatureCollection, Features, Geometries.\n  // This function has the responsibility of handling all of them, and that\n  // means that some of the `for` loops you see below actually just don't apply\n  // to certain inputs. For instance, if you give this just a\n  // Point geometry, then both loops are short-circuited and all we do\n  // is gradually rename the input until it's called 'geometry'.\n  //\n  // This also aims to allocate as few resources as possible: just a\n  // few numbers and booleans, rather than any temporary arrays as would\n  // be required with the normalization approach.\n  for (i = 0; i < stop; i++) {\n    geometryMaybeCollection = isFeatureCollection ? geojson.features[i].geometry : isFeature ? geojson.geometry : geojson;\n    featureProperties = isFeatureCollection ? geojson.features[i].properties : isFeature ? geojson.properties : {};\n    featureBBox = isFeatureCollection ? geojson.features[i].bbox : isFeature ? geojson.bbox : undefined;\n    featureId = isFeatureCollection ? geojson.features[i].id : isFeature ? geojson.id : undefined;\n    isGeometryCollection = geometryMaybeCollection ? geometryMaybeCollection.type === \"GeometryCollection\" : false;\n    stopG = isGeometryCollection ? geometryMaybeCollection.geometries.length : 1;\n    for (g = 0; g < stopG; g++) {\n      geometry = isGeometryCollection ? geometryMaybeCollection.geometries[g] : geometryMaybeCollection;\n\n      // Handle null Geometry\n      if (geometry === null) {\n        if (callback(null, featureIndex, featureProperties, featureBBox, featureId) === false) return false;\n        continue;\n      }\n      switch (geometry.type) {\n        case \"Point\":\n        case \"LineString\":\n        case \"MultiPoint\":\n        case \"Polygon\":\n        case \"MultiLineString\":\n        case \"MultiPolygon\":\n          {\n            if (callback(geometry, featureIndex, featureProperties, featureBBox, featureId) === false) return false;\n            break;\n          }\n        case \"GeometryCollection\":\n          {\n            for (j = 0; j < geometry.geometries.length; j++) {\n              if (callback(geometry.geometries[j], featureIndex, featureProperties, featureBBox, featureId) === false) return false;\n            }\n            break;\n          }\n        default:\n          throw new Error(\"Unknown Geometry Type\");\n      }\n    }\n    // Only increase `featureIndex` per each feature\n    featureIndex++;\n  }\n}\n\n/**\n * Callback for geomReduce\n *\n * The first time the callback function is called, the values provided as arguments depend\n * on whether the reduce method has an initialValue argument.\n *\n * If an initialValue is provided to the reduce method:\n *  - The previousValue argument is initialValue.\n *  - The currentValue argument is the value of the first element present in the array.\n *\n * If an initialValue is not provided:\n *  - The previousValue argument is the value of the first element present in the array.\n *  - The currentValue argument is the value of the second element present in the array.\n *\n * @callback geomReduceCallback\n * @param {*} previousValue The accumulated value previously returned in the last invocation\n * of the callback, or initialValue, if supplied.\n * @param {Geometry} currentGeometry The current Geometry being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n * @param {Object} featureProperties The current Feature Properties being processed.\n * @param {Array<number>} featureBBox The current Feature BBox being processed.\n * @param {number|string} featureId The current Feature Id being processed.\n */\n\n/**\n * Reduce geometry in any GeoJSON object, similar to Array.reduce().\n *\n * @name geomReduce\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object\n * @param {Function} callback a method that takes (previousValue, currentGeometry, featureIndex, featureProperties, featureBBox, featureId)\n * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.\n * @returns {*} The value that results from the reduction.\n * @example\n * var features = turf.featureCollection([\n *     turf.point([26, 37], {foo: 'bar'}),\n *     turf.point([36, 53], {hello: 'world'})\n * ]);\n *\n * turf.geomReduce(features, function (previousValue, currentGeometry, featureIndex, featureProperties, featureBBox, featureId) {\n *   //=previousValue\n *   //=currentGeometry\n *   //=featureIndex\n *   //=featureProperties\n *   //=featureBBox\n *   //=featureId\n *   return currentGeometry\n * });\n */\nfunction geomReduce(geojson, callback, initialValue) {\n  var previousValue = initialValue;\n  geomEach(geojson, function (currentGeometry, featureIndex, featureProperties, featureBBox, featureId) {\n    if (featureIndex === 0 && initialValue === undefined) previousValue = currentGeometry;else previousValue = callback(previousValue, currentGeometry, featureIndex, featureProperties, featureBBox, featureId);\n  });\n  return previousValue;\n}\n\n/**\n * Callback for flattenEach\n *\n * @callback flattenEachCallback\n * @param {Feature} currentFeature The current flattened feature being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed.\n */\n\n/**\n * Iterate over flattened features in any GeoJSON object, similar to\n * Array.forEach.\n *\n * @name flattenEach\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object\n * @param {Function} callback a method that takes (currentFeature, featureIndex, multiFeatureIndex)\n * @example\n * var features = turf.featureCollection([\n *     turf.point([26, 37], {foo: 'bar'}),\n *     turf.multiPoint([[40, 30], [36, 53]], {hello: 'world'})\n * ]);\n *\n * turf.flattenEach(features, function (currentFeature, featureIndex, multiFeatureIndex) {\n *   //=currentFeature\n *   //=featureIndex\n *   //=multiFeatureIndex\n * });\n */\nfunction flattenEach(geojson, callback) {\n  geomEach(geojson, function (geometry, featureIndex, properties, bbox, id) {\n    // Callback for single geometry\n    var type = geometry === null ? null : geometry.type;\n    switch (type) {\n      case null:\n      case \"Point\":\n      case \"LineString\":\n      case \"Polygon\":\n        if (callback(helpers$1.feature(geometry, properties, {\n          bbox: bbox,\n          id: id\n        }), featureIndex, 0) === false) return false;\n        return;\n    }\n    var geomType;\n\n    // Callback for multi-geometry\n    switch (type) {\n      case \"MultiPoint\":\n        geomType = \"Point\";\n        break;\n      case \"MultiLineString\":\n        geomType = \"LineString\";\n        break;\n      case \"MultiPolygon\":\n        geomType = \"Polygon\";\n        break;\n    }\n    for (var multiFeatureIndex = 0; multiFeatureIndex < geometry.coordinates.length; multiFeatureIndex++) {\n      var coordinate = geometry.coordinates[multiFeatureIndex];\n      var geom = {\n        type: geomType,\n        coordinates: coordinate\n      };\n      if (callback(helpers$1.feature(geom, properties), featureIndex, multiFeatureIndex) === false) return false;\n    }\n  });\n}\n\n/**\n * Callback for flattenReduce\n *\n * The first time the callback function is called, the values provided as arguments depend\n * on whether the reduce method has an initialValue argument.\n *\n * If an initialValue is provided to the reduce method:\n *  - The previousValue argument is initialValue.\n *  - The currentValue argument is the value of the first element present in the array.\n *\n * If an initialValue is not provided:\n *  - The previousValue argument is the value of the first element present in the array.\n *  - The currentValue argument is the value of the second element present in the array.\n *\n * @callback flattenReduceCallback\n * @param {*} previousValue The accumulated value previously returned in the last invocation\n * of the callback, or initialValue, if supplied.\n * @param {Feature} currentFeature The current Feature being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed.\n */\n\n/**\n * Reduce flattened features in any GeoJSON object, similar to Array.reduce().\n *\n * @name flattenReduce\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object\n * @param {Function} callback a method that takes (previousValue, currentFeature, featureIndex, multiFeatureIndex)\n * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.\n * @returns {*} The value that results from the reduction.\n * @example\n * var features = turf.featureCollection([\n *     turf.point([26, 37], {foo: 'bar'}),\n *     turf.multiPoint([[40, 30], [36, 53]], {hello: 'world'})\n * ]);\n *\n * turf.flattenReduce(features, function (previousValue, currentFeature, featureIndex, multiFeatureIndex) {\n *   //=previousValue\n *   //=currentFeature\n *   //=featureIndex\n *   //=multiFeatureIndex\n *   return currentFeature\n * });\n */\nfunction flattenReduce(geojson, callback, initialValue) {\n  var previousValue = initialValue;\n  flattenEach(geojson, function (currentFeature, featureIndex, multiFeatureIndex) {\n    if (featureIndex === 0 && multiFeatureIndex === 0 && initialValue === undefined) previousValue = currentFeature;else previousValue = callback(previousValue, currentFeature, featureIndex, multiFeatureIndex);\n  });\n  return previousValue;\n}\n\n/**\n * Callback for segmentEach\n *\n * @callback segmentEachCallback\n * @param {Feature<LineString>} currentSegment The current Segment being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed.\n * @param {number} geometryIndex The current index of the Geometry being processed.\n * @param {number} segmentIndex The current index of the Segment being processed.\n * @returns {void}\n */\n\n/**\n * Iterate over 2-vertex line segment in any GeoJSON object, similar to Array.forEach()\n * (Multi)Point geometries do not contain segments therefore they are ignored during this operation.\n *\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON\n * @param {Function} callback a method that takes (currentSegment, featureIndex, multiFeatureIndex, geometryIndex, segmentIndex)\n * @returns {void}\n * @example\n * var polygon = turf.polygon([[[-50, 5], [-40, -10], [-50, -10], [-40, 5], [-50, 5]]]);\n *\n * // Iterate over GeoJSON by 2-vertex segments\n * turf.segmentEach(polygon, function (currentSegment, featureIndex, multiFeatureIndex, geometryIndex, segmentIndex) {\n *   //=currentSegment\n *   //=featureIndex\n *   //=multiFeatureIndex\n *   //=geometryIndex\n *   //=segmentIndex\n * });\n *\n * // Calculate the total number of segments\n * var total = 0;\n * turf.segmentEach(polygon, function () {\n *     total++;\n * });\n */\nfunction segmentEach(geojson, callback) {\n  flattenEach(geojson, function (feature, featureIndex, multiFeatureIndex) {\n    var segmentIndex = 0;\n\n    // Exclude null Geometries\n    if (!feature.geometry) return;\n    // (Multi)Point geometries do not contain segments therefore they are ignored during this operation.\n    var type = feature.geometry.type;\n    if (type === \"Point\" || type === \"MultiPoint\") return;\n\n    // Generate 2-vertex line segments\n    var previousCoords;\n    var previousFeatureIndex = 0;\n    var previousMultiIndex = 0;\n    var prevGeomIndex = 0;\n    if (coordEach(feature, function (currentCoord, coordIndex, featureIndexCoord, multiPartIndexCoord, geometryIndex) {\n      // Simulating a meta.coordReduce() since `reduce` operations cannot be stopped by returning `false`\n      if (previousCoords === undefined || featureIndex > previousFeatureIndex || multiPartIndexCoord > previousMultiIndex || geometryIndex > prevGeomIndex) {\n        previousCoords = currentCoord;\n        previousFeatureIndex = featureIndex;\n        previousMultiIndex = multiPartIndexCoord;\n        prevGeomIndex = geometryIndex;\n        segmentIndex = 0;\n        return;\n      }\n      var currentSegment = helpers$1.lineString([previousCoords, currentCoord], feature.properties);\n      if (callback(currentSegment, featureIndex, multiFeatureIndex, geometryIndex, segmentIndex) === false) return false;\n      segmentIndex++;\n      previousCoords = currentCoord;\n    }) === false) return false;\n  });\n}\n\n/**\n * Callback for segmentReduce\n *\n * The first time the callback function is called, the values provided as arguments depend\n * on whether the reduce method has an initialValue argument.\n *\n * If an initialValue is provided to the reduce method:\n *  - The previousValue argument is initialValue.\n *  - The currentValue argument is the value of the first element present in the array.\n *\n * If an initialValue is not provided:\n *  - The previousValue argument is the value of the first element present in the array.\n *  - The currentValue argument is the value of the second element present in the array.\n *\n * @callback segmentReduceCallback\n * @param {*} previousValue The accumulated value previously returned in the last invocation\n * of the callback, or initialValue, if supplied.\n * @param {Feature<LineString>} currentSegment The current Segment being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed.\n * @param {number} geometryIndex The current index of the Geometry being processed.\n * @param {number} segmentIndex The current index of the Segment being processed.\n */\n\n/**\n * Reduce 2-vertex line segment in any GeoJSON object, similar to Array.reduce()\n * (Multi)Point geometries do not contain segments therefore they are ignored during this operation.\n *\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON\n * @param {Function} callback a method that takes (previousValue, currentSegment, currentIndex)\n * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.\n * @returns {void}\n * @example\n * var polygon = turf.polygon([[[-50, 5], [-40, -10], [-50, -10], [-40, 5], [-50, 5]]]);\n *\n * // Iterate over GeoJSON by 2-vertex segments\n * turf.segmentReduce(polygon, function (previousSegment, currentSegment, featureIndex, multiFeatureIndex, geometryIndex, segmentIndex) {\n *   //= previousSegment\n *   //= currentSegment\n *   //= featureIndex\n *   //= multiFeatureIndex\n *   //= geometryIndex\n *   //= segmentIndex\n *   return currentSegment\n * });\n *\n * // Calculate the total number of segments\n * var initialValue = 0\n * var total = turf.segmentReduce(polygon, function (previousValue) {\n *     previousValue++;\n *     return previousValue;\n * }, initialValue);\n */\nfunction segmentReduce(geojson, callback, initialValue) {\n  var previousValue = initialValue;\n  var started = false;\n  segmentEach(geojson, function (currentSegment, featureIndex, multiFeatureIndex, geometryIndex, segmentIndex) {\n    if (started === false && initialValue === undefined) previousValue = currentSegment;else previousValue = callback(previousValue, currentSegment, featureIndex, multiFeatureIndex, geometryIndex, segmentIndex);\n    started = true;\n  });\n  return previousValue;\n}\n\n/**\n * Callback for lineEach\n *\n * @callback lineEachCallback\n * @param {Feature<LineString>} currentLine The current LineString|LinearRing being processed\n * @param {number} featureIndex The current index of the Feature being processed\n * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed\n * @param {number} geometryIndex The current index of the Geometry being processed\n */\n\n/**\n * Iterate over line or ring coordinates in LineString, Polygon, MultiLineString, MultiPolygon Features or Geometries,\n * similar to Array.forEach.\n *\n * @name lineEach\n * @param {Geometry|Feature<LineString|Polygon|MultiLineString|MultiPolygon>} geojson object\n * @param {Function} callback a method that takes (currentLine, featureIndex, multiFeatureIndex, geometryIndex)\n * @example\n * var multiLine = turf.multiLineString([\n *   [[26, 37], [35, 45]],\n *   [[36, 53], [38, 50], [41, 55]]\n * ]);\n *\n * turf.lineEach(multiLine, function (currentLine, featureIndex, multiFeatureIndex, geometryIndex) {\n *   //=currentLine\n *   //=featureIndex\n *   //=multiFeatureIndex\n *   //=geometryIndex\n * });\n */\nfunction lineEach(geojson, callback) {\n  // validation\n  if (!geojson) throw new Error(\"geojson is required\");\n  flattenEach(geojson, function (feature, featureIndex, multiFeatureIndex) {\n    if (feature.geometry === null) return;\n    var type = feature.geometry.type;\n    var coords = feature.geometry.coordinates;\n    switch (type) {\n      case \"LineString\":\n        if (callback(feature, featureIndex, multiFeatureIndex, 0, 0) === false) return false;\n        break;\n      case \"Polygon\":\n        for (var geometryIndex = 0; geometryIndex < coords.length; geometryIndex++) {\n          if (callback(helpers$1.lineString(coords[geometryIndex], feature.properties), featureIndex, multiFeatureIndex, geometryIndex) === false) return false;\n        }\n        break;\n    }\n  });\n}\n\n/**\n * Callback for lineReduce\n *\n * The first time the callback function is called, the values provided as arguments depend\n * on whether the reduce method has an initialValue argument.\n *\n * If an initialValue is provided to the reduce method:\n *  - The previousValue argument is initialValue.\n *  - The currentValue argument is the value of the first element present in the array.\n *\n * If an initialValue is not provided:\n *  - The previousValue argument is the value of the first element present in the array.\n *  - The currentValue argument is the value of the second element present in the array.\n *\n * @callback lineReduceCallback\n * @param {*} previousValue The accumulated value previously returned in the last invocation\n * of the callback, or initialValue, if supplied.\n * @param {Feature<LineString>} currentLine The current LineString|LinearRing being processed.\n * @param {number} featureIndex The current index of the Feature being processed\n * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed\n * @param {number} geometryIndex The current index of the Geometry being processed\n */\n\n/**\n * Reduce features in any GeoJSON object, similar to Array.reduce().\n *\n * @name lineReduce\n * @param {Geometry|Feature<LineString|Polygon|MultiLineString|MultiPolygon>} geojson object\n * @param {Function} callback a method that takes (previousValue, currentLine, featureIndex, multiFeatureIndex, geometryIndex)\n * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.\n * @returns {*} The value that results from the reduction.\n * @example\n * var multiPoly = turf.multiPolygon([\n *   turf.polygon([[[12,48],[2,41],[24,38],[12,48]], [[9,44],[13,41],[13,45],[9,44]]]),\n *   turf.polygon([[[5, 5], [0, 0], [2, 2], [4, 4], [5, 5]]])\n * ]);\n *\n * turf.lineReduce(multiPoly, function (previousValue, currentLine, featureIndex, multiFeatureIndex, geometryIndex) {\n *   //=previousValue\n *   //=currentLine\n *   //=featureIndex\n *   //=multiFeatureIndex\n *   //=geometryIndex\n *   return currentLine\n * });\n */\nfunction lineReduce(geojson, callback, initialValue) {\n  var previousValue = initialValue;\n  lineEach(geojson, function (currentLine, featureIndex, multiFeatureIndex, geometryIndex) {\n    if (featureIndex === 0 && initialValue === undefined) previousValue = currentLine;else previousValue = callback(previousValue, currentLine, featureIndex, multiFeatureIndex, geometryIndex);\n  });\n  return previousValue;\n}\n\n/**\n * Finds a particular 2-vertex LineString Segment from a GeoJSON using `@turf/meta` indexes.\n *\n * Negative indexes are permitted.\n * Point & MultiPoint will always return null.\n *\n * @param {FeatureCollection|Feature|Geometry} geojson Any GeoJSON Feature or Geometry\n * @param {Object} [options={}] Optional parameters\n * @param {number} [options.featureIndex=0] Feature Index\n * @param {number} [options.multiFeatureIndex=0] Multi-Feature Index\n * @param {number} [options.geometryIndex=0] Geometry Index\n * @param {number} [options.segmentIndex=0] Segment Index\n * @param {Object} [options.properties={}] Translate Properties to output LineString\n * @param {BBox} [options.bbox={}] Translate BBox to output LineString\n * @param {number|string} [options.id={}] Translate Id to output LineString\n * @returns {Feature<LineString>} 2-vertex GeoJSON Feature LineString\n * @example\n * var multiLine = turf.multiLineString([\n *     [[10, 10], [50, 30], [30, 40]],\n *     [[-10, -10], [-50, -30], [-30, -40]]\n * ]);\n *\n * // First Segment (defaults are 0)\n * turf.findSegment(multiLine);\n * // => Feature<LineString<[[10, 10], [50, 30]]>>\n *\n * // First Segment of 2nd Multi Feature\n * turf.findSegment(multiLine, {multiFeatureIndex: 1});\n * // => Feature<LineString<[[-10, -10], [-50, -30]]>>\n *\n * // Last Segment of Last Multi Feature\n * turf.findSegment(multiLine, {multiFeatureIndex: -1, segmentIndex: -1});\n * // => Feature<LineString<[[-50, -30], [-30, -40]]>>\n */\nfunction findSegment(geojson, options) {\n  // Optional Parameters\n  options = options || {};\n  if (!helpers$1.isObject(options)) throw new Error(\"options is invalid\");\n  var featureIndex = options.featureIndex || 0;\n  var multiFeatureIndex = options.multiFeatureIndex || 0;\n  var geometryIndex = options.geometryIndex || 0;\n  var segmentIndex = options.segmentIndex || 0;\n\n  // Find FeatureIndex\n  var properties = options.properties;\n  var geometry;\n  switch (geojson.type) {\n    case \"FeatureCollection\":\n      if (featureIndex < 0) featureIndex = geojson.features.length + featureIndex;\n      properties = properties || geojson.features[featureIndex].properties;\n      geometry = geojson.features[featureIndex].geometry;\n      break;\n    case \"Feature\":\n      properties = properties || geojson.properties;\n      geometry = geojson.geometry;\n      break;\n    case \"Point\":\n    case \"MultiPoint\":\n      return null;\n    case \"LineString\":\n    case \"Polygon\":\n    case \"MultiLineString\":\n    case \"MultiPolygon\":\n      geometry = geojson;\n      break;\n    default:\n      throw new Error(\"geojson is invalid\");\n  }\n\n  // Find SegmentIndex\n  if (geometry === null) return null;\n  var coords = geometry.coordinates;\n  switch (geometry.type) {\n    case \"Point\":\n    case \"MultiPoint\":\n      return null;\n    case \"LineString\":\n      if (segmentIndex < 0) segmentIndex = coords.length + segmentIndex - 1;\n      return helpers$1.lineString([coords[segmentIndex], coords[segmentIndex + 1]], properties, options);\n    case \"Polygon\":\n      if (geometryIndex < 0) geometryIndex = coords.length + geometryIndex;\n      if (segmentIndex < 0) segmentIndex = coords[geometryIndex].length + segmentIndex - 1;\n      return helpers$1.lineString([coords[geometryIndex][segmentIndex], coords[geometryIndex][segmentIndex + 1]], properties, options);\n    case \"MultiLineString\":\n      if (multiFeatureIndex < 0) multiFeatureIndex = coords.length + multiFeatureIndex;\n      if (segmentIndex < 0) segmentIndex = coords[multiFeatureIndex].length + segmentIndex - 1;\n      return helpers$1.lineString([coords[multiFeatureIndex][segmentIndex], coords[multiFeatureIndex][segmentIndex + 1]], properties, options);\n    case \"MultiPolygon\":\n      if (multiFeatureIndex < 0) multiFeatureIndex = coords.length + multiFeatureIndex;\n      if (geometryIndex < 0) geometryIndex = coords[multiFeatureIndex].length + geometryIndex;\n      if (segmentIndex < 0) segmentIndex = coords[multiFeatureIndex][geometryIndex].length - segmentIndex - 1;\n      return helpers$1.lineString([coords[multiFeatureIndex][geometryIndex][segmentIndex], coords[multiFeatureIndex][geometryIndex][segmentIndex + 1]], properties, options);\n  }\n  throw new Error(\"geojson is invalid\");\n}\n\n/**\n * Finds a particular Point from a GeoJSON using `@turf/meta` indexes.\n *\n * Negative indexes are permitted.\n *\n * @param {FeatureCollection|Feature|Geometry} geojson Any GeoJSON Feature or Geometry\n * @param {Object} [options={}] Optional parameters\n * @param {number} [options.featureIndex=0] Feature Index\n * @param {number} [options.multiFeatureIndex=0] Multi-Feature Index\n * @param {number} [options.geometryIndex=0] Geometry Index\n * @param {number} [options.coordIndex=0] Coord Index\n * @param {Object} [options.properties={}] Translate Properties to output Point\n * @param {BBox} [options.bbox={}] Translate BBox to output Point\n * @param {number|string} [options.id={}] Translate Id to output Point\n * @returns {Feature<Point>} 2-vertex GeoJSON Feature Point\n * @example\n * var multiLine = turf.multiLineString([\n *     [[10, 10], [50, 30], [30, 40]],\n *     [[-10, -10], [-50, -30], [-30, -40]]\n * ]);\n *\n * // First Segment (defaults are 0)\n * turf.findPoint(multiLine);\n * // => Feature<Point<[10, 10]>>\n *\n * // First Segment of the 2nd Multi-Feature\n * turf.findPoint(multiLine, {multiFeatureIndex: 1});\n * // => Feature<Point<[-10, -10]>>\n *\n * // Last Segment of last Multi-Feature\n * turf.findPoint(multiLine, {multiFeatureIndex: -1, coordIndex: -1});\n * // => Feature<Point<[-30, -40]>>\n */\nfunction findPoint(geojson, options) {\n  // Optional Parameters\n  options = options || {};\n  if (!helpers$1.isObject(options)) throw new Error(\"options is invalid\");\n  var featureIndex = options.featureIndex || 0;\n  var multiFeatureIndex = options.multiFeatureIndex || 0;\n  var geometryIndex = options.geometryIndex || 0;\n  var coordIndex = options.coordIndex || 0;\n\n  // Find FeatureIndex\n  var properties = options.properties;\n  var geometry;\n  switch (geojson.type) {\n    case \"FeatureCollection\":\n      if (featureIndex < 0) featureIndex = geojson.features.length + featureIndex;\n      properties = properties || geojson.features[featureIndex].properties;\n      geometry = geojson.features[featureIndex].geometry;\n      break;\n    case \"Feature\":\n      properties = properties || geojson.properties;\n      geometry = geojson.geometry;\n      break;\n    case \"Point\":\n    case \"MultiPoint\":\n      return null;\n    case \"LineString\":\n    case \"Polygon\":\n    case \"MultiLineString\":\n    case \"MultiPolygon\":\n      geometry = geojson;\n      break;\n    default:\n      throw new Error(\"geojson is invalid\");\n  }\n\n  // Find Coord Index\n  if (geometry === null) return null;\n  var coords = geometry.coordinates;\n  switch (geometry.type) {\n    case \"Point\":\n      return helpers$1.point(coords, properties, options);\n    case \"MultiPoint\":\n      if (multiFeatureIndex < 0) multiFeatureIndex = coords.length + multiFeatureIndex;\n      return helpers$1.point(coords[multiFeatureIndex], properties, options);\n    case \"LineString\":\n      if (coordIndex < 0) coordIndex = coords.length + coordIndex;\n      return helpers$1.point(coords[coordIndex], properties, options);\n    case \"Polygon\":\n      if (geometryIndex < 0) geometryIndex = coords.length + geometryIndex;\n      if (coordIndex < 0) coordIndex = coords[geometryIndex].length + coordIndex;\n      return helpers$1.point(coords[geometryIndex][coordIndex], properties, options);\n    case \"MultiLineString\":\n      if (multiFeatureIndex < 0) multiFeatureIndex = coords.length + multiFeatureIndex;\n      if (coordIndex < 0) coordIndex = coords[multiFeatureIndex].length + coordIndex;\n      return helpers$1.point(coords[multiFeatureIndex][coordIndex], properties, options);\n    case \"MultiPolygon\":\n      if (multiFeatureIndex < 0) multiFeatureIndex = coords.length + multiFeatureIndex;\n      if (geometryIndex < 0) geometryIndex = coords[multiFeatureIndex].length + geometryIndex;\n      if (coordIndex < 0) coordIndex = coords[multiFeatureIndex][geometryIndex].length - coordIndex;\n      return helpers$1.point(coords[multiFeatureIndex][geometryIndex][coordIndex], properties, options);\n  }\n  throw new Error(\"geojson is invalid\");\n}\njs$1.coordAll = coordAll;\njs$1.coordEach = coordEach;\njs$1.coordReduce = coordReduce;\njs$1.featureEach = featureEach$1;\njs$1.featureReduce = featureReduce;\njs$1.findPoint = findPoint;\njs$1.findSegment = findSegment;\njs$1.flattenEach = flattenEach;\njs$1.flattenReduce = flattenReduce;\njs$1.geomEach = geomEach;\njs$1.geomReduce = geomReduce;\njs$1.lineEach = lineEach;\njs$1.lineReduce = lineReduce;\njs$1.propEach = propEach;\njs$1.propReduce = propReduce;\njs$1.segmentEach = segmentEach;\njs$1.segmentReduce = segmentReduce;\nvar js = {};\nObject.defineProperty(js, \"__esModule\", {\n  value: true\n});\nvar meta_1 = js$1;\n/**\n * Takes a set of features, calculates the bbox of all input features, and returns a bounding box.\n *\n * @name bbox\n * @param {GeoJSON} geojson any GeoJSON object\n * @returns {BBox} bbox extent in [minX, minY, maxX, maxY] order\n * @example\n * var line = turf.lineString([[-74, 40], [-78, 42], [-82, 35]]);\n * var bbox = turf.bbox(line);\n * var bboxPolygon = turf.bboxPolygon(bbox);\n *\n * //addToMap\n * var addToMap = [line, bboxPolygon]\n */\nfunction bbox(geojson) {\n  var result = [Infinity, Infinity, -Infinity, -Infinity];\n  meta_1.coordEach(geojson, function (coord) {\n    if (result[0] > coord[0]) {\n      result[0] = coord[0];\n    }\n    if (result[1] > coord[1]) {\n      result[1] = coord[1];\n    }\n    if (result[2] < coord[0]) {\n      result[2] = coord[0];\n    }\n    if (result[3] < coord[1]) {\n      result[3] = coord[1];\n    }\n  });\n  return result;\n}\nbbox[\"default\"] = bbox;\njs.default = bbox;\nvar rbush = RBush;\nvar helpers = js$2;\nvar meta = js$1;\nvar turfBBox = js.default;\nvar featureEach = meta.featureEach;\nmeta.coordEach;\nhelpers.polygon;\nvar featureCollection = helpers.featureCollection;\n\n/**\n * GeoJSON implementation of [RBush](https://github.com/mourner/rbush#rbush) spatial index.\n *\n * @name rbush\n * @param {number} [maxEntries=9] defines the maximum number of entries in a tree node. 9 (used by default) is a\n * reasonable choice for most applications. Higher value means faster insertion and slower search, and vice versa.\n * @returns {RBush} GeoJSON RBush\n * @example\n * var geojsonRbush = require('geojson-rbush').default;\n * var tree = geojsonRbush();\n */\nfunction geojsonRbush(maxEntries) {\n  var tree = new rbush(maxEntries);\n  /**\n   * [insert](https://github.com/mourner/rbush#data-format)\n   *\n   * @param {Feature} feature insert single GeoJSON Feature\n   * @returns {RBush} GeoJSON RBush\n   * @example\n   * var poly = turf.polygon([[[-78, 41], [-67, 41], [-67, 48], [-78, 48], [-78, 41]]]);\n   * tree.insert(poly)\n   */\n  tree.insert = function (feature) {\n    if (feature.type !== 'Feature') throw new Error('invalid feature');\n    feature.bbox = feature.bbox ? feature.bbox : turfBBox(feature);\n    return rbush.prototype.insert.call(this, feature);\n  };\n\n  /**\n   * [load](https://github.com/mourner/rbush#bulk-inserting-data)\n   *\n   * @param {FeatureCollection|Array<Feature>} features load entire GeoJSON FeatureCollection\n   * @returns {RBush} GeoJSON RBush\n   * @example\n   * var polys = turf.polygons([\n   *     [[[-78, 41], [-67, 41], [-67, 48], [-78, 48], [-78, 41]]],\n   *     [[[-93, 32], [-83, 32], [-83, 39], [-93, 39], [-93, 32]]]\n   * ]);\n   * tree.load(polys);\n   */\n  tree.load = function (features) {\n    var load = [];\n    // Load an Array of Features\n    if (Array.isArray(features)) {\n      features.forEach(function (feature) {\n        if (feature.type !== 'Feature') throw new Error('invalid features');\n        feature.bbox = feature.bbox ? feature.bbox : turfBBox(feature);\n        load.push(feature);\n      });\n    } else {\n      // Load a FeatureCollection\n      featureEach(features, function (feature) {\n        if (feature.type !== 'Feature') throw new Error('invalid features');\n        feature.bbox = feature.bbox ? feature.bbox : turfBBox(feature);\n        load.push(feature);\n      });\n    }\n    return rbush.prototype.load.call(this, load);\n  };\n\n  /**\n   * [remove](https://github.com/mourner/rbush#removing-data)\n   *\n   * @param {Feature} feature remove single GeoJSON Feature\n   * @param {Function} equals Pass a custom equals function to compare by value for removal.\n   * @returns {RBush} GeoJSON RBush\n   * @example\n   * var poly = turf.polygon([[[-78, 41], [-67, 41], [-67, 48], [-78, 48], [-78, 41]]]);\n   *\n   * tree.remove(poly);\n   */\n  tree.remove = function (feature, equals) {\n    if (feature.type !== 'Feature') throw new Error('invalid feature');\n    feature.bbox = feature.bbox ? feature.bbox : turfBBox(feature);\n    return rbush.prototype.remove.call(this, feature, equals);\n  };\n\n  /**\n   * [clear](https://github.com/mourner/rbush#removing-data)\n   *\n   * @returns {RBush} GeoJSON Rbush\n   * @example\n   * tree.clear()\n   */\n  tree.clear = function () {\n    return rbush.prototype.clear.call(this);\n  };\n\n  /**\n   * [search](https://github.com/mourner/rbush#search)\n   *\n   * @param {BBox|FeatureCollection|Feature} geojson search with GeoJSON\n   * @returns {FeatureCollection} all features that intersects with the given GeoJSON.\n   * @example\n   * var poly = turf.polygon([[[-78, 41], [-67, 41], [-67, 48], [-78, 48], [-78, 41]]]);\n   *\n   * tree.search(poly);\n   */\n  tree.search = function (geojson) {\n    var features = rbush.prototype.search.call(this, this.toBBox(geojson));\n    return featureCollection(features);\n  };\n\n  /**\n   * [collides](https://github.com/mourner/rbush#collisions)\n   *\n   * @param {BBox|FeatureCollection|Feature} geojson collides with GeoJSON\n   * @returns {boolean} true if there are any items intersecting the given GeoJSON, otherwise false.\n   * @example\n   * var poly = turf.polygon([[[-78, 41], [-67, 41], [-67, 48], [-78, 48], [-78, 41]]]);\n   *\n   * tree.collides(poly);\n   */\n  tree.collides = function (geojson) {\n    return rbush.prototype.collides.call(this, this.toBBox(geojson));\n  };\n\n  /**\n   * [all](https://github.com/mourner/rbush#search)\n   *\n   * @returns {FeatureCollection} all the features in RBush\n   * @example\n   * tree.all()\n   */\n  tree.all = function () {\n    var features = rbush.prototype.all.call(this);\n    return featureCollection(features);\n  };\n\n  /**\n   * [toJSON](https://github.com/mourner/rbush#export-and-import)\n   *\n   * @returns {any} export data as JSON object\n   * @example\n   * var exported = tree.toJSON()\n   */\n  tree.toJSON = function () {\n    return rbush.prototype.toJSON.call(this);\n  };\n\n  /**\n   * [fromJSON](https://github.com/mourner/rbush#export-and-import)\n   *\n   * @param {any} json import previously exported data\n   * @returns {RBush} GeoJSON RBush\n   * @example\n   * var exported = {\n   *   \"children\": [\n   *     {\n   *       \"type\": \"Feature\",\n   *       \"geometry\": {\n   *         \"type\": \"Point\",\n   *         \"coordinates\": [110, 50]\n   *       },\n   *       \"properties\": {},\n   *       \"bbox\": [110, 50, 110, 50]\n   *     }\n   *   ],\n   *   \"height\": 1,\n   *   \"leaf\": true,\n   *   \"minX\": 110,\n   *   \"minY\": 50,\n   *   \"maxX\": 110,\n   *   \"maxY\": 50\n   * }\n   * tree.fromJSON(exported)\n   */\n  tree.fromJSON = function (json) {\n    return rbush.prototype.fromJSON.call(this, json);\n  };\n\n  /**\n   * Converts GeoJSON to {minX, minY, maxX, maxY} schema\n   *\n   * @private\n   * @param {BBox|FeatureCollection|Feature} geojson feature(s) to retrieve BBox from\n   * @returns {Object} converted to {minX, minY, maxX, maxY}\n   */\n  tree.toBBox = function (geojson) {\n    var bbox;\n    if (geojson.bbox) bbox = geojson.bbox;else if (Array.isArray(geojson) && geojson.length === 4) bbox = geojson;else if (Array.isArray(geojson) && geojson.length === 6) bbox = [geojson[0], geojson[1], geojson[3], geojson[4]];else if (geojson.type === 'Feature') bbox = turfBBox(geojson);else if (geojson.type === 'FeatureCollection') bbox = turfBBox(geojson);else throw new Error('invalid geojson');\n    return {\n      minX: bbox[0],\n      minY: bbox[1],\n      maxX: bbox[2],\n      maxY: bbox[3]\n    };\n  };\n  return tree;\n}\ngeojsonRbush$1.exports = geojsonRbush;\ngeojsonRbush$1.exports.default = geojsonRbush;\n\n/**\n * Takes any LineString or Polygon GeoJSON and returns the intersecting point(s).\n *\n * @name lineIntersect\n * @param {GeoJSON} line1 any LineString or Polygon\n * @param {GeoJSON} line2 any LineString or Polygon\n * @returns {FeatureCollection<Point>} point(s) that intersect both\n * @example\n * var line1 = turf.lineString([[126, -11], [129, -21]]);\n * var line2 = turf.lineString([[123, -18], [131, -14]]);\n * var intersects = turf.lineIntersect(line1, line2);\n *\n * //addToMap\n * var addToMap = [line1, line2, intersects]\n */\nfunction lineIntersect(line1, line2) {\n  var unique = {};\n  var results = [];\n  // First, normalize geometries to features\n  // Then, handle simple 2-vertex segments\n  if (line1.type === \"LineString\") {\n    line1 = feature(line1);\n  }\n  if (line2.type === \"LineString\") {\n    line2 = feature(line2);\n  }\n  if (line1.type === \"Feature\" && line2.type === \"Feature\" && line1.geometry !== null && line2.geometry !== null && line1.geometry.type === \"LineString\" && line2.geometry.type === \"LineString\" && line1.geometry.coordinates.length === 2 && line2.geometry.coordinates.length === 2) {\n    var intersect = intersects(line1, line2);\n    if (intersect) {\n      results.push(intersect);\n    }\n    return featureCollection$1(results);\n  }\n  // Handles complex GeoJSON Geometries\n  var tree = geojsonRbush$1.exports();\n  tree.load(lineSegment(line2));\n  featureEach$2(lineSegment(line1), function (segment) {\n    featureEach$2(tree.search(segment), function (match) {\n      var intersect = intersects(segment, match);\n      if (intersect) {\n        // prevent duplicate points https://github.com/Turfjs/turf/issues/688\n        var key = getCoords(intersect).join(\",\");\n        if (!unique[key]) {\n          unique[key] = true;\n          results.push(intersect);\n        }\n      }\n    });\n  });\n  return featureCollection$1(results);\n}\n/**\n * Find a point that intersects LineStrings with two coordinates each\n *\n * @private\n * @param {Feature<LineString>} line1 GeoJSON LineString (Must only contain 2 coordinates)\n * @param {Feature<LineString>} line2 GeoJSON LineString (Must only contain 2 coordinates)\n * @returns {Feature<Point>} intersecting GeoJSON Point\n */\nfunction intersects(line1, line2) {\n  var coords1 = getCoords(line1);\n  var coords2 = getCoords(line2);\n  if (coords1.length !== 2) {\n    throw new Error(\"<intersects> line1 must only contain 2 coordinates\");\n  }\n  if (coords2.length !== 2) {\n    throw new Error(\"<intersects> line2 must only contain 2 coordinates\");\n  }\n  var x1 = coords1[0][0];\n  var y1 = coords1[0][1];\n  var x2 = coords1[1][0];\n  var y2 = coords1[1][1];\n  var x3 = coords2[0][0];\n  var y3 = coords2[0][1];\n  var x4 = coords2[1][0];\n  var y4 = coords2[1][1];\n  var denom = (y4 - y3) * (x2 - x1) - (x4 - x3) * (y2 - y1);\n  var numeA = (x4 - x3) * (y1 - y3) - (y4 - y3) * (x1 - x3);\n  var numeB = (x2 - x1) * (y1 - y3) - (y2 - y1) * (x1 - x3);\n  if (denom === 0) {\n    if (numeA === 0 && numeB === 0) {\n      return null;\n    }\n    return null;\n  }\n  var uA = numeA / denom;\n  var uB = numeB / denom;\n  if (uA >= 0 && uA <= 1 && uB >= 0 && uB <= 1) {\n    var x = x1 + uA * (x2 - x1);\n    var y = y1 + uA * (y2 - y1);\n    return point([x, y]);\n  }\n  return null;\n}\n\n/**\n * Converts a {@link Polygon} to {@link LineString|(Multi)LineString} or {@link MultiPolygon} to a\n * {@link FeatureCollection} of {@link LineString|(Multi)LineString}.\n *\n * @name polygonToLine\n * @param {Feature<Polygon|MultiPolygon>} poly Feature to convert\n * @param {Object} [options={}] Optional parameters\n * @param {Object} [options.properties={}] translates GeoJSON properties to Feature\n * @returns {FeatureCollection|Feature<LineString|MultiLinestring>} converted (Multi)Polygon to (Multi)LineString\n * @example\n * var poly = turf.polygon([[[125, -30], [145, -30], [145, -20], [125, -20], [125, -30]]]);\n *\n * var line = turf.polygonToLine(poly);\n *\n * //addToMap\n * var addToMap = [line];\n */\nfunction polygonToLine(poly, options) {\n  if (options === void 0) {\n    options = {};\n  }\n  var geom = getGeom(poly);\n  if (!options.properties && poly.type === \"Feature\") {\n    options.properties = poly.properties;\n  }\n  switch (geom.type) {\n    case \"Polygon\":\n      return polygonToLine$1(geom, options);\n    case \"MultiPolygon\":\n      return multiPolygonToLine(geom, options);\n    default:\n      throw new Error(\"invalid poly\");\n  }\n}\n/**\n * @private\n */\nfunction polygonToLine$1(poly, options) {\n  if (options === void 0) {\n    options = {};\n  }\n  var geom = getGeom(poly);\n  var coords = geom.coordinates;\n  var properties = options.properties ? options.properties : poly.type === \"Feature\" ? poly.properties : {};\n  return coordsToLine(coords, properties);\n}\n/**\n * @private\n */\nfunction multiPolygonToLine(multiPoly, options) {\n  if (options === void 0) {\n    options = {};\n  }\n  var geom = getGeom(multiPoly);\n  var coords = geom.coordinates;\n  var properties = options.properties ? options.properties : multiPoly.type === \"Feature\" ? multiPoly.properties : {};\n  var lines = [];\n  coords.forEach(function (coord) {\n    lines.push(coordsToLine(coord, properties));\n  });\n  return featureCollection$1(lines);\n}\n/**\n * @private\n */\nfunction coordsToLine(coords, properties) {\n  if (coords.length > 1) {\n    return multiLineString(coords, properties);\n  }\n  return lineString(coords[0], properties);\n}\n\n/**\n * Boolean-disjoint returns (TRUE) if the intersection of the two geometries is an empty set.\n *\n * @name booleanDisjoint\n * @param {Geometry|Feature<any>} feature1 GeoJSON Feature or Geometry\n * @param {Geometry|Feature<any>} feature2 GeoJSON Feature or Geometry\n * @returns {boolean} true/false\n * @example\n * var point = turf.point([2, 2]);\n * var line = turf.lineString([[1, 1], [1, 2], [1, 3], [1, 4]]);\n *\n * turf.booleanDisjoint(line, point);\n * //=true\n */\nfunction booleanDisjoint(feature1, feature2) {\n  var bool = true;\n  flattenEach$1(feature1, function (flatten1) {\n    flattenEach$1(feature2, function (flatten2) {\n      if (bool === false) {\n        return false;\n      }\n      bool = disjoint(flatten1.geometry, flatten2.geometry);\n    });\n  });\n  return bool;\n}\n/**\n * Disjoint operation for simple Geometries (Point/LineString/Polygon)\n *\n * @private\n * @param {Geometry<any>} geom1 GeoJSON Geometry\n * @param {Geometry<any>} geom2 GeoJSON Geometry\n * @returns {boolean} true/false\n */\nfunction disjoint(geom1, geom2) {\n  switch (geom1.type) {\n    case \"Point\":\n      switch (geom2.type) {\n        case \"Point\":\n          return !compareCoords(geom1.coordinates, geom2.coordinates);\n        case \"LineString\":\n          return !isPointOnLine(geom2, geom1);\n        case \"Polygon\":\n          return !booleanPointInPolygon(geom1, geom2);\n      }\n      /* istanbul ignore next */\n      break;\n    case \"LineString\":\n      switch (geom2.type) {\n        case \"Point\":\n          return !isPointOnLine(geom1, geom2);\n        case \"LineString\":\n          return !isLineOnLine(geom1, geom2);\n        case \"Polygon\":\n          return !isLineInPoly(geom2, geom1);\n      }\n      /* istanbul ignore next */\n      break;\n    case \"Polygon\":\n      switch (geom2.type) {\n        case \"Point\":\n          return !booleanPointInPolygon(geom2, geom1);\n        case \"LineString\":\n          return !isLineInPoly(geom1, geom2);\n        case \"Polygon\":\n          return !isPolyInPoly(geom2, geom1);\n      }\n  }\n  return false;\n}\n// http://stackoverflow.com/a/11908158/1979085\nfunction isPointOnLine(lineString, pt) {\n  for (var i = 0; i < lineString.coordinates.length - 1; i++) {\n    if (isPointOnLineSegment(lineString.coordinates[i], lineString.coordinates[i + 1], pt.coordinates)) {\n      return true;\n    }\n  }\n  return false;\n}\nfunction isLineOnLine(lineString1, lineString2) {\n  var doLinesIntersect = lineIntersect(lineString1, lineString2);\n  if (doLinesIntersect.features.length > 0) {\n    return true;\n  }\n  return false;\n}\nfunction isLineInPoly(polygon, lineString) {\n  for (var _i = 0, _a = lineString.coordinates; _i < _a.length; _i++) {\n    var coord = _a[_i];\n    if (booleanPointInPolygon(coord, polygon)) {\n      return true;\n    }\n  }\n  var doLinesIntersect = lineIntersect(lineString, polygonToLine(polygon));\n  if (doLinesIntersect.features.length > 0) {\n    return true;\n  }\n  return false;\n}\n/**\n * Is Polygon (geom1) in Polygon (geom2)\n * Only takes into account outer rings\n * See http://stackoverflow.com/a/4833823/1979085\n *\n * @private\n * @param {Geometry|Feature<Polygon>} feature1 Polygon1\n * @param {Geometry|Feature<Polygon>} feature2 Polygon2\n * @returns {boolean} true/false\n */\nfunction isPolyInPoly(feature1, feature2) {\n  for (var _i = 0, _a = feature1.coordinates[0]; _i < _a.length; _i++) {\n    var coord1 = _a[_i];\n    if (booleanPointInPolygon(coord1, feature2)) {\n      return true;\n    }\n  }\n  for (var _b = 0, _c = feature2.coordinates[0]; _b < _c.length; _b++) {\n    var coord2 = _c[_b];\n    if (booleanPointInPolygon(coord2, feature1)) {\n      return true;\n    }\n  }\n  var doLinesIntersect = lineIntersect(polygonToLine(feature1), polygonToLine(feature2));\n  if (doLinesIntersect.features.length > 0) {\n    return true;\n  }\n  return false;\n}\nfunction isPointOnLineSegment(lineSegmentStart, lineSegmentEnd, pt) {\n  var dxc = pt[0] - lineSegmentStart[0];\n  var dyc = pt[1] - lineSegmentStart[1];\n  var dxl = lineSegmentEnd[0] - lineSegmentStart[0];\n  var dyl = lineSegmentEnd[1] - lineSegmentStart[1];\n  var cross = dxc * dyl - dyc * dxl;\n  if (cross !== 0) {\n    return false;\n  }\n  if (Math.abs(dxl) >= Math.abs(dyl)) {\n    if (dxl > 0) {\n      return lineSegmentStart[0] <= pt[0] && pt[0] <= lineSegmentEnd[0];\n    } else {\n      return lineSegmentEnd[0] <= pt[0] && pt[0] <= lineSegmentStart[0];\n    }\n  } else if (dyl > 0) {\n    return lineSegmentStart[1] <= pt[1] && pt[1] <= lineSegmentEnd[1];\n  } else {\n    return lineSegmentEnd[1] <= pt[1] && pt[1] <= lineSegmentStart[1];\n  }\n}\n/**\n * compareCoords\n *\n * @private\n * @param {Position} pair1 point [x,y]\n * @param {Position} pair2 point [x,y]\n * @returns {boolean} true/false if coord pairs match\n */\nfunction compareCoords(pair1, pair2) {\n  return pair1[0] === pair2[0] && pair1[1] === pair2[1];\n}\n\n/**\n * Boolean-intersects returns (TRUE) two geometries intersect.\n *\n * @name booleanIntersects\n * @param {Geometry|Feature<any>} feature1 GeoJSON Feature or Geometry\n * @param {Geometry|Feature<any>} feature2 GeoJSON Feature or Geometry\n * @returns {boolean} true/false\n * @example\n * var point = turf.point([2, 2]);\n * var line = turf.lineString([[1, 1], [1, 2], [1, 3], [1, 4]]);\n *\n * turf.booleanIntersects(line, point);\n * //=true\n */\nfunction booleanIntersects(feature1, feature2) {\n  var bool = false;\n  flattenEach$1(feature1, function (flatten1) {\n    flattenEach$1(feature2, function (flatten2) {\n      if (bool === true) {\n        return true;\n      }\n      bool = !booleanDisjoint(flatten1.geometry, flatten2.geometry);\n    });\n  });\n  return bool;\n}\nvar d2r = Math.PI / 180,\n  MAX_ZOOM = 28;\nfunction getBboxZoom(bbox) {\n  for (var z = 0; z < MAX_ZOOM; z++) {\n    var mask = 1 << 32 - (z + 1);\n    if ((bbox[0] & mask) !== (bbox[2] & mask) || (bbox[1] & mask) !== (bbox[3] & mask)) {\n      return z;\n    }\n  }\n  return MAX_ZOOM;\n}\n/**\r\n * Get the smallest tile to cover a bbox\r\n */\nfunction bboxToTile(bboxCoords, minZoom) {\n  var min = pointToTile(bboxCoords[0], bboxCoords[1], 32);\n  var max = pointToTile(bboxCoords[2], bboxCoords[3], 32);\n  var bbox = [min[0], min[1], max[0], max[1]];\n  var z = Math.min(getBboxZoom(bbox), typeof minZoom !== 'undefined' ? minZoom : MAX_ZOOM);\n  if (z === 0) return [0, 0, 0];\n  var x = bbox[0] >>> 32 - z;\n  var y = bbox[1] >>> 32 - z;\n  return [x, y, z];\n}\n/**\r\n * Get the tile for a point at a specified zoom level\r\n */\nfunction pointToTile(lon, lat, z) {\n  var tile = pointToTileFraction(lon, lat, z);\n  tile[0] = Math.floor(tile[0]);\n  tile[1] = Math.floor(tile[1]);\n  return tile;\n}\n/**\r\n * Get the precise fractional tile location for a point at a zoom level\r\n */\nfunction pointToTileFraction(lon, lat, z) {\n  var sin = Math.sin(lat * d2r),\n    z2 = Math.pow(2, z),\n    x = z2 * (lon / 360 + 0.5),\n    y = z2 * (0.5 - 0.25 * Math.log((1 + sin) / (1 - sin)) / Math.PI);\n  // Wrap Tile X\n  x = x % z2;\n  if (x < 0) x = x + z2;\n  return [x, y, z];\n}\nvar DEFAULT_ZOOM = 25;\nvar Space = /** @class */function () {\n  /**\r\n   * Create a new Space\r\n   *\r\n   * @param input A LngLatWithAltitude or string containing either a ZFXY or tilehash-encoded ZFXY.\r\n   * @param zoom Optional. Defaults to 25 when `input` is LngLatWithAltitude. Ignored when ZXFY or tilehash is provided.\r\n   */\n  function Space(input, zoom) {\n    if (typeof input === 'string') {\n      // parse string\n      var zfxy = parseZFXYString(input) || parseZFXYTilehash(input);\n      if (zfxy) {\n        this.zfxy = zfxy;\n        this._regenerateAttributesFromZFXY();\n      } else {\n        throw new Error(\"parse ZFXY failed with input: \".concat(input));\n      }\n      return;\n    } else if (isZFXYTile(input)) {\n      this.zfxy = input;\n      this._regenerateAttributesFromZFXY();\n      return;\n    } else {\n      this.zfxy = calculateZFXY(_assign(_assign({}, input), {\n        zoom: typeof zoom !== 'undefined' ? zoom : DEFAULT_ZOOM\n      }));\n    }\n    this._regenerateAttributesFromZFXY();\n  }\n  /* - PUBLIC API - */\n  Space.prototype.up = function (by) {\n    if (by === void 0) {\n      by = 1;\n    }\n    return this.move({\n      f: by\n    });\n  };\n  Space.prototype.down = function (by) {\n    if (by === void 0) {\n      by = 1;\n    }\n    return this.move({\n      f: -by\n    });\n  };\n  Space.prototype.north = function (by) {\n    if (by === void 0) {\n      by = 1;\n    }\n    return this.move({\n      y: by\n    });\n  };\n  Space.prototype.south = function (by) {\n    if (by === void 0) {\n      by = 1;\n    }\n    return this.move({\n      y: -by\n    });\n  };\n  Space.prototype.east = function (by) {\n    if (by === void 0) {\n      by = 1;\n    }\n    return this.move({\n      x: by\n    });\n  };\n  Space.prototype.west = function (by) {\n    if (by === void 0) {\n      by = 1;\n    }\n    return this.move({\n      x: -by\n    });\n  };\n  Space.prototype.move = function (by) {\n    var newSpace = new Space(this.zfxy);\n    newSpace.zfxy = zfxyWraparound({\n      z: newSpace.zfxy.z,\n      f: newSpace.zfxy.f + (by.f || 0),\n      x: newSpace.zfxy.x + (by.x || 0),\n      y: newSpace.zfxy.y + (by.y || 0)\n    });\n    newSpace._regenerateAttributesFromZFXY();\n    return newSpace;\n  };\n  Space.prototype.parent = function (atZoom) {\n    var steps = typeof atZoom === 'undefined' ? 1 : this.zfxy.z - atZoom;\n    return new Space(getParent(this.zfxy, steps));\n  };\n  Space.prototype.children = function () {\n    return getChildren(this.zfxy).map(function (tile) {\n      return new Space(tile);\n    });\n  };\n  /** Return an array of Space objects at the same zoom level that surround this Space\r\n   * object. This method does not return the Space object itself, so the array will\r\n   * contain 26 Space objects.\r\n   */\n  Space.prototype.surroundings = function () {\n    var _this = this;\n    return __spreadArray(__spreadArray(__spreadArray([], __read(getSurrounding(this.zfxy).filter(function (_a) {\n      var z = _a.z,\n        f = _a.f,\n        x = _a.x,\n        y = _a.y;\n      return \"/\".concat(z, \"/\").concat(f, \"/\").concat(x, \"/\").concat(y) !== _this.zfxyStr;\n    }).map(function (tile) {\n      return new Space(tile);\n    })), false), __read(getSurrounding(this.up().zfxy).map(function (tile) {\n      return new Space(tile);\n    })), false), __read(getSurrounding(this.down().zfxy).map(function (tile) {\n      return new Space(tile);\n    })), false);\n  };\n  /** Returns true if a point lies within this Space. If the position's altitude is not\r\n   * specified, it is ignored from the calculation.\r\n   */\n  Space.prototype.contains = function (position) {\n    var geom = this.toGeoJSON();\n    var point = {\n      type: 'Point',\n      coordinates: [position.lng, position.lat]\n    };\n    var floor = this.alt;\n    var ceil = getFloor(_assign(_assign({}, this.zfxy), {\n      f: this.zfxy.f + 1\n    }));\n    return booleanIntersects(geom, point) && (typeof position.alt !== 'undefined' === true ? position.alt >= floor && position.alt < ceil : true);\n  };\n  /** Calculates the polygon of this Space and returns a 2D GeoJSON Polygon. */\n  Space.prototype.toGeoJSON = function () {\n    var _a = __read(getBBox(this.zfxy), 2),\n      nw = _a[0],\n      se = _a[1];\n    return {\n      type: 'Polygon',\n      coordinates: [[[nw.lng, nw.lat], [nw.lng, se.lat], [se.lng, se.lat], [se.lng, nw.lat], [nw.lng, nw.lat]]]\n    };\n  };\n  /** Calculates the 3D polygon of this Space and returns the vertices of that polygon. */\n  Space.prototype.vertices3d = function () {\n    var _a = __read(getBBox(this.zfxy), 2),\n      nw = _a[0],\n      se = _a[1];\n    var floor = getFloor(this.zfxy);\n    var ceil = getFloor(_assign(_assign({}, this.zfxy), {\n      f: this.zfxy.f + 1\n    }));\n    return [[nw.lng, nw.lat, floor], [nw.lng, se.lat, floor], [se.lng, se.lat, floor], [se.lng, nw.lat, floor], [nw.lng, nw.lat, ceil], [nw.lng, se.lat, ceil], [se.lng, se.lat, ceil], [se.lng, nw.lat, ceil]];\n  };\n  Space.getSpaceById = function (id, zoom) {\n    return new Space(id, zoom);\n  };\n  Space.getSpaceByLocation = function (loc, zoom) {\n    return new Space(loc, zoom);\n  };\n  Space.getSpaceByZFXY = function (zfxyStr) {\n    return new Space(zfxyStr);\n  };\n  /** Calculates the smallest spatial ID to fully contain the polygon. Currently only supports 2D polygons. */\n  Space.boundingSpaceForGeometry = function (geom, minZoom) {\n    minZoom = minZoom || 25;\n    var bbox = bbox$2(geom);\n    var largestTile = bboxToTile(bbox, minZoom);\n    var _a = __read(largestTile, 3),\n      x = _a[0],\n      y = _a[1],\n      z = _a[2];\n    return new Space({\n      x: x,\n      y: y,\n      z: z,\n      f: 0\n    });\n  };\n  /** Calculate an array of spaces that make up the polygon. Currently only supports 2D polygons. */\n  Space.spacesForGeometry = function (geom, zoom) {\n    var z = zoom;\n    if (z === 0) {\n      // not recommended.\n      return [new Space('0/0/0/0')];\n    }\n    if (geom.type === 'GeometryCollection') {\n      throw new Error('GeometryCollection not supported');\n    }\n    // this can be optimized a lot!\n    var bbox = bbox$2(geom),\n      min = pointToTile(bbox[0], bbox[1], 32),\n      max = pointToTile(bbox[2], bbox[3], 32),\n      minX = Math.min(min[0], max[0]) >>> 32 - z,\n      minY = Math.min(min[1], max[1]) >>> 32 - z,\n      maxX = (Math.max(max[0], min[0]) >>> 32 - z) + 1,\n      maxY = (Math.max(max[1], min[1]) >>> 32 - z) + 1,\n      spaces = [];\n    // scanline polygon fill algorithm\n    for (var x = minX; x <= maxX; x++) {\n      for (var y = minY; y <= maxY; y++) {\n        var space = new Space({\n          x: x,\n          y: y,\n          z: z,\n          f: 0\n        });\n        if (booleanIntersects(geom, space.toGeoJSON())) {\n          spaces.push(space);\n        }\n      }\n    }\n    return spaces;\n  };\n  Space.prototype._regenerateAttributesFromZFXY = function () {\n    this.alt = getFloor(this.zfxy);\n    this.center = getCenterLngLatAlt(this.zfxy);\n    this.zoom = this.zfxy.z;\n    this.id = this.tilehash = generateTilehash(this.zfxy);\n    this.zfxyStr = \"/\".concat(this.zfxy.z, \"/\").concat(this.zfxy.f, \"/\").concat(this.zfxy.x, \"/\").concat(this.zfxy.y);\n  };\n  return Space;\n}();\nexport { Space };","map":{"version":3,"names":["__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","__values","o","Symbol","iterator","m","next","value","done","TypeError","__read","r","ar","e","push","error","__spreadArray","to","from","pack","l","Array","slice","concat","isZFXYTile","tile","ZFXY_1M_ZOOM_BASE","ZFXY_ROOT_TILE","f","x","y","z","rad2deg","Math","PI","getParent","steps","Error","getChildren","getSurrounding","zfxyWraparound","parseZFXYString","str","match","undefined","parseInt","getLngLat","pow","lng","lat","atan","exp","getCenterLngLat","getCenterLngLatAlt","alt","getFloor","getBBox","nw","se","calculateZFXY","input","meters","floor","zoom","d2r","sin","z2","log","max","min","parseZFXYTilehash","th","negativeF","substring","children","lastChild","th_1","th_1_1","c","generateTilehash","originalF","out","thisTile","abs","parent_1","childrenOfParent","positionInParent","findIndex","child","toString","feature","geom","properties","options","feat","type","id","bbox","geometry","point","coordinates","isArray","isNumber","lineString","featureCollection$1","featureCollection","features","fc","multiLineString","num","isNaN","coordEach$1","coordEach","geojson","callback","excludeWrapCoord","j","k","stopG","coords","geometryMaybeCollection","wrapShrink","coordIndex","isGeometryCollection","isFeatureCollection","isFeature","stop","featureIndex","geometries","geomIndex","multiFeatureIndex","geometryIndex","geomType","featureEach$2","featureEach","geomEach$1","geomEach","g","featureProperties","featureBBox","featureId","flattenEach$1","flattenEach","coordinate","bbox$2","result","Infinity","coord","getCoord","getCoords","getGeom","booleanPointInPolygon","polygon","pt","polys","inBBox","insidePoly","inRing","ignoreBoundary","inHole","ring","isInside","xi","yi","xj","yj","onBoundary","intersect","lineSegment","results","lineSegmentFeature","forEach","segments","createSegments","segment","reduce","previousCoords","currentCoords","bbox$1","coords1","coords2","x1","y1","x2","y2","west","south","east","north","quickselect","arr","left","right","compare","quickselectStep","defaultCompare","sd","sqrt","newLeft","newRight","swap","tmp","a","b","RBush","maxEntries","_classCallCheck","_maxEntries","_minEntries","ceil","clear","_createClass","key","all","_all","data","search","node","intersects$1","toBBox","nodesToSearch","childBBox","leaf","contains","pop","collides","load","insert","_build","height","_splitRoot","tmpNode","_insert","item","createNode","remove","equalsFn","path","indexes","parent","goingUp","index","findItem","splice","_condense","compareMinX","minX","compareMinY","minY","toJSON","fromJSON","_toConsumableArray","items","N","M","calcBBox","N2","N1","multiSelect","right2","right3","_chooseSubtree","level","minArea","minEnlargement","targetNode","area","bboxArea","enlargement","enlargedArea","isNode","insertPath","extend","_split","_adjustParentBBoxes","_chooseSplitAxis","splitIndex","_chooseSplitIndex","newNode","minOverlap","bbox1","distBBox","bbox2","overlap","intersectionArea","compareNodeMinX","compareNodeMinY","xMargin","_allDistMargin","yMargin","sort","leftBBox","rightBBox","margin","bboxMargin","siblings","indexOf","destNode","maxX","maxY","intersects","stack","mid","defineProperty","exports","earthRadius","factors","centimeters","centimetres","degrees","feet","inches","kilometers","kilometres","metres","miles","millimeters","millimetres","nauticalmiles","radians","yards","unitsFactors","areaFactors","acres","hectares","_options","multiPoint","multiPolygon","points","map","_i","coordinates_1","polygons","lineStrings","geometryCollection","round","precision","multiplier","radiansToLength","units","factor","lengthToRadians","distance","lengthToDegrees","radiansToDegrees","bearingToAzimuth","bearing","angle","degreesToRadians","convertLength","originalUnit","finalUnit","convertArea","startFactor","finalFactor","isObject","constructor","validateBBox","validateId","js$1","helpers$1","js$2","coordReduce","initialValue","previousValue","currentCoord","propEach","propReduce","currentProperties","featureEach$1","featureReduce","currentFeature","coordAll","geomReduce","currentGeometry","flattenReduce","segmentEach","segmentIndex","previousFeatureIndex","previousMultiIndex","prevGeomIndex","featureIndexCoord","multiPartIndexCoord","currentSegment","segmentReduce","started","lineEach","lineReduce","currentLine","findSegment","findPoint","js","meta_1","default","rbush","helpers","meta","turfBBox","geojsonRbush","tree","equals","json","geojsonRbush$1","lineIntersect","line1","line2","unique","join","x3","y3","x4","y4","denom","numeA","numeB","uA","uB","polygonToLine","poly","polygonToLine$1","multiPolygonToLine","coordsToLine","multiPoly","lines","booleanDisjoint","feature1","feature2","bool","flatten1","flatten2","disjoint","geom1","geom2","compareCoords","isPointOnLine","isLineOnLine","isLineInPoly","isPolyInPoly","isPointOnLineSegment","lineString1","lineString2","doLinesIntersect","_a","coord1","_b","_c","coord2","lineSegmentStart","lineSegmentEnd","dxc","dyc","dxl","dyl","cross","pair1","pair2","booleanIntersects","MAX_ZOOM","getBboxZoom","mask","bboxToTile","bboxCoords","minZoom","pointToTile","lon","pointToTileFraction","DEFAULT_ZOOM","Space","zfxy","_regenerateAttributesFromZFXY","up","by","move","down","newSpace","atZoom","surroundings","_this","filter","zfxyStr","position","toGeoJSON","vertices3d","getSpaceById","getSpaceByLocation","loc","getSpaceByZFXY","boundingSpaceForGeometry","largestTile","spacesForGeometry","spaces","space","center","tilehash"],"sources":["/home/magari/git/test_smartmap/node_modules/@spatial-id/javascript-sdk/node_modules/tslib/tslib.es6.js","/home/magari/git/test_smartmap/node_modules/@spatial-id/javascript-sdk/src/zfxy.ts","/home/magari/git/test_smartmap/node_modules/@spatial-id/javascript-sdk/src/zfxy_tilehash.ts","/home/magari/git/test_smartmap/node_modules/@spatial-id/javascript-sdk/node_modules/@turf/helpers/dist/es/index.js","/home/magari/git/test_smartmap/node_modules/@spatial-id/javascript-sdk/node_modules/@turf/meta/dist/es/index.js","/home/magari/git/test_smartmap/node_modules/@spatial-id/javascript-sdk/node_modules/@turf/bbox/dist/es/index.js","/home/magari/git/test_smartmap/node_modules/@spatial-id/javascript-sdk/node_modules/@turf/invariant/dist/es/index.js","/home/magari/git/test_smartmap/node_modules/@spatial-id/javascript-sdk/node_modules/@turf/boolean-point-in-polygon/dist/es/index.js","/home/magari/git/test_smartmap/node_modules/@spatial-id/javascript-sdk/node_modules/@turf/line-segment/dist/es/index.js","/home/magari/git/test_smartmap/node_modules/@spatial-id/javascript-sdk/node_modules/quickselect/index.js","/home/magari/git/test_smartmap/node_modules/@spatial-id/javascript-sdk/node_modules/rbush/index.js","/home/magari/git/test_smartmap/node_modules/@spatial-id/javascript-sdk/node_modules/@turf/helpers/dist/js/index.js","/home/magari/git/test_smartmap/node_modules/@spatial-id/javascript-sdk/node_modules/@turf/meta/dist/js/index.js","/home/magari/git/test_smartmap/node_modules/@spatial-id/javascript-sdk/node_modules/@turf/bbox/dist/js/index.js","/home/magari/git/test_smartmap/node_modules/@spatial-id/javascript-sdk/node_modules/geojson-rbush/index.js","/home/magari/git/test_smartmap/node_modules/@spatial-id/javascript-sdk/node_modules/@turf/line-intersect/dist/es/index.js","/home/magari/git/test_smartmap/node_modules/@spatial-id/javascript-sdk/node_modules/@turf/polygon-to-line/dist/es/index.js","/home/magari/git/test_smartmap/node_modules/@spatial-id/javascript-sdk/node_modules/@turf/boolean-disjoint/dist/es/index.js","/home/magari/git/test_smartmap/node_modules/@spatial-id/javascript-sdk/node_modules/@turf/boolean-intersects/dist/es/index.js","/home/magari/git/test_smartmap/node_modules/@spatial-id/javascript-sdk/src/tilebelt.ts","/home/magari/git/test_smartmap/node_modules/@spatial-id/javascript-sdk/src/index.ts"],"sourcesContent":["/******************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    if (typeof b !== \"function\" && b !== null)\r\n        throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport var __createBinding = Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    var desc = Object.getOwnPropertyDescriptor(m, k);\r\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\r\n        desc = { enumerable: true, get: function() { return m[k]; } };\r\n    }\r\n    Object.defineProperty(o, k2, desc);\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n});\r\n\r\nexport function __exportStar(m, o) {\r\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n}\r\n\r\nexport function __spreadArray(to, from, pack) {\r\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\r\n        if (ar || !(i in from)) {\r\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\r\n            ar[i] = from[i];\r\n        }\r\n    }\r\n    return to.concat(ar || Array.prototype.slice.call(from));\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nvar __setModuleDefault = Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, state, kind, f) {\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\r\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, state, value, kind, f) {\r\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\r\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\r\n}\r\n\r\nexport function __classPrivateFieldIn(state, receiver) {\r\n    if (receiver === null || (typeof receiver !== \"object\" && typeof receiver !== \"function\")) throw new TypeError(\"Cannot use 'in' operator on non-object\");\r\n    return typeof state === \"function\" ? receiver === state : state.has(receiver);\r\n}\r\n","import { LngLat, LngLatWithAltitude } from \"./types\";\n\nexport type ZFXYTile = { z: number, f: number, x: number, y: number };\n\nexport function isZFXYTile(tile: any): tile is ZFXYTile {\n  return ('z' in tile && 'f' in tile && 'x' in tile && 'y' in tile);\n}\n\nexport const ZFXY_1M_ZOOM_BASE = 25 as const;\nexport const ZFXY_ROOT_TILE: ZFXYTile = { f: 0, x: 0, y: 0, z: 0 };\n\nconst rad2deg = 180 / Math.PI;\n\nexport function getParent(tile: ZFXYTile, steps: number = 1): ZFXYTile {\n  const { f,x,y,z } = tile;\n  if (steps <= 0) {\n    throw new Error('steps must be greater than 0');\n  }\n  if (steps > z) {\n    throw new Error(`Getting parent tile of ${tile}, ${steps} steps is not possible because it would go beyond the root tile (z=0)`);\n  }\n  return {\n    f: f >> steps,\n    x: x >> steps,\n    y: y >> steps,\n    z: z -  steps,\n  };\n}\n\nexport function getChildren(tile: ZFXYTile = ZFXY_ROOT_TILE): ZFXYTile[] {\n  const {f,x,y,z} = tile;\n  return [\n    {f: f * 2,     x: x * 2,     y: y * 2,     z: z+1}, // f +0, x +0, y +0\n    {f: f * 2,     x: x * 2 + 1, y: y * 2,     z: z+1}, // f +0, x +1, y +0\n    {f: f * 2,     x: x * 2,     y: y * 2 + 1, z: z+1}, // f +0, x +0, y +1\n    {f: f * 2,     x: x * 2 + 1, y: y * 2 + 1, z: z+1}, // f +0, x +1, y +1\n    {f: f * 2 + 1, x: x * 2,     y: y * 2,     z: z+1}, // f +1, x +0, y +0\n    {f: f * 2 + 1, x: x * 2 + 1, y: y * 2,     z: z+1}, // f +1, x +1, y +0\n    {f: f * 2 + 1, x: x * 2,     y: y * 2 + 1, z: z+1}, // f +1, x +0, y +1\n    {f: f * 2 + 1, x: x * 2 + 1, y: y * 2 + 1, z: z+1}, // f +1, x +1, y +1\n  ];\n}\n\nexport function getSurrounding(tile: ZFXYTile = ZFXY_ROOT_TILE): ZFXYTile[] {\n  const {f,x,y,z} = tile;\n  return [\n    zfxyWraparound({f: f, x: x,     y: y,     z: z}), // f +0, x +0, y +0\n    zfxyWraparound({f: f, x: x + 1, y: y,     z: z}), // f +0, x +1, y +0\n    zfxyWraparound({f: f, x: x,     y: y + 1, z: z}), // f +0, x +0, y +1\n    zfxyWraparound({f: f, x: x + 1, y: y + 1, z: z}), // f +0, x +1, y +1\n    zfxyWraparound({f: f, x: x - 1, y: y,     z: z}), // f +0, x -1, y +0\n    zfxyWraparound({f: f, x: x,     y: y - 1, z: z}), // f +0, x +0, y -1\n    zfxyWraparound({f: f, x: x - 1, y: y - 1, z: z}), // f +0, x -1, y -1\n    zfxyWraparound({f: f, x: x + 1, y: y - 1, z: z}), // f +0, x +1, y -1\n    zfxyWraparound({f: f, x: x - 1, y: y + 1, z: z}), // f +0, x -1, y +1\n  ];\n}\n\nexport function parseZFXYString(str: string): ZFXYTile | undefined {\n  const match = str.match(/^\\/?(\\d+)\\/(?:(\\d+)\\/)?(\\d+)\\/(\\d+)$/);\n  if (!match) {\n    return undefined;\n  }\n  return {\n    z: parseInt(match[1], 10),\n    f: parseInt(match[2] || '0', 10),\n    x: parseInt(match[3], 10),\n    y: parseInt(match[4], 10),\n  };\n}\n\n/** Returns the lng,lat of the northwest corner of the provided tile */\nexport function getLngLat(tile: ZFXYTile): LngLat {\n  const n = Math.PI - 2 * Math.PI * tile.y / Math.pow(2, tile.z);\n  return {\n    lng: tile.x / Math.pow(2, tile.z) * 360 - 180,\n    lat: rad2deg * Math.atan(0.5 * (Math.exp(n) - Math.exp(-n))),\n  };\n}\n\nexport function getCenterLngLat(tile: ZFXYTile): LngLat {\n  const x = tile.x * 2 + 1,\n        y = tile.y * 2 + 1,\n        z = tile.z + 1;\n  return getLngLat({x, y, z, f: 0});\n}\n\nexport function getCenterLngLatAlt(tile: ZFXYTile): LngLatWithAltitude {\n  return {\n    ...getCenterLngLat(tile),\n    alt: getFloor(tile) + ((2**ZFXY_1M_ZOOM_BASE) / (2**(tile.z + 1))),\n  };\n}\n\nexport function getBBox(tile: ZFXYTile): [LngLat, LngLat] {\n  const nw = getLngLat(tile),\n        se = getLngLat({...tile, y: tile.y + 1, x: tile.x + 1});\n  return [ nw, se ];\n}\n\n/** Returns the floor of the voxel, in meters */\nexport function getFloor(tile: ZFXYTile): number {\n  return tile.f * (2**ZFXY_1M_ZOOM_BASE) / (2**tile.z)\n}\n\nexport interface CalculateZFXYInput {\n  lat: number\n  lng: number\n  alt?: number\n  zoom: number\n}\n\nexport function calculateZFXY(input: CalculateZFXYInput): ZFXYTile {\n  const meters = typeof input.alt !== 'undefined' ? input.alt : 0;\n  if (meters <= -(2**ZFXY_1M_ZOOM_BASE) || meters >= (2**ZFXY_1M_ZOOM_BASE)) {\n    // TODO: make altitude unlimited?\n    throw new Error(`ZFXY only supports altitude between -2^${ZFXY_1M_ZOOM_BASE} and +2^${ZFXY_1M_ZOOM_BASE}.`);\n  }\n  const f = Math.floor(((2 ** input.zoom) * meters) / (2 ** ZFXY_1M_ZOOM_BASE));\n\n  // Algorithm adapted from tilebelt.js\n  const d2r = Math.PI / 180;\n  const sin = Math.sin(input.lat * d2r);\n  const z2 = 2 ** input.zoom;\n  let x = z2 * (input.lng / 360 + 0.5);\n  const y = z2 * (0.5 - 0.25 * Math.log((1 + sin) / (1 - sin)) / Math.PI);\n\n  // Wrap Tile X\n  x = x % z2;\n  if (x < 0) x = x + z2;\n\n  return {\n    f: f,\n    x: Math.floor(x),\n    y: Math.floor(y),\n    z: input.zoom,\n  };\n}\n\n/**\n * Fix a tile that has out-of-bounds coordinates by:\n * for the x and y coordinates: wrapping the coordinates around.\n * for the f coordinate: limiting to maximum or minimum.\n */\nexport function zfxyWraparound(tile: ZFXYTile): ZFXYTile {\n  const {z, f, x, y} = tile;\n  return {\n    z,\n    f: Math.max(Math.min(f, (2**z)), -(2**z)),\n    x: (x < 0) ? x + 2**z : x % 2**z,\n    y: (y < 0) ? y + 2**z : y % 2**z,\n  }\n}\n","import { ZFXYTile, getChildren, getParent } from \"./zfxy\";\n\nexport function parseZFXYTilehash(th: string): ZFXYTile {\n  let negativeF = false;\n  if (th[0] === '-') {\n    negativeF = true;\n    th = th.substring(1);\n  }\n  let children = getChildren();\n  let lastChild: ZFXYTile;\n  for (const c of th) {\n    lastChild = {...children[parseInt(c, 10) - 1]};\n    children = getChildren(lastChild);\n  }\n  if (negativeF) {\n    lastChild.f = -lastChild.f;\n  }\n  return lastChild;\n}\n\nexport function generateTilehash(tile: ZFXYTile): string {\n  let {f,x,y,z} = tile;\n  const originalF = f;\n  let out = '';\n  while (z>0) {\n    const thisTile: ZFXYTile = { f: Math.abs(f), x: x, y: y, z: z };\n    const parent = getParent(thisTile);\n    const childrenOfParent = getChildren(parent);\n    const positionInParent = childrenOfParent.findIndex(\n      (child) => child.f === Math.abs(f) && child.x === x && child.y === y && child.z === z\n    );\n    out = (positionInParent + 1).toString() + out;\n    f = parent.f;\n    x = parent.x;\n    y = parent.y;\n    z = parent.z;\n  }\n  return (originalF < 0 ? '-' : '') + out;\n}\n","/**\n * @module helpers\n */\n/**\n * Earth Radius used with the Harvesine formula and approximates using a spherical (non-ellipsoid) Earth.\n *\n * @memberof helpers\n * @type {number}\n */\nexport var earthRadius = 6371008.8;\n/**\n * Unit of measurement factors using a spherical (non-ellipsoid) earth radius.\n *\n * @memberof helpers\n * @type {Object}\n */\nexport var factors = {\n    centimeters: earthRadius * 100,\n    centimetres: earthRadius * 100,\n    degrees: earthRadius / 111325,\n    feet: earthRadius * 3.28084,\n    inches: earthRadius * 39.37,\n    kilometers: earthRadius / 1000,\n    kilometres: earthRadius / 1000,\n    meters: earthRadius,\n    metres: earthRadius,\n    miles: earthRadius / 1609.344,\n    millimeters: earthRadius * 1000,\n    millimetres: earthRadius * 1000,\n    nauticalmiles: earthRadius / 1852,\n    radians: 1,\n    yards: earthRadius * 1.0936,\n};\n/**\n * Units of measurement factors based on 1 meter.\n *\n * @memberof helpers\n * @type {Object}\n */\nexport var unitsFactors = {\n    centimeters: 100,\n    centimetres: 100,\n    degrees: 1 / 111325,\n    feet: 3.28084,\n    inches: 39.37,\n    kilometers: 1 / 1000,\n    kilometres: 1 / 1000,\n    meters: 1,\n    metres: 1,\n    miles: 1 / 1609.344,\n    millimeters: 1000,\n    millimetres: 1000,\n    nauticalmiles: 1 / 1852,\n    radians: 1 / earthRadius,\n    yards: 1.0936133,\n};\n/**\n * Area of measurement factors based on 1 square meter.\n *\n * @memberof helpers\n * @type {Object}\n */\nexport var areaFactors = {\n    acres: 0.000247105,\n    centimeters: 10000,\n    centimetres: 10000,\n    feet: 10.763910417,\n    hectares: 0.0001,\n    inches: 1550.003100006,\n    kilometers: 0.000001,\n    kilometres: 0.000001,\n    meters: 1,\n    metres: 1,\n    miles: 3.86e-7,\n    millimeters: 1000000,\n    millimetres: 1000000,\n    yards: 1.195990046,\n};\n/**\n * Wraps a GeoJSON {@link Geometry} in a GeoJSON {@link Feature}.\n *\n * @name feature\n * @param {Geometry} geometry input geometry\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature} a GeoJSON Feature\n * @example\n * var geometry = {\n *   \"type\": \"Point\",\n *   \"coordinates\": [110, 50]\n * };\n *\n * var feature = turf.feature(geometry);\n *\n * //=feature\n */\nexport function feature(geom, properties, options) {\n    if (options === void 0) { options = {}; }\n    var feat = { type: \"Feature\" };\n    if (options.id === 0 || options.id) {\n        feat.id = options.id;\n    }\n    if (options.bbox) {\n        feat.bbox = options.bbox;\n    }\n    feat.properties = properties || {};\n    feat.geometry = geom;\n    return feat;\n}\n/**\n * Creates a GeoJSON {@link Geometry} from a Geometry string type & coordinates.\n * For GeometryCollection type use `helpers.geometryCollection`\n *\n * @name geometry\n * @param {string} type Geometry Type\n * @param {Array<any>} coordinates Coordinates\n * @param {Object} [options={}] Optional Parameters\n * @returns {Geometry} a GeoJSON Geometry\n * @example\n * var type = \"Point\";\n * var coordinates = [110, 50];\n * var geometry = turf.geometry(type, coordinates);\n * // => geometry\n */\nexport function geometry(type, coordinates, _options) {\n    if (_options === void 0) { _options = {}; }\n    switch (type) {\n        case \"Point\":\n            return point(coordinates).geometry;\n        case \"LineString\":\n            return lineString(coordinates).geometry;\n        case \"Polygon\":\n            return polygon(coordinates).geometry;\n        case \"MultiPoint\":\n            return multiPoint(coordinates).geometry;\n        case \"MultiLineString\":\n            return multiLineString(coordinates).geometry;\n        case \"MultiPolygon\":\n            return multiPolygon(coordinates).geometry;\n        default:\n            throw new Error(type + \" is invalid\");\n    }\n}\n/**\n * Creates a {@link Point} {@link Feature} from a Position.\n *\n * @name point\n * @param {Array<number>} coordinates longitude, latitude position (each in decimal degrees)\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<Point>} a Point feature\n * @example\n * var point = turf.point([-75.343, 39.984]);\n *\n * //=point\n */\nexport function point(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    if (!coordinates) {\n        throw new Error(\"coordinates is required\");\n    }\n    if (!Array.isArray(coordinates)) {\n        throw new Error(\"coordinates must be an Array\");\n    }\n    if (coordinates.length < 2) {\n        throw new Error(\"coordinates must be at least 2 numbers long\");\n    }\n    if (!isNumber(coordinates[0]) || !isNumber(coordinates[1])) {\n        throw new Error(\"coordinates must contain numbers\");\n    }\n    var geom = {\n        type: \"Point\",\n        coordinates: coordinates,\n    };\n    return feature(geom, properties, options);\n}\n/**\n * Creates a {@link Point} {@link FeatureCollection} from an Array of Point coordinates.\n *\n * @name points\n * @param {Array<Array<number>>} coordinates an array of Points\n * @param {Object} [properties={}] Translate these properties to each Feature\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north]\n * associated with the FeatureCollection\n * @param {string|number} [options.id] Identifier associated with the FeatureCollection\n * @returns {FeatureCollection<Point>} Point Feature\n * @example\n * var points = turf.points([\n *   [-75, 39],\n *   [-80, 45],\n *   [-78, 50]\n * ]);\n *\n * //=points\n */\nexport function points(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    return featureCollection(coordinates.map(function (coords) {\n        return point(coords, properties);\n    }), options);\n}\n/**\n * Creates a {@link Polygon} {@link Feature} from an Array of LinearRings.\n *\n * @name polygon\n * @param {Array<Array<Array<number>>>} coordinates an array of LinearRings\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<Polygon>} Polygon Feature\n * @example\n * var polygon = turf.polygon([[[-5, 52], [-4, 56], [-2, 51], [-7, 54], [-5, 52]]], { name: 'poly1' });\n *\n * //=polygon\n */\nexport function polygon(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    for (var _i = 0, coordinates_1 = coordinates; _i < coordinates_1.length; _i++) {\n        var ring = coordinates_1[_i];\n        if (ring.length < 4) {\n            throw new Error(\"Each LinearRing of a Polygon must have 4 or more Positions.\");\n        }\n        for (var j = 0; j < ring[ring.length - 1].length; j++) {\n            // Check if first point of Polygon contains two numbers\n            if (ring[ring.length - 1][j] !== ring[0][j]) {\n                throw new Error(\"First and last Position are not equivalent.\");\n            }\n        }\n    }\n    var geom = {\n        type: \"Polygon\",\n        coordinates: coordinates,\n    };\n    return feature(geom, properties, options);\n}\n/**\n * Creates a {@link Polygon} {@link FeatureCollection} from an Array of Polygon coordinates.\n *\n * @name polygons\n * @param {Array<Array<Array<Array<number>>>>} coordinates an array of Polygon coordinates\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the FeatureCollection\n * @returns {FeatureCollection<Polygon>} Polygon FeatureCollection\n * @example\n * var polygons = turf.polygons([\n *   [[[-5, 52], [-4, 56], [-2, 51], [-7, 54], [-5, 52]]],\n *   [[[-15, 42], [-14, 46], [-12, 41], [-17, 44], [-15, 42]]],\n * ]);\n *\n * //=polygons\n */\nexport function polygons(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    return featureCollection(coordinates.map(function (coords) {\n        return polygon(coords, properties);\n    }), options);\n}\n/**\n * Creates a {@link LineString} {@link Feature} from an Array of Positions.\n *\n * @name lineString\n * @param {Array<Array<number>>} coordinates an array of Positions\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<LineString>} LineString Feature\n * @example\n * var linestring1 = turf.lineString([[-24, 63], [-23, 60], [-25, 65], [-20, 69]], {name: 'line 1'});\n * var linestring2 = turf.lineString([[-14, 43], [-13, 40], [-15, 45], [-10, 49]], {name: 'line 2'});\n *\n * //=linestring1\n * //=linestring2\n */\nexport function lineString(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    if (coordinates.length < 2) {\n        throw new Error(\"coordinates must be an array of two or more positions\");\n    }\n    var geom = {\n        type: \"LineString\",\n        coordinates: coordinates,\n    };\n    return feature(geom, properties, options);\n}\n/**\n * Creates a {@link LineString} {@link FeatureCollection} from an Array of LineString coordinates.\n *\n * @name lineStrings\n * @param {Array<Array<Array<number>>>} coordinates an array of LinearRings\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north]\n * associated with the FeatureCollection\n * @param {string|number} [options.id] Identifier associated with the FeatureCollection\n * @returns {FeatureCollection<LineString>} LineString FeatureCollection\n * @example\n * var linestrings = turf.lineStrings([\n *   [[-24, 63], [-23, 60], [-25, 65], [-20, 69]],\n *   [[-14, 43], [-13, 40], [-15, 45], [-10, 49]]\n * ]);\n *\n * //=linestrings\n */\nexport function lineStrings(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    return featureCollection(coordinates.map(function (coords) {\n        return lineString(coords, properties);\n    }), options);\n}\n/**\n * Takes one or more {@link Feature|Features} and creates a {@link FeatureCollection}.\n *\n * @name featureCollection\n * @param {Feature[]} features input features\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {FeatureCollection} FeatureCollection of Features\n * @example\n * var locationA = turf.point([-75.343, 39.984], {name: 'Location A'});\n * var locationB = turf.point([-75.833, 39.284], {name: 'Location B'});\n * var locationC = turf.point([-75.534, 39.123], {name: 'Location C'});\n *\n * var collection = turf.featureCollection([\n *   locationA,\n *   locationB,\n *   locationC\n * ]);\n *\n * //=collection\n */\nexport function featureCollection(features, options) {\n    if (options === void 0) { options = {}; }\n    var fc = { type: \"FeatureCollection\" };\n    if (options.id) {\n        fc.id = options.id;\n    }\n    if (options.bbox) {\n        fc.bbox = options.bbox;\n    }\n    fc.features = features;\n    return fc;\n}\n/**\n * Creates a {@link Feature<MultiLineString>} based on a\n * coordinate array. Properties can be added optionally.\n *\n * @name multiLineString\n * @param {Array<Array<Array<number>>>} coordinates an array of LineStrings\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<MultiLineString>} a MultiLineString feature\n * @throws {Error} if no coordinates are passed\n * @example\n * var multiLine = turf.multiLineString([[[0,0],[10,10]]]);\n *\n * //=multiLine\n */\nexport function multiLineString(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    var geom = {\n        type: \"MultiLineString\",\n        coordinates: coordinates,\n    };\n    return feature(geom, properties, options);\n}\n/**\n * Creates a {@link Feature<MultiPoint>} based on a\n * coordinate array. Properties can be added optionally.\n *\n * @name multiPoint\n * @param {Array<Array<number>>} coordinates an array of Positions\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<MultiPoint>} a MultiPoint feature\n * @throws {Error} if no coordinates are passed\n * @example\n * var multiPt = turf.multiPoint([[0,0],[10,10]]);\n *\n * //=multiPt\n */\nexport function multiPoint(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    var geom = {\n        type: \"MultiPoint\",\n        coordinates: coordinates,\n    };\n    return feature(geom, properties, options);\n}\n/**\n * Creates a {@link Feature<MultiPolygon>} based on a\n * coordinate array. Properties can be added optionally.\n *\n * @name multiPolygon\n * @param {Array<Array<Array<Array<number>>>>} coordinates an array of Polygons\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<MultiPolygon>} a multipolygon feature\n * @throws {Error} if no coordinates are passed\n * @example\n * var multiPoly = turf.multiPolygon([[[[0,0],[0,10],[10,10],[10,0],[0,0]]]]);\n *\n * //=multiPoly\n *\n */\nexport function multiPolygon(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    var geom = {\n        type: \"MultiPolygon\",\n        coordinates: coordinates,\n    };\n    return feature(geom, properties, options);\n}\n/**\n * Creates a {@link Feature<GeometryCollection>} based on a\n * coordinate array. Properties can be added optionally.\n *\n * @name geometryCollection\n * @param {Array<Geometry>} geometries an array of GeoJSON Geometries\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<GeometryCollection>} a GeoJSON GeometryCollection Feature\n * @example\n * var pt = turf.geometry(\"Point\", [100, 0]);\n * var line = turf.geometry(\"LineString\", [[101, 0], [102, 1]]);\n * var collection = turf.geometryCollection([pt, line]);\n *\n * // => collection\n */\nexport function geometryCollection(geometries, properties, options) {\n    if (options === void 0) { options = {}; }\n    var geom = {\n        type: \"GeometryCollection\",\n        geometries: geometries,\n    };\n    return feature(geom, properties, options);\n}\n/**\n * Round number to precision\n *\n * @param {number} num Number\n * @param {number} [precision=0] Precision\n * @returns {number} rounded number\n * @example\n * turf.round(120.4321)\n * //=120\n *\n * turf.round(120.4321, 2)\n * //=120.43\n */\nexport function round(num, precision) {\n    if (precision === void 0) { precision = 0; }\n    if (precision && !(precision >= 0)) {\n        throw new Error(\"precision must be a positive number\");\n    }\n    var multiplier = Math.pow(10, precision || 0);\n    return Math.round(num * multiplier) / multiplier;\n}\n/**\n * Convert a distance measurement (assuming a spherical Earth) from radians to a more friendly unit.\n * Valid units: miles, nauticalmiles, inches, yards, meters, metres, kilometers, centimeters, feet\n *\n * @name radiansToLength\n * @param {number} radians in radians across the sphere\n * @param {string} [units=\"kilometers\"] can be degrees, radians, miles, inches, yards, metres,\n * meters, kilometres, kilometers.\n * @returns {number} distance\n */\nexport function radiansToLength(radians, units) {\n    if (units === void 0) { units = \"kilometers\"; }\n    var factor = factors[units];\n    if (!factor) {\n        throw new Error(units + \" units is invalid\");\n    }\n    return radians * factor;\n}\n/**\n * Convert a distance measurement (assuming a spherical Earth) from a real-world unit into radians\n * Valid units: miles, nauticalmiles, inches, yards, meters, metres, kilometers, centimeters, feet\n *\n * @name lengthToRadians\n * @param {number} distance in real units\n * @param {string} [units=\"kilometers\"] can be degrees, radians, miles, inches, yards, metres,\n * meters, kilometres, kilometers.\n * @returns {number} radians\n */\nexport function lengthToRadians(distance, units) {\n    if (units === void 0) { units = \"kilometers\"; }\n    var factor = factors[units];\n    if (!factor) {\n        throw new Error(units + \" units is invalid\");\n    }\n    return distance / factor;\n}\n/**\n * Convert a distance measurement (assuming a spherical Earth) from a real-world unit into degrees\n * Valid units: miles, nauticalmiles, inches, yards, meters, metres, centimeters, kilometres, feet\n *\n * @name lengthToDegrees\n * @param {number} distance in real units\n * @param {string} [units=\"kilometers\"] can be degrees, radians, miles, inches, yards, metres,\n * meters, kilometres, kilometers.\n * @returns {number} degrees\n */\nexport function lengthToDegrees(distance, units) {\n    return radiansToDegrees(lengthToRadians(distance, units));\n}\n/**\n * Converts any bearing angle from the north line direction (positive clockwise)\n * and returns an angle between 0-360 degrees (positive clockwise), 0 being the north line\n *\n * @name bearingToAzimuth\n * @param {number} bearing angle, between -180 and +180 degrees\n * @returns {number} angle between 0 and 360 degrees\n */\nexport function bearingToAzimuth(bearing) {\n    var angle = bearing % 360;\n    if (angle < 0) {\n        angle += 360;\n    }\n    return angle;\n}\n/**\n * Converts an angle in radians to degrees\n *\n * @name radiansToDegrees\n * @param {number} radians angle in radians\n * @returns {number} degrees between 0 and 360 degrees\n */\nexport function radiansToDegrees(radians) {\n    var degrees = radians % (2 * Math.PI);\n    return (degrees * 180) / Math.PI;\n}\n/**\n * Converts an angle in degrees to radians\n *\n * @name degreesToRadians\n * @param {number} degrees angle between 0 and 360 degrees\n * @returns {number} angle in radians\n */\nexport function degreesToRadians(degrees) {\n    var radians = degrees % 360;\n    return (radians * Math.PI) / 180;\n}\n/**\n * Converts a length to the requested unit.\n * Valid units: miles, nauticalmiles, inches, yards, meters, metres, kilometers, centimeters, feet\n *\n * @param {number} length to be converted\n * @param {Units} [originalUnit=\"kilometers\"] of the length\n * @param {Units} [finalUnit=\"kilometers\"] returned unit\n * @returns {number} the converted length\n */\nexport function convertLength(length, originalUnit, finalUnit) {\n    if (originalUnit === void 0) { originalUnit = \"kilometers\"; }\n    if (finalUnit === void 0) { finalUnit = \"kilometers\"; }\n    if (!(length >= 0)) {\n        throw new Error(\"length must be a positive number\");\n    }\n    return radiansToLength(lengthToRadians(length, originalUnit), finalUnit);\n}\n/**\n * Converts a area to the requested unit.\n * Valid units: kilometers, kilometres, meters, metres, centimetres, millimeters, acres, miles, yards, feet, inches, hectares\n * @param {number} area to be converted\n * @param {Units} [originalUnit=\"meters\"] of the distance\n * @param {Units} [finalUnit=\"kilometers\"] returned unit\n * @returns {number} the converted area\n */\nexport function convertArea(area, originalUnit, finalUnit) {\n    if (originalUnit === void 0) { originalUnit = \"meters\"; }\n    if (finalUnit === void 0) { finalUnit = \"kilometers\"; }\n    if (!(area >= 0)) {\n        throw new Error(\"area must be a positive number\");\n    }\n    var startFactor = areaFactors[originalUnit];\n    if (!startFactor) {\n        throw new Error(\"invalid original units\");\n    }\n    var finalFactor = areaFactors[finalUnit];\n    if (!finalFactor) {\n        throw new Error(\"invalid final units\");\n    }\n    return (area / startFactor) * finalFactor;\n}\n/**\n * isNumber\n *\n * @param {*} num Number to validate\n * @returns {boolean} true/false\n * @example\n * turf.isNumber(123)\n * //=true\n * turf.isNumber('foo')\n * //=false\n */\nexport function isNumber(num) {\n    return !isNaN(num) && num !== null && !Array.isArray(num);\n}\n/**\n * isObject\n *\n * @param {*} input variable to validate\n * @returns {boolean} true/false\n * @example\n * turf.isObject({elevation: 10})\n * //=true\n * turf.isObject('foo')\n * //=false\n */\nexport function isObject(input) {\n    return !!input && input.constructor === Object;\n}\n/**\n * Validate BBox\n *\n * @private\n * @param {Array<number>} bbox BBox to validate\n * @returns {void}\n * @throws Error if BBox is not valid\n * @example\n * validateBBox([-180, -40, 110, 50])\n * //=OK\n * validateBBox([-180, -40])\n * //=Error\n * validateBBox('Foo')\n * //=Error\n * validateBBox(5)\n * //=Error\n * validateBBox(null)\n * //=Error\n * validateBBox(undefined)\n * //=Error\n */\nexport function validateBBox(bbox) {\n    if (!bbox) {\n        throw new Error(\"bbox is required\");\n    }\n    if (!Array.isArray(bbox)) {\n        throw new Error(\"bbox must be an Array\");\n    }\n    if (bbox.length !== 4 && bbox.length !== 6) {\n        throw new Error(\"bbox must be an Array of 4 or 6 numbers\");\n    }\n    bbox.forEach(function (num) {\n        if (!isNumber(num)) {\n            throw new Error(\"bbox must only contain numbers\");\n        }\n    });\n}\n/**\n * Validate Id\n *\n * @private\n * @param {string|number} id Id to validate\n * @returns {void}\n * @throws Error if Id is not valid\n * @example\n * validateId([-180, -40, 110, 50])\n * //=Error\n * validateId([-180, -40])\n * //=Error\n * validateId('Foo')\n * //=OK\n * validateId(5)\n * //=OK\n * validateId(null)\n * //=Error\n * validateId(undefined)\n * //=Error\n */\nexport function validateId(id) {\n    if (!id) {\n        throw new Error(\"id is required\");\n    }\n    if ([\"string\", \"number\"].indexOf(typeof id) === -1) {\n        throw new Error(\"id must be a number or a string\");\n    }\n}\n","import { feature, lineString, isObject, point } from '@turf/helpers';\n\n/**\n * Callback for coordEach\n *\n * @callback coordEachCallback\n * @param {Array<number>} currentCoord The current coordinate being processed.\n * @param {number} coordIndex The current index of the coordinate being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed.\n * @param {number} geometryIndex The current index of the Geometry being processed.\n */\n\n/**\n * Iterate over coordinates in any GeoJSON object, similar to Array.forEach()\n *\n * @name coordEach\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object\n * @param {Function} callback a method that takes (currentCoord, coordIndex, featureIndex, multiFeatureIndex)\n * @param {boolean} [excludeWrapCoord=false] whether or not to include the final coordinate of LinearRings that wraps the ring in its iteration.\n * @returns {void}\n * @example\n * var features = turf.featureCollection([\n *   turf.point([26, 37], {\"foo\": \"bar\"}),\n *   turf.point([36, 53], {\"hello\": \"world\"})\n * ]);\n *\n * turf.coordEach(features, function (currentCoord, coordIndex, featureIndex, multiFeatureIndex, geometryIndex) {\n *   //=currentCoord\n *   //=coordIndex\n *   //=featureIndex\n *   //=multiFeatureIndex\n *   //=geometryIndex\n * });\n */\nfunction coordEach(geojson, callback, excludeWrapCoord) {\n  // Handles null Geometry -- Skips this GeoJSON\n  if (geojson === null) return;\n  var j,\n    k,\n    l,\n    geometry,\n    stopG,\n    coords,\n    geometryMaybeCollection,\n    wrapShrink = 0,\n    coordIndex = 0,\n    isGeometryCollection,\n    type = geojson.type,\n    isFeatureCollection = type === \"FeatureCollection\",\n    isFeature = type === \"Feature\",\n    stop = isFeatureCollection ? geojson.features.length : 1;\n\n  // This logic may look a little weird. The reason why it is that way\n  // is because it's trying to be fast. GeoJSON supports multiple kinds\n  // of objects at its root: FeatureCollection, Features, Geometries.\n  // This function has the responsibility of handling all of them, and that\n  // means that some of the `for` loops you see below actually just don't apply\n  // to certain inputs. For instance, if you give this just a\n  // Point geometry, then both loops are short-circuited and all we do\n  // is gradually rename the input until it's called 'geometry'.\n  //\n  // This also aims to allocate as few resources as possible: just a\n  // few numbers and booleans, rather than any temporary arrays as would\n  // be required with the normalization approach.\n  for (var featureIndex = 0; featureIndex < stop; featureIndex++) {\n    geometryMaybeCollection = isFeatureCollection\n      ? geojson.features[featureIndex].geometry\n      : isFeature\n      ? geojson.geometry\n      : geojson;\n    isGeometryCollection = geometryMaybeCollection\n      ? geometryMaybeCollection.type === \"GeometryCollection\"\n      : false;\n    stopG = isGeometryCollection\n      ? geometryMaybeCollection.geometries.length\n      : 1;\n\n    for (var geomIndex = 0; geomIndex < stopG; geomIndex++) {\n      var multiFeatureIndex = 0;\n      var geometryIndex = 0;\n      geometry = isGeometryCollection\n        ? geometryMaybeCollection.geometries[geomIndex]\n        : geometryMaybeCollection;\n\n      // Handles null Geometry -- Skips this geometry\n      if (geometry === null) continue;\n      coords = geometry.coordinates;\n      var geomType = geometry.type;\n\n      wrapShrink =\n        excludeWrapCoord &&\n        (geomType === \"Polygon\" || geomType === \"MultiPolygon\")\n          ? 1\n          : 0;\n\n      switch (geomType) {\n        case null:\n          break;\n        case \"Point\":\n          if (\n            callback(\n              coords,\n              coordIndex,\n              featureIndex,\n              multiFeatureIndex,\n              geometryIndex\n            ) === false\n          )\n            return false;\n          coordIndex++;\n          multiFeatureIndex++;\n          break;\n        case \"LineString\":\n        case \"MultiPoint\":\n          for (j = 0; j < coords.length; j++) {\n            if (\n              callback(\n                coords[j],\n                coordIndex,\n                featureIndex,\n                multiFeatureIndex,\n                geometryIndex\n              ) === false\n            )\n              return false;\n            coordIndex++;\n            if (geomType === \"MultiPoint\") multiFeatureIndex++;\n          }\n          if (geomType === \"LineString\") multiFeatureIndex++;\n          break;\n        case \"Polygon\":\n        case \"MultiLineString\":\n          for (j = 0; j < coords.length; j++) {\n            for (k = 0; k < coords[j].length - wrapShrink; k++) {\n              if (\n                callback(\n                  coords[j][k],\n                  coordIndex,\n                  featureIndex,\n                  multiFeatureIndex,\n                  geometryIndex\n                ) === false\n              )\n                return false;\n              coordIndex++;\n            }\n            if (geomType === \"MultiLineString\") multiFeatureIndex++;\n            if (geomType === \"Polygon\") geometryIndex++;\n          }\n          if (geomType === \"Polygon\") multiFeatureIndex++;\n          break;\n        case \"MultiPolygon\":\n          for (j = 0; j < coords.length; j++) {\n            geometryIndex = 0;\n            for (k = 0; k < coords[j].length; k++) {\n              for (l = 0; l < coords[j][k].length - wrapShrink; l++) {\n                if (\n                  callback(\n                    coords[j][k][l],\n                    coordIndex,\n                    featureIndex,\n                    multiFeatureIndex,\n                    geometryIndex\n                  ) === false\n                )\n                  return false;\n                coordIndex++;\n              }\n              geometryIndex++;\n            }\n            multiFeatureIndex++;\n          }\n          break;\n        case \"GeometryCollection\":\n          for (j = 0; j < geometry.geometries.length; j++)\n            if (\n              coordEach(geometry.geometries[j], callback, excludeWrapCoord) ===\n              false\n            )\n              return false;\n          break;\n        default:\n          throw new Error(\"Unknown Geometry Type\");\n      }\n    }\n  }\n}\n\n/**\n * Callback for coordReduce\n *\n * The first time the callback function is called, the values provided as arguments depend\n * on whether the reduce method has an initialValue argument.\n *\n * If an initialValue is provided to the reduce method:\n *  - The previousValue argument is initialValue.\n *  - The currentValue argument is the value of the first element present in the array.\n *\n * If an initialValue is not provided:\n *  - The previousValue argument is the value of the first element present in the array.\n *  - The currentValue argument is the value of the second element present in the array.\n *\n * @callback coordReduceCallback\n * @param {*} previousValue The accumulated value previously returned in the last invocation\n * of the callback, or initialValue, if supplied.\n * @param {Array<number>} currentCoord The current coordinate being processed.\n * @param {number} coordIndex The current index of the coordinate being processed.\n * Starts at index 0, if an initialValue is provided, and at index 1 otherwise.\n * @param {number} featureIndex The current index of the Feature being processed.\n * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed.\n * @param {number} geometryIndex The current index of the Geometry being processed.\n */\n\n/**\n * Reduce coordinates in any GeoJSON object, similar to Array.reduce()\n *\n * @name coordReduce\n * @param {FeatureCollection|Geometry|Feature} geojson any GeoJSON object\n * @param {Function} callback a method that takes (previousValue, currentCoord, coordIndex)\n * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.\n * @param {boolean} [excludeWrapCoord=false] whether or not to include the final coordinate of LinearRings that wraps the ring in its iteration.\n * @returns {*} The value that results from the reduction.\n * @example\n * var features = turf.featureCollection([\n *   turf.point([26, 37], {\"foo\": \"bar\"}),\n *   turf.point([36, 53], {\"hello\": \"world\"})\n * ]);\n *\n * turf.coordReduce(features, function (previousValue, currentCoord, coordIndex, featureIndex, multiFeatureIndex, geometryIndex) {\n *   //=previousValue\n *   //=currentCoord\n *   //=coordIndex\n *   //=featureIndex\n *   //=multiFeatureIndex\n *   //=geometryIndex\n *   return currentCoord;\n * });\n */\nfunction coordReduce(geojson, callback, initialValue, excludeWrapCoord) {\n  var previousValue = initialValue;\n  coordEach(\n    geojson,\n    function (\n      currentCoord,\n      coordIndex,\n      featureIndex,\n      multiFeatureIndex,\n      geometryIndex\n    ) {\n      if (coordIndex === 0 && initialValue === undefined)\n        previousValue = currentCoord;\n      else\n        previousValue = callback(\n          previousValue,\n          currentCoord,\n          coordIndex,\n          featureIndex,\n          multiFeatureIndex,\n          geometryIndex\n        );\n    },\n    excludeWrapCoord\n  );\n  return previousValue;\n}\n\n/**\n * Callback for propEach\n *\n * @callback propEachCallback\n * @param {Object} currentProperties The current Properties being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n */\n\n/**\n * Iterate over properties in any GeoJSON object, similar to Array.forEach()\n *\n * @name propEach\n * @param {FeatureCollection|Feature} geojson any GeoJSON object\n * @param {Function} callback a method that takes (currentProperties, featureIndex)\n * @returns {void}\n * @example\n * var features = turf.featureCollection([\n *     turf.point([26, 37], {foo: 'bar'}),\n *     turf.point([36, 53], {hello: 'world'})\n * ]);\n *\n * turf.propEach(features, function (currentProperties, featureIndex) {\n *   //=currentProperties\n *   //=featureIndex\n * });\n */\nfunction propEach(geojson, callback) {\n  var i;\n  switch (geojson.type) {\n    case \"FeatureCollection\":\n      for (i = 0; i < geojson.features.length; i++) {\n        if (callback(geojson.features[i].properties, i) === false) break;\n      }\n      break;\n    case \"Feature\":\n      callback(geojson.properties, 0);\n      break;\n  }\n}\n\n/**\n * Callback for propReduce\n *\n * The first time the callback function is called, the values provided as arguments depend\n * on whether the reduce method has an initialValue argument.\n *\n * If an initialValue is provided to the reduce method:\n *  - The previousValue argument is initialValue.\n *  - The currentValue argument is the value of the first element present in the array.\n *\n * If an initialValue is not provided:\n *  - The previousValue argument is the value of the first element present in the array.\n *  - The currentValue argument is the value of the second element present in the array.\n *\n * @callback propReduceCallback\n * @param {*} previousValue The accumulated value previously returned in the last invocation\n * of the callback, or initialValue, if supplied.\n * @param {*} currentProperties The current Properties being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n */\n\n/**\n * Reduce properties in any GeoJSON object into a single value,\n * similar to how Array.reduce works. However, in this case we lazily run\n * the reduction, so an array of all properties is unnecessary.\n *\n * @name propReduce\n * @param {FeatureCollection|Feature} geojson any GeoJSON object\n * @param {Function} callback a method that takes (previousValue, currentProperties, featureIndex)\n * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.\n * @returns {*} The value that results from the reduction.\n * @example\n * var features = turf.featureCollection([\n *     turf.point([26, 37], {foo: 'bar'}),\n *     turf.point([36, 53], {hello: 'world'})\n * ]);\n *\n * turf.propReduce(features, function (previousValue, currentProperties, featureIndex) {\n *   //=previousValue\n *   //=currentProperties\n *   //=featureIndex\n *   return currentProperties\n * });\n */\nfunction propReduce(geojson, callback, initialValue) {\n  var previousValue = initialValue;\n  propEach(geojson, function (currentProperties, featureIndex) {\n    if (featureIndex === 0 && initialValue === undefined)\n      previousValue = currentProperties;\n    else\n      previousValue = callback(previousValue, currentProperties, featureIndex);\n  });\n  return previousValue;\n}\n\n/**\n * Callback for featureEach\n *\n * @callback featureEachCallback\n * @param {Feature<any>} currentFeature The current Feature being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n */\n\n/**\n * Iterate over features in any GeoJSON object, similar to\n * Array.forEach.\n *\n * @name featureEach\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object\n * @param {Function} callback a method that takes (currentFeature, featureIndex)\n * @returns {void}\n * @example\n * var features = turf.featureCollection([\n *   turf.point([26, 37], {foo: 'bar'}),\n *   turf.point([36, 53], {hello: 'world'})\n * ]);\n *\n * turf.featureEach(features, function (currentFeature, featureIndex) {\n *   //=currentFeature\n *   //=featureIndex\n * });\n */\nfunction featureEach(geojson, callback) {\n  if (geojson.type === \"Feature\") {\n    callback(geojson, 0);\n  } else if (geojson.type === \"FeatureCollection\") {\n    for (var i = 0; i < geojson.features.length; i++) {\n      if (callback(geojson.features[i], i) === false) break;\n    }\n  }\n}\n\n/**\n * Callback for featureReduce\n *\n * The first time the callback function is called, the values provided as arguments depend\n * on whether the reduce method has an initialValue argument.\n *\n * If an initialValue is provided to the reduce method:\n *  - The previousValue argument is initialValue.\n *  - The currentValue argument is the value of the first element present in the array.\n *\n * If an initialValue is not provided:\n *  - The previousValue argument is the value of the first element present in the array.\n *  - The currentValue argument is the value of the second element present in the array.\n *\n * @callback featureReduceCallback\n * @param {*} previousValue The accumulated value previously returned in the last invocation\n * of the callback, or initialValue, if supplied.\n * @param {Feature} currentFeature The current Feature being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n */\n\n/**\n * Reduce features in any GeoJSON object, similar to Array.reduce().\n *\n * @name featureReduce\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object\n * @param {Function} callback a method that takes (previousValue, currentFeature, featureIndex)\n * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.\n * @returns {*} The value that results from the reduction.\n * @example\n * var features = turf.featureCollection([\n *   turf.point([26, 37], {\"foo\": \"bar\"}),\n *   turf.point([36, 53], {\"hello\": \"world\"})\n * ]);\n *\n * turf.featureReduce(features, function (previousValue, currentFeature, featureIndex) {\n *   //=previousValue\n *   //=currentFeature\n *   //=featureIndex\n *   return currentFeature\n * });\n */\nfunction featureReduce(geojson, callback, initialValue) {\n  var previousValue = initialValue;\n  featureEach(geojson, function (currentFeature, featureIndex) {\n    if (featureIndex === 0 && initialValue === undefined)\n      previousValue = currentFeature;\n    else previousValue = callback(previousValue, currentFeature, featureIndex);\n  });\n  return previousValue;\n}\n\n/**\n * Get all coordinates from any GeoJSON object.\n *\n * @name coordAll\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object\n * @returns {Array<Array<number>>} coordinate position array\n * @example\n * var features = turf.featureCollection([\n *   turf.point([26, 37], {foo: 'bar'}),\n *   turf.point([36, 53], {hello: 'world'})\n * ]);\n *\n * var coords = turf.coordAll(features);\n * //= [[26, 37], [36, 53]]\n */\nfunction coordAll(geojson) {\n  var coords = [];\n  coordEach(geojson, function (coord) {\n    coords.push(coord);\n  });\n  return coords;\n}\n\n/**\n * Callback for geomEach\n *\n * @callback geomEachCallback\n * @param {Geometry} currentGeometry The current Geometry being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n * @param {Object} featureProperties The current Feature Properties being processed.\n * @param {Array<number>} featureBBox The current Feature BBox being processed.\n * @param {number|string} featureId The current Feature Id being processed.\n */\n\n/**\n * Iterate over each geometry in any GeoJSON object, similar to Array.forEach()\n *\n * @name geomEach\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object\n * @param {Function} callback a method that takes (currentGeometry, featureIndex, featureProperties, featureBBox, featureId)\n * @returns {void}\n * @example\n * var features = turf.featureCollection([\n *     turf.point([26, 37], {foo: 'bar'}),\n *     turf.point([36, 53], {hello: 'world'})\n * ]);\n *\n * turf.geomEach(features, function (currentGeometry, featureIndex, featureProperties, featureBBox, featureId) {\n *   //=currentGeometry\n *   //=featureIndex\n *   //=featureProperties\n *   //=featureBBox\n *   //=featureId\n * });\n */\nfunction geomEach(geojson, callback) {\n  var i,\n    j,\n    g,\n    geometry,\n    stopG,\n    geometryMaybeCollection,\n    isGeometryCollection,\n    featureProperties,\n    featureBBox,\n    featureId,\n    featureIndex = 0,\n    isFeatureCollection = geojson.type === \"FeatureCollection\",\n    isFeature = geojson.type === \"Feature\",\n    stop = isFeatureCollection ? geojson.features.length : 1;\n\n  // This logic may look a little weird. The reason why it is that way\n  // is because it's trying to be fast. GeoJSON supports multiple kinds\n  // of objects at its root: FeatureCollection, Features, Geometries.\n  // This function has the responsibility of handling all of them, and that\n  // means that some of the `for` loops you see below actually just don't apply\n  // to certain inputs. For instance, if you give this just a\n  // Point geometry, then both loops are short-circuited and all we do\n  // is gradually rename the input until it's called 'geometry'.\n  //\n  // This also aims to allocate as few resources as possible: just a\n  // few numbers and booleans, rather than any temporary arrays as would\n  // be required with the normalization approach.\n  for (i = 0; i < stop; i++) {\n    geometryMaybeCollection = isFeatureCollection\n      ? geojson.features[i].geometry\n      : isFeature\n      ? geojson.geometry\n      : geojson;\n    featureProperties = isFeatureCollection\n      ? geojson.features[i].properties\n      : isFeature\n      ? geojson.properties\n      : {};\n    featureBBox = isFeatureCollection\n      ? geojson.features[i].bbox\n      : isFeature\n      ? geojson.bbox\n      : undefined;\n    featureId = isFeatureCollection\n      ? geojson.features[i].id\n      : isFeature\n      ? geojson.id\n      : undefined;\n    isGeometryCollection = geometryMaybeCollection\n      ? geometryMaybeCollection.type === \"GeometryCollection\"\n      : false;\n    stopG = isGeometryCollection\n      ? geometryMaybeCollection.geometries.length\n      : 1;\n\n    for (g = 0; g < stopG; g++) {\n      geometry = isGeometryCollection\n        ? geometryMaybeCollection.geometries[g]\n        : geometryMaybeCollection;\n\n      // Handle null Geometry\n      if (geometry === null) {\n        if (\n          callback(\n            null,\n            featureIndex,\n            featureProperties,\n            featureBBox,\n            featureId\n          ) === false\n        )\n          return false;\n        continue;\n      }\n      switch (geometry.type) {\n        case \"Point\":\n        case \"LineString\":\n        case \"MultiPoint\":\n        case \"Polygon\":\n        case \"MultiLineString\":\n        case \"MultiPolygon\": {\n          if (\n            callback(\n              geometry,\n              featureIndex,\n              featureProperties,\n              featureBBox,\n              featureId\n            ) === false\n          )\n            return false;\n          break;\n        }\n        case \"GeometryCollection\": {\n          for (j = 0; j < geometry.geometries.length; j++) {\n            if (\n              callback(\n                geometry.geometries[j],\n                featureIndex,\n                featureProperties,\n                featureBBox,\n                featureId\n              ) === false\n            )\n              return false;\n          }\n          break;\n        }\n        default:\n          throw new Error(\"Unknown Geometry Type\");\n      }\n    }\n    // Only increase `featureIndex` per each feature\n    featureIndex++;\n  }\n}\n\n/**\n * Callback for geomReduce\n *\n * The first time the callback function is called, the values provided as arguments depend\n * on whether the reduce method has an initialValue argument.\n *\n * If an initialValue is provided to the reduce method:\n *  - The previousValue argument is initialValue.\n *  - The currentValue argument is the value of the first element present in the array.\n *\n * If an initialValue is not provided:\n *  - The previousValue argument is the value of the first element present in the array.\n *  - The currentValue argument is the value of the second element present in the array.\n *\n * @callback geomReduceCallback\n * @param {*} previousValue The accumulated value previously returned in the last invocation\n * of the callback, or initialValue, if supplied.\n * @param {Geometry} currentGeometry The current Geometry being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n * @param {Object} featureProperties The current Feature Properties being processed.\n * @param {Array<number>} featureBBox The current Feature BBox being processed.\n * @param {number|string} featureId The current Feature Id being processed.\n */\n\n/**\n * Reduce geometry in any GeoJSON object, similar to Array.reduce().\n *\n * @name geomReduce\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object\n * @param {Function} callback a method that takes (previousValue, currentGeometry, featureIndex, featureProperties, featureBBox, featureId)\n * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.\n * @returns {*} The value that results from the reduction.\n * @example\n * var features = turf.featureCollection([\n *     turf.point([26, 37], {foo: 'bar'}),\n *     turf.point([36, 53], {hello: 'world'})\n * ]);\n *\n * turf.geomReduce(features, function (previousValue, currentGeometry, featureIndex, featureProperties, featureBBox, featureId) {\n *   //=previousValue\n *   //=currentGeometry\n *   //=featureIndex\n *   //=featureProperties\n *   //=featureBBox\n *   //=featureId\n *   return currentGeometry\n * });\n */\nfunction geomReduce(geojson, callback, initialValue) {\n  var previousValue = initialValue;\n  geomEach(\n    geojson,\n    function (\n      currentGeometry,\n      featureIndex,\n      featureProperties,\n      featureBBox,\n      featureId\n    ) {\n      if (featureIndex === 0 && initialValue === undefined)\n        previousValue = currentGeometry;\n      else\n        previousValue = callback(\n          previousValue,\n          currentGeometry,\n          featureIndex,\n          featureProperties,\n          featureBBox,\n          featureId\n        );\n    }\n  );\n  return previousValue;\n}\n\n/**\n * Callback for flattenEach\n *\n * @callback flattenEachCallback\n * @param {Feature} currentFeature The current flattened feature being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed.\n */\n\n/**\n * Iterate over flattened features in any GeoJSON object, similar to\n * Array.forEach.\n *\n * @name flattenEach\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object\n * @param {Function} callback a method that takes (currentFeature, featureIndex, multiFeatureIndex)\n * @example\n * var features = turf.featureCollection([\n *     turf.point([26, 37], {foo: 'bar'}),\n *     turf.multiPoint([[40, 30], [36, 53]], {hello: 'world'})\n * ]);\n *\n * turf.flattenEach(features, function (currentFeature, featureIndex, multiFeatureIndex) {\n *   //=currentFeature\n *   //=featureIndex\n *   //=multiFeatureIndex\n * });\n */\nfunction flattenEach(geojson, callback) {\n  geomEach(geojson, function (geometry, featureIndex, properties, bbox, id) {\n    // Callback for single geometry\n    var type = geometry === null ? null : geometry.type;\n    switch (type) {\n      case null:\n      case \"Point\":\n      case \"LineString\":\n      case \"Polygon\":\n        if (\n          callback(\n            feature(geometry, properties, { bbox: bbox, id: id }),\n            featureIndex,\n            0\n          ) === false\n        )\n          return false;\n        return;\n    }\n\n    var geomType;\n\n    // Callback for multi-geometry\n    switch (type) {\n      case \"MultiPoint\":\n        geomType = \"Point\";\n        break;\n      case \"MultiLineString\":\n        geomType = \"LineString\";\n        break;\n      case \"MultiPolygon\":\n        geomType = \"Polygon\";\n        break;\n    }\n\n    for (\n      var multiFeatureIndex = 0;\n      multiFeatureIndex < geometry.coordinates.length;\n      multiFeatureIndex++\n    ) {\n      var coordinate = geometry.coordinates[multiFeatureIndex];\n      var geom = {\n        type: geomType,\n        coordinates: coordinate,\n      };\n      if (\n        callback(feature(geom, properties), featureIndex, multiFeatureIndex) ===\n        false\n      )\n        return false;\n    }\n  });\n}\n\n/**\n * Callback for flattenReduce\n *\n * The first time the callback function is called, the values provided as arguments depend\n * on whether the reduce method has an initialValue argument.\n *\n * If an initialValue is provided to the reduce method:\n *  - The previousValue argument is initialValue.\n *  - The currentValue argument is the value of the first element present in the array.\n *\n * If an initialValue is not provided:\n *  - The previousValue argument is the value of the first element present in the array.\n *  - The currentValue argument is the value of the second element present in the array.\n *\n * @callback flattenReduceCallback\n * @param {*} previousValue The accumulated value previously returned in the last invocation\n * of the callback, or initialValue, if supplied.\n * @param {Feature} currentFeature The current Feature being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed.\n */\n\n/**\n * Reduce flattened features in any GeoJSON object, similar to Array.reduce().\n *\n * @name flattenReduce\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object\n * @param {Function} callback a method that takes (previousValue, currentFeature, featureIndex, multiFeatureIndex)\n * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.\n * @returns {*} The value that results from the reduction.\n * @example\n * var features = turf.featureCollection([\n *     turf.point([26, 37], {foo: 'bar'}),\n *     turf.multiPoint([[40, 30], [36, 53]], {hello: 'world'})\n * ]);\n *\n * turf.flattenReduce(features, function (previousValue, currentFeature, featureIndex, multiFeatureIndex) {\n *   //=previousValue\n *   //=currentFeature\n *   //=featureIndex\n *   //=multiFeatureIndex\n *   return currentFeature\n * });\n */\nfunction flattenReduce(geojson, callback, initialValue) {\n  var previousValue = initialValue;\n  flattenEach(\n    geojson,\n    function (currentFeature, featureIndex, multiFeatureIndex) {\n      if (\n        featureIndex === 0 &&\n        multiFeatureIndex === 0 &&\n        initialValue === undefined\n      )\n        previousValue = currentFeature;\n      else\n        previousValue = callback(\n          previousValue,\n          currentFeature,\n          featureIndex,\n          multiFeatureIndex\n        );\n    }\n  );\n  return previousValue;\n}\n\n/**\n * Callback for segmentEach\n *\n * @callback segmentEachCallback\n * @param {Feature<LineString>} currentSegment The current Segment being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed.\n * @param {number} geometryIndex The current index of the Geometry being processed.\n * @param {number} segmentIndex The current index of the Segment being processed.\n * @returns {void}\n */\n\n/**\n * Iterate over 2-vertex line segment in any GeoJSON object, similar to Array.forEach()\n * (Multi)Point geometries do not contain segments therefore they are ignored during this operation.\n *\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON\n * @param {Function} callback a method that takes (currentSegment, featureIndex, multiFeatureIndex, geometryIndex, segmentIndex)\n * @returns {void}\n * @example\n * var polygon = turf.polygon([[[-50, 5], [-40, -10], [-50, -10], [-40, 5], [-50, 5]]]);\n *\n * // Iterate over GeoJSON by 2-vertex segments\n * turf.segmentEach(polygon, function (currentSegment, featureIndex, multiFeatureIndex, geometryIndex, segmentIndex) {\n *   //=currentSegment\n *   //=featureIndex\n *   //=multiFeatureIndex\n *   //=geometryIndex\n *   //=segmentIndex\n * });\n *\n * // Calculate the total number of segments\n * var total = 0;\n * turf.segmentEach(polygon, function () {\n *     total++;\n * });\n */\nfunction segmentEach(geojson, callback) {\n  flattenEach(geojson, function (feature, featureIndex, multiFeatureIndex) {\n    var segmentIndex = 0;\n\n    // Exclude null Geometries\n    if (!feature.geometry) return;\n    // (Multi)Point geometries do not contain segments therefore they are ignored during this operation.\n    var type = feature.geometry.type;\n    if (type === \"Point\" || type === \"MultiPoint\") return;\n\n    // Generate 2-vertex line segments\n    var previousCoords;\n    var previousFeatureIndex = 0;\n    var previousMultiIndex = 0;\n    var prevGeomIndex = 0;\n    if (\n      coordEach(\n        feature,\n        function (\n          currentCoord,\n          coordIndex,\n          featureIndexCoord,\n          multiPartIndexCoord,\n          geometryIndex\n        ) {\n          // Simulating a meta.coordReduce() since `reduce` operations cannot be stopped by returning `false`\n          if (\n            previousCoords === undefined ||\n            featureIndex > previousFeatureIndex ||\n            multiPartIndexCoord > previousMultiIndex ||\n            geometryIndex > prevGeomIndex\n          ) {\n            previousCoords = currentCoord;\n            previousFeatureIndex = featureIndex;\n            previousMultiIndex = multiPartIndexCoord;\n            prevGeomIndex = geometryIndex;\n            segmentIndex = 0;\n            return;\n          }\n          var currentSegment = lineString(\n            [previousCoords, currentCoord],\n            feature.properties\n          );\n          if (\n            callback(\n              currentSegment,\n              featureIndex,\n              multiFeatureIndex,\n              geometryIndex,\n              segmentIndex\n            ) === false\n          )\n            return false;\n          segmentIndex++;\n          previousCoords = currentCoord;\n        }\n      ) === false\n    )\n      return false;\n  });\n}\n\n/**\n * Callback for segmentReduce\n *\n * The first time the callback function is called, the values provided as arguments depend\n * on whether the reduce method has an initialValue argument.\n *\n * If an initialValue is provided to the reduce method:\n *  - The previousValue argument is initialValue.\n *  - The currentValue argument is the value of the first element present in the array.\n *\n * If an initialValue is not provided:\n *  - The previousValue argument is the value of the first element present in the array.\n *  - The currentValue argument is the value of the second element present in the array.\n *\n * @callback segmentReduceCallback\n * @param {*} previousValue The accumulated value previously returned in the last invocation\n * of the callback, or initialValue, if supplied.\n * @param {Feature<LineString>} currentSegment The current Segment being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed.\n * @param {number} geometryIndex The current index of the Geometry being processed.\n * @param {number} segmentIndex The current index of the Segment being processed.\n */\n\n/**\n * Reduce 2-vertex line segment in any GeoJSON object, similar to Array.reduce()\n * (Multi)Point geometries do not contain segments therefore they are ignored during this operation.\n *\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON\n * @param {Function} callback a method that takes (previousValue, currentSegment, currentIndex)\n * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.\n * @returns {void}\n * @example\n * var polygon = turf.polygon([[[-50, 5], [-40, -10], [-50, -10], [-40, 5], [-50, 5]]]);\n *\n * // Iterate over GeoJSON by 2-vertex segments\n * turf.segmentReduce(polygon, function (previousSegment, currentSegment, featureIndex, multiFeatureIndex, geometryIndex, segmentIndex) {\n *   //= previousSegment\n *   //= currentSegment\n *   //= featureIndex\n *   //= multiFeatureIndex\n *   //= geometryIndex\n *   //= segmentIndex\n *   return currentSegment\n * });\n *\n * // Calculate the total number of segments\n * var initialValue = 0\n * var total = turf.segmentReduce(polygon, function (previousValue) {\n *     previousValue++;\n *     return previousValue;\n * }, initialValue);\n */\nfunction segmentReduce(geojson, callback, initialValue) {\n  var previousValue = initialValue;\n  var started = false;\n  segmentEach(\n    geojson,\n    function (\n      currentSegment,\n      featureIndex,\n      multiFeatureIndex,\n      geometryIndex,\n      segmentIndex\n    ) {\n      if (started === false && initialValue === undefined)\n        previousValue = currentSegment;\n      else\n        previousValue = callback(\n          previousValue,\n          currentSegment,\n          featureIndex,\n          multiFeatureIndex,\n          geometryIndex,\n          segmentIndex\n        );\n      started = true;\n    }\n  );\n  return previousValue;\n}\n\n/**\n * Callback for lineEach\n *\n * @callback lineEachCallback\n * @param {Feature<LineString>} currentLine The current LineString|LinearRing being processed\n * @param {number} featureIndex The current index of the Feature being processed\n * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed\n * @param {number} geometryIndex The current index of the Geometry being processed\n */\n\n/**\n * Iterate over line or ring coordinates in LineString, Polygon, MultiLineString, MultiPolygon Features or Geometries,\n * similar to Array.forEach.\n *\n * @name lineEach\n * @param {Geometry|Feature<LineString|Polygon|MultiLineString|MultiPolygon>} geojson object\n * @param {Function} callback a method that takes (currentLine, featureIndex, multiFeatureIndex, geometryIndex)\n * @example\n * var multiLine = turf.multiLineString([\n *   [[26, 37], [35, 45]],\n *   [[36, 53], [38, 50], [41, 55]]\n * ]);\n *\n * turf.lineEach(multiLine, function (currentLine, featureIndex, multiFeatureIndex, geometryIndex) {\n *   //=currentLine\n *   //=featureIndex\n *   //=multiFeatureIndex\n *   //=geometryIndex\n * });\n */\nfunction lineEach(geojson, callback) {\n  // validation\n  if (!geojson) throw new Error(\"geojson is required\");\n\n  flattenEach(geojson, function (feature, featureIndex, multiFeatureIndex) {\n    if (feature.geometry === null) return;\n    var type = feature.geometry.type;\n    var coords = feature.geometry.coordinates;\n    switch (type) {\n      case \"LineString\":\n        if (callback(feature, featureIndex, multiFeatureIndex, 0, 0) === false)\n          return false;\n        break;\n      case \"Polygon\":\n        for (\n          var geometryIndex = 0;\n          geometryIndex < coords.length;\n          geometryIndex++\n        ) {\n          if (\n            callback(\n              lineString(coords[geometryIndex], feature.properties),\n              featureIndex,\n              multiFeatureIndex,\n              geometryIndex\n            ) === false\n          )\n            return false;\n        }\n        break;\n    }\n  });\n}\n\n/**\n * Callback for lineReduce\n *\n * The first time the callback function is called, the values provided as arguments depend\n * on whether the reduce method has an initialValue argument.\n *\n * If an initialValue is provided to the reduce method:\n *  - The previousValue argument is initialValue.\n *  - The currentValue argument is the value of the first element present in the array.\n *\n * If an initialValue is not provided:\n *  - The previousValue argument is the value of the first element present in the array.\n *  - The currentValue argument is the value of the second element present in the array.\n *\n * @callback lineReduceCallback\n * @param {*} previousValue The accumulated value previously returned in the last invocation\n * of the callback, or initialValue, if supplied.\n * @param {Feature<LineString>} currentLine The current LineString|LinearRing being processed.\n * @param {number} featureIndex The current index of the Feature being processed\n * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed\n * @param {number} geometryIndex The current index of the Geometry being processed\n */\n\n/**\n * Reduce features in any GeoJSON object, similar to Array.reduce().\n *\n * @name lineReduce\n * @param {Geometry|Feature<LineString|Polygon|MultiLineString|MultiPolygon>} geojson object\n * @param {Function} callback a method that takes (previousValue, currentLine, featureIndex, multiFeatureIndex, geometryIndex)\n * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.\n * @returns {*} The value that results from the reduction.\n * @example\n * var multiPoly = turf.multiPolygon([\n *   turf.polygon([[[12,48],[2,41],[24,38],[12,48]], [[9,44],[13,41],[13,45],[9,44]]]),\n *   turf.polygon([[[5, 5], [0, 0], [2, 2], [4, 4], [5, 5]]])\n * ]);\n *\n * turf.lineReduce(multiPoly, function (previousValue, currentLine, featureIndex, multiFeatureIndex, geometryIndex) {\n *   //=previousValue\n *   //=currentLine\n *   //=featureIndex\n *   //=multiFeatureIndex\n *   //=geometryIndex\n *   return currentLine\n * });\n */\nfunction lineReduce(geojson, callback, initialValue) {\n  var previousValue = initialValue;\n  lineEach(\n    geojson,\n    function (currentLine, featureIndex, multiFeatureIndex, geometryIndex) {\n      if (featureIndex === 0 && initialValue === undefined)\n        previousValue = currentLine;\n      else\n        previousValue = callback(\n          previousValue,\n          currentLine,\n          featureIndex,\n          multiFeatureIndex,\n          geometryIndex\n        );\n    }\n  );\n  return previousValue;\n}\n\n/**\n * Finds a particular 2-vertex LineString Segment from a GeoJSON using `@turf/meta` indexes.\n *\n * Negative indexes are permitted.\n * Point & MultiPoint will always return null.\n *\n * @param {FeatureCollection|Feature|Geometry} geojson Any GeoJSON Feature or Geometry\n * @param {Object} [options={}] Optional parameters\n * @param {number} [options.featureIndex=0] Feature Index\n * @param {number} [options.multiFeatureIndex=0] Multi-Feature Index\n * @param {number} [options.geometryIndex=0] Geometry Index\n * @param {number} [options.segmentIndex=0] Segment Index\n * @param {Object} [options.properties={}] Translate Properties to output LineString\n * @param {BBox} [options.bbox={}] Translate BBox to output LineString\n * @param {number|string} [options.id={}] Translate Id to output LineString\n * @returns {Feature<LineString>} 2-vertex GeoJSON Feature LineString\n * @example\n * var multiLine = turf.multiLineString([\n *     [[10, 10], [50, 30], [30, 40]],\n *     [[-10, -10], [-50, -30], [-30, -40]]\n * ]);\n *\n * // First Segment (defaults are 0)\n * turf.findSegment(multiLine);\n * // => Feature<LineString<[[10, 10], [50, 30]]>>\n *\n * // First Segment of 2nd Multi Feature\n * turf.findSegment(multiLine, {multiFeatureIndex: 1});\n * // => Feature<LineString<[[-10, -10], [-50, -30]]>>\n *\n * // Last Segment of Last Multi Feature\n * turf.findSegment(multiLine, {multiFeatureIndex: -1, segmentIndex: -1});\n * // => Feature<LineString<[[-50, -30], [-30, -40]]>>\n */\nfunction findSegment(geojson, options) {\n  // Optional Parameters\n  options = options || {};\n  if (!isObject(options)) throw new Error(\"options is invalid\");\n  var featureIndex = options.featureIndex || 0;\n  var multiFeatureIndex = options.multiFeatureIndex || 0;\n  var geometryIndex = options.geometryIndex || 0;\n  var segmentIndex = options.segmentIndex || 0;\n\n  // Find FeatureIndex\n  var properties = options.properties;\n  var geometry;\n\n  switch (geojson.type) {\n    case \"FeatureCollection\":\n      if (featureIndex < 0)\n        featureIndex = geojson.features.length + featureIndex;\n      properties = properties || geojson.features[featureIndex].properties;\n      geometry = geojson.features[featureIndex].geometry;\n      break;\n    case \"Feature\":\n      properties = properties || geojson.properties;\n      geometry = geojson.geometry;\n      break;\n    case \"Point\":\n    case \"MultiPoint\":\n      return null;\n    case \"LineString\":\n    case \"Polygon\":\n    case \"MultiLineString\":\n    case \"MultiPolygon\":\n      geometry = geojson;\n      break;\n    default:\n      throw new Error(\"geojson is invalid\");\n  }\n\n  // Find SegmentIndex\n  if (geometry === null) return null;\n  var coords = geometry.coordinates;\n  switch (geometry.type) {\n    case \"Point\":\n    case \"MultiPoint\":\n      return null;\n    case \"LineString\":\n      if (segmentIndex < 0) segmentIndex = coords.length + segmentIndex - 1;\n      return lineString(\n        [coords[segmentIndex], coords[segmentIndex + 1]],\n        properties,\n        options\n      );\n    case \"Polygon\":\n      if (geometryIndex < 0) geometryIndex = coords.length + geometryIndex;\n      if (segmentIndex < 0)\n        segmentIndex = coords[geometryIndex].length + segmentIndex - 1;\n      return lineString(\n        [\n          coords[geometryIndex][segmentIndex],\n          coords[geometryIndex][segmentIndex + 1],\n        ],\n        properties,\n        options\n      );\n    case \"MultiLineString\":\n      if (multiFeatureIndex < 0)\n        multiFeatureIndex = coords.length + multiFeatureIndex;\n      if (segmentIndex < 0)\n        segmentIndex = coords[multiFeatureIndex].length + segmentIndex - 1;\n      return lineString(\n        [\n          coords[multiFeatureIndex][segmentIndex],\n          coords[multiFeatureIndex][segmentIndex + 1],\n        ],\n        properties,\n        options\n      );\n    case \"MultiPolygon\":\n      if (multiFeatureIndex < 0)\n        multiFeatureIndex = coords.length + multiFeatureIndex;\n      if (geometryIndex < 0)\n        geometryIndex = coords[multiFeatureIndex].length + geometryIndex;\n      if (segmentIndex < 0)\n        segmentIndex =\n          coords[multiFeatureIndex][geometryIndex].length - segmentIndex - 1;\n      return lineString(\n        [\n          coords[multiFeatureIndex][geometryIndex][segmentIndex],\n          coords[multiFeatureIndex][geometryIndex][segmentIndex + 1],\n        ],\n        properties,\n        options\n      );\n  }\n  throw new Error(\"geojson is invalid\");\n}\n\n/**\n * Finds a particular Point from a GeoJSON using `@turf/meta` indexes.\n *\n * Negative indexes are permitted.\n *\n * @param {FeatureCollection|Feature|Geometry} geojson Any GeoJSON Feature or Geometry\n * @param {Object} [options={}] Optional parameters\n * @param {number} [options.featureIndex=0] Feature Index\n * @param {number} [options.multiFeatureIndex=0] Multi-Feature Index\n * @param {number} [options.geometryIndex=0] Geometry Index\n * @param {number} [options.coordIndex=0] Coord Index\n * @param {Object} [options.properties={}] Translate Properties to output Point\n * @param {BBox} [options.bbox={}] Translate BBox to output Point\n * @param {number|string} [options.id={}] Translate Id to output Point\n * @returns {Feature<Point>} 2-vertex GeoJSON Feature Point\n * @example\n * var multiLine = turf.multiLineString([\n *     [[10, 10], [50, 30], [30, 40]],\n *     [[-10, -10], [-50, -30], [-30, -40]]\n * ]);\n *\n * // First Segment (defaults are 0)\n * turf.findPoint(multiLine);\n * // => Feature<Point<[10, 10]>>\n *\n * // First Segment of the 2nd Multi-Feature\n * turf.findPoint(multiLine, {multiFeatureIndex: 1});\n * // => Feature<Point<[-10, -10]>>\n *\n * // Last Segment of last Multi-Feature\n * turf.findPoint(multiLine, {multiFeatureIndex: -1, coordIndex: -1});\n * // => Feature<Point<[-30, -40]>>\n */\nfunction findPoint(geojson, options) {\n  // Optional Parameters\n  options = options || {};\n  if (!isObject(options)) throw new Error(\"options is invalid\");\n  var featureIndex = options.featureIndex || 0;\n  var multiFeatureIndex = options.multiFeatureIndex || 0;\n  var geometryIndex = options.geometryIndex || 0;\n  var coordIndex = options.coordIndex || 0;\n\n  // Find FeatureIndex\n  var properties = options.properties;\n  var geometry;\n\n  switch (geojson.type) {\n    case \"FeatureCollection\":\n      if (featureIndex < 0)\n        featureIndex = geojson.features.length + featureIndex;\n      properties = properties || geojson.features[featureIndex].properties;\n      geometry = geojson.features[featureIndex].geometry;\n      break;\n    case \"Feature\":\n      properties = properties || geojson.properties;\n      geometry = geojson.geometry;\n      break;\n    case \"Point\":\n    case \"MultiPoint\":\n      return null;\n    case \"LineString\":\n    case \"Polygon\":\n    case \"MultiLineString\":\n    case \"MultiPolygon\":\n      geometry = geojson;\n      break;\n    default:\n      throw new Error(\"geojson is invalid\");\n  }\n\n  // Find Coord Index\n  if (geometry === null) return null;\n  var coords = geometry.coordinates;\n  switch (geometry.type) {\n    case \"Point\":\n      return point(coords, properties, options);\n    case \"MultiPoint\":\n      if (multiFeatureIndex < 0)\n        multiFeatureIndex = coords.length + multiFeatureIndex;\n      return point(coords[multiFeatureIndex], properties, options);\n    case \"LineString\":\n      if (coordIndex < 0) coordIndex = coords.length + coordIndex;\n      return point(coords[coordIndex], properties, options);\n    case \"Polygon\":\n      if (geometryIndex < 0) geometryIndex = coords.length + geometryIndex;\n      if (coordIndex < 0)\n        coordIndex = coords[geometryIndex].length + coordIndex;\n      return point(coords[geometryIndex][coordIndex], properties, options);\n    case \"MultiLineString\":\n      if (multiFeatureIndex < 0)\n        multiFeatureIndex = coords.length + multiFeatureIndex;\n      if (coordIndex < 0)\n        coordIndex = coords[multiFeatureIndex].length + coordIndex;\n      return point(coords[multiFeatureIndex][coordIndex], properties, options);\n    case \"MultiPolygon\":\n      if (multiFeatureIndex < 0)\n        multiFeatureIndex = coords.length + multiFeatureIndex;\n      if (geometryIndex < 0)\n        geometryIndex = coords[multiFeatureIndex].length + geometryIndex;\n      if (coordIndex < 0)\n        coordIndex =\n          coords[multiFeatureIndex][geometryIndex].length - coordIndex;\n      return point(\n        coords[multiFeatureIndex][geometryIndex][coordIndex],\n        properties,\n        options\n      );\n  }\n  throw new Error(\"geojson is invalid\");\n}\n\nexport { coordAll, coordEach, coordReduce, featureEach, featureReduce, findPoint, findSegment, flattenEach, flattenReduce, geomEach, geomReduce, lineEach, lineReduce, propEach, propReduce, segmentEach, segmentReduce };\n","import { coordEach } from \"@turf/meta\";\n/**\n * Takes a set of features, calculates the bbox of all input features, and returns a bounding box.\n *\n * @name bbox\n * @param {GeoJSON} geojson any GeoJSON object\n * @returns {BBox} bbox extent in [minX, minY, maxX, maxY] order\n * @example\n * var line = turf.lineString([[-74, 40], [-78, 42], [-82, 35]]);\n * var bbox = turf.bbox(line);\n * var bboxPolygon = turf.bboxPolygon(bbox);\n *\n * //addToMap\n * var addToMap = [line, bboxPolygon]\n */\nfunction bbox(geojson) {\n    var result = [Infinity, Infinity, -Infinity, -Infinity];\n    coordEach(geojson, function (coord) {\n        if (result[0] > coord[0]) {\n            result[0] = coord[0];\n        }\n        if (result[1] > coord[1]) {\n            result[1] = coord[1];\n        }\n        if (result[2] < coord[0]) {\n            result[2] = coord[0];\n        }\n        if (result[3] < coord[1]) {\n            result[3] = coord[1];\n        }\n    });\n    return result;\n}\nbbox[\"default\"] = bbox;\nexport default bbox;\n","import { isNumber, } from \"@turf/helpers\";\n/**\n * Unwrap a coordinate from a Point Feature, Geometry or a single coordinate.\n *\n * @name getCoord\n * @param {Array<number>|Geometry<Point>|Feature<Point>} coord GeoJSON Point or an Array of numbers\n * @returns {Array<number>} coordinates\n * @example\n * var pt = turf.point([10, 10]);\n *\n * var coord = turf.getCoord(pt);\n * //= [10, 10]\n */\nexport function getCoord(coord) {\n    if (!coord) {\n        throw new Error(\"coord is required\");\n    }\n    if (!Array.isArray(coord)) {\n        if (coord.type === \"Feature\" &&\n            coord.geometry !== null &&\n            coord.geometry.type === \"Point\") {\n            return coord.geometry.coordinates;\n        }\n        if (coord.type === \"Point\") {\n            return coord.coordinates;\n        }\n    }\n    if (Array.isArray(coord) &&\n        coord.length >= 2 &&\n        !Array.isArray(coord[0]) &&\n        !Array.isArray(coord[1])) {\n        return coord;\n    }\n    throw new Error(\"coord must be GeoJSON Point or an Array of numbers\");\n}\n/**\n * Unwrap coordinates from a Feature, Geometry Object or an Array\n *\n * @name getCoords\n * @param {Array<any>|Geometry|Feature} coords Feature, Geometry Object or an Array\n * @returns {Array<any>} coordinates\n * @example\n * var poly = turf.polygon([[[119.32, -8.7], [119.55, -8.69], [119.51, -8.54], [119.32, -8.7]]]);\n *\n * var coords = turf.getCoords(poly);\n * //= [[[119.32, -8.7], [119.55, -8.69], [119.51, -8.54], [119.32, -8.7]]]\n */\nexport function getCoords(coords) {\n    if (Array.isArray(coords)) {\n        return coords;\n    }\n    // Feature\n    if (coords.type === \"Feature\") {\n        if (coords.geometry !== null) {\n            return coords.geometry.coordinates;\n        }\n    }\n    else {\n        // Geometry\n        if (coords.coordinates) {\n            return coords.coordinates;\n        }\n    }\n    throw new Error(\"coords must be GeoJSON Feature, Geometry Object or an Array\");\n}\n/**\n * Checks if coordinates contains a number\n *\n * @name containsNumber\n * @param {Array<any>} coordinates GeoJSON Coordinates\n * @returns {boolean} true if Array contains a number\n */\nexport function containsNumber(coordinates) {\n    if (coordinates.length > 1 &&\n        isNumber(coordinates[0]) &&\n        isNumber(coordinates[1])) {\n        return true;\n    }\n    if (Array.isArray(coordinates[0]) && coordinates[0].length) {\n        return containsNumber(coordinates[0]);\n    }\n    throw new Error(\"coordinates must only contain numbers\");\n}\n/**\n * Enforce expectations about types of GeoJSON objects for Turf.\n *\n * @name geojsonType\n * @param {GeoJSON} value any GeoJSON object\n * @param {string} type expected GeoJSON type\n * @param {string} name name of calling function\n * @throws {Error} if value is not the expected type.\n */\nexport function geojsonType(value, type, name) {\n    if (!type || !name) {\n        throw new Error(\"type and name required\");\n    }\n    if (!value || value.type !== type) {\n        throw new Error(\"Invalid input to \" +\n            name +\n            \": must be a \" +\n            type +\n            \", given \" +\n            value.type);\n    }\n}\n/**\n * Enforce expectations about types of {@link Feature} inputs for Turf.\n * Internally this uses {@link geojsonType} to judge geometry types.\n *\n * @name featureOf\n * @param {Feature} feature a feature with an expected geometry type\n * @param {string} type expected GeoJSON type\n * @param {string} name name of calling function\n * @throws {Error} error if value is not the expected type.\n */\nexport function featureOf(feature, type, name) {\n    if (!feature) {\n        throw new Error(\"No feature passed\");\n    }\n    if (!name) {\n        throw new Error(\".featureOf() requires a name\");\n    }\n    if (!feature || feature.type !== \"Feature\" || !feature.geometry) {\n        throw new Error(\"Invalid input to \" + name + \", Feature with geometry required\");\n    }\n    if (!feature.geometry || feature.geometry.type !== type) {\n        throw new Error(\"Invalid input to \" +\n            name +\n            \": must be a \" +\n            type +\n            \", given \" +\n            feature.geometry.type);\n    }\n}\n/**\n * Enforce expectations about types of {@link FeatureCollection} inputs for Turf.\n * Internally this uses {@link geojsonType} to judge geometry types.\n *\n * @name collectionOf\n * @param {FeatureCollection} featureCollection a FeatureCollection for which features will be judged\n * @param {string} type expected GeoJSON type\n * @param {string} name name of calling function\n * @throws {Error} if value is not the expected type.\n */\nexport function collectionOf(featureCollection, type, name) {\n    if (!featureCollection) {\n        throw new Error(\"No featureCollection passed\");\n    }\n    if (!name) {\n        throw new Error(\".collectionOf() requires a name\");\n    }\n    if (!featureCollection || featureCollection.type !== \"FeatureCollection\") {\n        throw new Error(\"Invalid input to \" + name + \", FeatureCollection required\");\n    }\n    for (var _i = 0, _a = featureCollection.features; _i < _a.length; _i++) {\n        var feature = _a[_i];\n        if (!feature || feature.type !== \"Feature\" || !feature.geometry) {\n            throw new Error(\"Invalid input to \" + name + \", Feature with geometry required\");\n        }\n        if (!feature.geometry || feature.geometry.type !== type) {\n            throw new Error(\"Invalid input to \" +\n                name +\n                \": must be a \" +\n                type +\n                \", given \" +\n                feature.geometry.type);\n        }\n    }\n}\n/**\n * Get Geometry from Feature or Geometry Object\n *\n * @param {Feature|Geometry} geojson GeoJSON Feature or Geometry Object\n * @returns {Geometry|null} GeoJSON Geometry Object\n * @throws {Error} if geojson is not a Feature or Geometry Object\n * @example\n * var point = {\n *   \"type\": \"Feature\",\n *   \"properties\": {},\n *   \"geometry\": {\n *     \"type\": \"Point\",\n *     \"coordinates\": [110, 40]\n *   }\n * }\n * var geom = turf.getGeom(point)\n * //={\"type\": \"Point\", \"coordinates\": [110, 40]}\n */\nexport function getGeom(geojson) {\n    if (geojson.type === \"Feature\") {\n        return geojson.geometry;\n    }\n    return geojson;\n}\n/**\n * Get GeoJSON object's type, Geometry type is prioritize.\n *\n * @param {GeoJSON} geojson GeoJSON object\n * @param {string} [name=\"geojson\"] name of the variable to display in error message (unused)\n * @returns {string} GeoJSON type\n * @example\n * var point = {\n *   \"type\": \"Feature\",\n *   \"properties\": {},\n *   \"geometry\": {\n *     \"type\": \"Point\",\n *     \"coordinates\": [110, 40]\n *   }\n * }\n * var geom = turf.getType(point)\n * //=\"Point\"\n */\nexport function getType(geojson, _name) {\n    if (geojson.type === \"FeatureCollection\") {\n        return \"FeatureCollection\";\n    }\n    if (geojson.type === \"GeometryCollection\") {\n        return \"GeometryCollection\";\n    }\n    if (geojson.type === \"Feature\" && geojson.geometry !== null) {\n        return geojson.geometry.type;\n    }\n    return geojson.type;\n}\n","import { getCoord, getGeom } from \"@turf/invariant\";\n// http://en.wikipedia.org/wiki/Even%E2%80%93odd_rule\n// modified from: https://github.com/substack/point-in-polygon/blob/master/index.js\n// which was modified from http://www.ecse.rpi.edu/Homepages/wrf/Research/Short_Notes/pnpoly.html\n/**\n * Takes a {@link Point} and a {@link Polygon} or {@link MultiPolygon} and determines if the point\n * resides inside the polygon. The polygon can be convex or concave. The function accounts for holes.\n *\n * @name booleanPointInPolygon\n * @param {Coord} point input point\n * @param {Feature<Polygon|MultiPolygon>} polygon input polygon or multipolygon\n * @param {Object} [options={}] Optional parameters\n * @param {boolean} [options.ignoreBoundary=false] True if polygon boundary should be ignored when determining if\n * the point is inside the polygon otherwise false.\n * @returns {boolean} `true` if the Point is inside the Polygon; `false` if the Point is not inside the Polygon\n * @example\n * var pt = turf.point([-77, 44]);\n * var poly = turf.polygon([[\n *   [-81, 41],\n *   [-81, 47],\n *   [-72, 47],\n *   [-72, 41],\n *   [-81, 41]\n * ]]);\n *\n * turf.booleanPointInPolygon(pt, poly);\n * //= true\n */\nexport default function booleanPointInPolygon(point, polygon, options) {\n    if (options === void 0) { options = {}; }\n    // validation\n    if (!point) {\n        throw new Error(\"point is required\");\n    }\n    if (!polygon) {\n        throw new Error(\"polygon is required\");\n    }\n    var pt = getCoord(point);\n    var geom = getGeom(polygon);\n    var type = geom.type;\n    var bbox = polygon.bbox;\n    var polys = geom.coordinates;\n    // Quick elimination if point is not inside bbox\n    if (bbox && inBBox(pt, bbox) === false) {\n        return false;\n    }\n    // normalize to multipolygon\n    if (type === \"Polygon\") {\n        polys = [polys];\n    }\n    var insidePoly = false;\n    for (var i = 0; i < polys.length && !insidePoly; i++) {\n        // check if it is in the outer ring first\n        if (inRing(pt, polys[i][0], options.ignoreBoundary)) {\n            var inHole = false;\n            var k = 1;\n            // check for the point in any of the holes\n            while (k < polys[i].length && !inHole) {\n                if (inRing(pt, polys[i][k], !options.ignoreBoundary)) {\n                    inHole = true;\n                }\n                k++;\n            }\n            if (!inHole) {\n                insidePoly = true;\n            }\n        }\n    }\n    return insidePoly;\n}\n/**\n * inRing\n *\n * @private\n * @param {Array<number>} pt [x,y]\n * @param {Array<Array<number>>} ring [[x,y], [x,y],..]\n * @param {boolean} ignoreBoundary ignoreBoundary\n * @returns {boolean} inRing\n */\nfunction inRing(pt, ring, ignoreBoundary) {\n    var isInside = false;\n    if (ring[0][0] === ring[ring.length - 1][0] &&\n        ring[0][1] === ring[ring.length - 1][1]) {\n        ring = ring.slice(0, ring.length - 1);\n    }\n    for (var i = 0, j = ring.length - 1; i < ring.length; j = i++) {\n        var xi = ring[i][0];\n        var yi = ring[i][1];\n        var xj = ring[j][0];\n        var yj = ring[j][1];\n        var onBoundary = pt[1] * (xi - xj) + yi * (xj - pt[0]) + yj * (pt[0] - xi) === 0 &&\n            (xi - pt[0]) * (xj - pt[0]) <= 0 &&\n            (yi - pt[1]) * (yj - pt[1]) <= 0;\n        if (onBoundary) {\n            return !ignoreBoundary;\n        }\n        var intersect = yi > pt[1] !== yj > pt[1] &&\n            pt[0] < ((xj - xi) * (pt[1] - yi)) / (yj - yi) + xi;\n        if (intersect) {\n            isInside = !isInside;\n        }\n    }\n    return isInside;\n}\n/**\n * inBBox\n *\n * @private\n * @param {Position} pt point [x,y]\n * @param {BBox} bbox BBox [west, south, east, north]\n * @returns {boolean} true/false if point is inside BBox\n */\nfunction inBBox(pt, bbox) {\n    return (bbox[0] <= pt[0] && bbox[1] <= pt[1] && bbox[2] >= pt[0] && bbox[3] >= pt[1]);\n}\n","import { featureCollection, lineString, } from \"@turf/helpers\";\nimport { getCoords } from \"@turf/invariant\";\nimport { flattenEach } from \"@turf/meta\";\n/**\n * Creates a {@link FeatureCollection} of 2-vertex {@link LineString} segments from a\n * {@link LineString|(Multi)LineString} or {@link Polygon|(Multi)Polygon}.\n *\n * @name lineSegment\n * @param {GeoJSON} geojson GeoJSON Polygon or LineString\n * @returns {FeatureCollection<LineString>} 2-vertex line segments\n * @example\n * var polygon = turf.polygon([[[-50, 5], [-40, -10], [-50, -10], [-40, 5], [-50, 5]]]);\n * var segments = turf.lineSegment(polygon);\n *\n * //addToMap\n * var addToMap = [polygon, segments]\n */\nfunction lineSegment(geojson) {\n    if (!geojson) {\n        throw new Error(\"geojson is required\");\n    }\n    var results = [];\n    flattenEach(geojson, function (feature) {\n        lineSegmentFeature(feature, results);\n    });\n    return featureCollection(results);\n}\n/**\n * Line Segment\n *\n * @private\n * @param {Feature<LineString|Polygon>} geojson Line or polygon feature\n * @param {Array} results push to results\n * @returns {void}\n */\nfunction lineSegmentFeature(geojson, results) {\n    var coords = [];\n    var geometry = geojson.geometry;\n    if (geometry !== null) {\n        switch (geometry.type) {\n            case \"Polygon\":\n                coords = getCoords(geometry);\n                break;\n            case \"LineString\":\n                coords = [getCoords(geometry)];\n        }\n        coords.forEach(function (coord) {\n            var segments = createSegments(coord, geojson.properties);\n            segments.forEach(function (segment) {\n                segment.id = results.length;\n                results.push(segment);\n            });\n        });\n    }\n}\n/**\n * Create Segments from LineString coordinates\n *\n * @private\n * @param {Array<Array<number>>} coords LineString coordinates\n * @param {*} properties GeoJSON properties\n * @returns {Array<Feature<LineString>>} line segments\n */\nfunction createSegments(coords, properties) {\n    var segments = [];\n    coords.reduce(function (previousCoords, currentCoords) {\n        var segment = lineString([previousCoords, currentCoords], properties);\n        segment.bbox = bbox(previousCoords, currentCoords);\n        segments.push(segment);\n        return currentCoords;\n    });\n    return segments;\n}\n/**\n * Create BBox between two coordinates (faster than @turf/bbox)\n *\n * @private\n * @param {Array<number>} coords1 Point coordinate\n * @param {Array<number>} coords2 Point coordinate\n * @returns {BBox} [west, south, east, north]\n */\nfunction bbox(coords1, coords2) {\n    var x1 = coords1[0];\n    var y1 = coords1[1];\n    var x2 = coords2[0];\n    var y2 = coords2[1];\n    var west = x1 < x2 ? x1 : x2;\n    var south = y1 < y2 ? y1 : y2;\n    var east = x1 > x2 ? x1 : x2;\n    var north = y1 > y2 ? y1 : y2;\n    return [west, south, east, north];\n}\nexport default lineSegment;\n","\nexport default function quickselect(arr, k, left, right, compare) {\n    quickselectStep(arr, k, left || 0, right || (arr.length - 1), compare || defaultCompare);\n}\n\nfunction quickselectStep(arr, k, left, right, compare) {\n\n    while (right > left) {\n        if (right - left > 600) {\n            var n = right - left + 1;\n            var m = k - left + 1;\n            var z = Math.log(n);\n            var s = 0.5 * Math.exp(2 * z / 3);\n            var sd = 0.5 * Math.sqrt(z * s * (n - s) / n) * (m - n / 2 < 0 ? -1 : 1);\n            var newLeft = Math.max(left, Math.floor(k - m * s / n + sd));\n            var newRight = Math.min(right, Math.floor(k + (n - m) * s / n + sd));\n            quickselectStep(arr, k, newLeft, newRight, compare);\n        }\n\n        var t = arr[k];\n        var i = left;\n        var j = right;\n\n        swap(arr, left, k);\n        if (compare(arr[right], t) > 0) swap(arr, left, right);\n\n        while (i < j) {\n            swap(arr, i, j);\n            i++;\n            j--;\n            while (compare(arr[i], t) < 0) i++;\n            while (compare(arr[j], t) > 0) j--;\n        }\n\n        if (compare(arr[left], t) === 0) swap(arr, left, j);\n        else {\n            j++;\n            swap(arr, j, right);\n        }\n\n        if (j <= k) left = j + 1;\n        if (k <= j) right = j - 1;\n    }\n}\n\nfunction swap(arr, i, j) {\n    var tmp = arr[i];\n    arr[i] = arr[j];\n    arr[j] = tmp;\n}\n\nfunction defaultCompare(a, b) {\n    return a < b ? -1 : a > b ? 1 : 0;\n}\n","import quickselect from 'quickselect';\n\nexport default class RBush {\n    constructor(maxEntries = 9) {\n        // max entries in a node is 9 by default; min node fill is 40% for best performance\n        this._maxEntries = Math.max(4, maxEntries);\n        this._minEntries = Math.max(2, Math.ceil(this._maxEntries * 0.4));\n        this.clear();\n    }\n\n    all() {\n        return this._all(this.data, []);\n    }\n\n    search(bbox) {\n        let node = this.data;\n        const result = [];\n\n        if (!intersects(bbox, node)) return result;\n\n        const toBBox = this.toBBox;\n        const nodesToSearch = [];\n\n        while (node) {\n            for (let i = 0; i < node.children.length; i++) {\n                const child = node.children[i];\n                const childBBox = node.leaf ? toBBox(child) : child;\n\n                if (intersects(bbox, childBBox)) {\n                    if (node.leaf) result.push(child);\n                    else if (contains(bbox, childBBox)) this._all(child, result);\n                    else nodesToSearch.push(child);\n                }\n            }\n            node = nodesToSearch.pop();\n        }\n\n        return result;\n    }\n\n    collides(bbox) {\n        let node = this.data;\n\n        if (!intersects(bbox, node)) return false;\n\n        const nodesToSearch = [];\n        while (node) {\n            for (let i = 0; i < node.children.length; i++) {\n                const child = node.children[i];\n                const childBBox = node.leaf ? this.toBBox(child) : child;\n\n                if (intersects(bbox, childBBox)) {\n                    if (node.leaf || contains(bbox, childBBox)) return true;\n                    nodesToSearch.push(child);\n                }\n            }\n            node = nodesToSearch.pop();\n        }\n\n        return false;\n    }\n\n    load(data) {\n        if (!(data && data.length)) return this;\n\n        if (data.length < this._minEntries) {\n            for (let i = 0; i < data.length; i++) {\n                this.insert(data[i]);\n            }\n            return this;\n        }\n\n        // recursively build the tree with the given data from scratch using OMT algorithm\n        let node = this._build(data.slice(), 0, data.length - 1, 0);\n\n        if (!this.data.children.length) {\n            // save as is if tree is empty\n            this.data = node;\n\n        } else if (this.data.height === node.height) {\n            // split root if trees have the same height\n            this._splitRoot(this.data, node);\n\n        } else {\n            if (this.data.height < node.height) {\n                // swap trees if inserted one is bigger\n                const tmpNode = this.data;\n                this.data = node;\n                node = tmpNode;\n            }\n\n            // insert the small tree into the large tree at appropriate level\n            this._insert(node, this.data.height - node.height - 1, true);\n        }\n\n        return this;\n    }\n\n    insert(item) {\n        if (item) this._insert(item, this.data.height - 1);\n        return this;\n    }\n\n    clear() {\n        this.data = createNode([]);\n        return this;\n    }\n\n    remove(item, equalsFn) {\n        if (!item) return this;\n\n        let node = this.data;\n        const bbox = this.toBBox(item);\n        const path = [];\n        const indexes = [];\n        let i, parent, goingUp;\n\n        // depth-first iterative tree traversal\n        while (node || path.length) {\n\n            if (!node) { // go up\n                node = path.pop();\n                parent = path[path.length - 1];\n                i = indexes.pop();\n                goingUp = true;\n            }\n\n            if (node.leaf) { // check current node\n                const index = findItem(item, node.children, equalsFn);\n\n                if (index !== -1) {\n                    // item found, remove the item and condense tree upwards\n                    node.children.splice(index, 1);\n                    path.push(node);\n                    this._condense(path);\n                    return this;\n                }\n            }\n\n            if (!goingUp && !node.leaf && contains(node, bbox)) { // go down\n                path.push(node);\n                indexes.push(i);\n                i = 0;\n                parent = node;\n                node = node.children[0];\n\n            } else if (parent) { // go right\n                i++;\n                node = parent.children[i];\n                goingUp = false;\n\n            } else node = null; // nothing found\n        }\n\n        return this;\n    }\n\n    toBBox(item) { return item; }\n\n    compareMinX(a, b) { return a.minX - b.minX; }\n    compareMinY(a, b) { return a.minY - b.minY; }\n\n    toJSON() { return this.data; }\n\n    fromJSON(data) {\n        this.data = data;\n        return this;\n    }\n\n    _all(node, result) {\n        const nodesToSearch = [];\n        while (node) {\n            if (node.leaf) result.push(...node.children);\n            else nodesToSearch.push(...node.children);\n\n            node = nodesToSearch.pop();\n        }\n        return result;\n    }\n\n    _build(items, left, right, height) {\n\n        const N = right - left + 1;\n        let M = this._maxEntries;\n        let node;\n\n        if (N <= M) {\n            // reached leaf level; return leaf\n            node = createNode(items.slice(left, right + 1));\n            calcBBox(node, this.toBBox);\n            return node;\n        }\n\n        if (!height) {\n            // target height of the bulk-loaded tree\n            height = Math.ceil(Math.log(N) / Math.log(M));\n\n            // target number of root entries to maximize storage utilization\n            M = Math.ceil(N / Math.pow(M, height - 1));\n        }\n\n        node = createNode([]);\n        node.leaf = false;\n        node.height = height;\n\n        // split the items into M mostly square tiles\n\n        const N2 = Math.ceil(N / M);\n        const N1 = N2 * Math.ceil(Math.sqrt(M));\n\n        multiSelect(items, left, right, N1, this.compareMinX);\n\n        for (let i = left; i <= right; i += N1) {\n\n            const right2 = Math.min(i + N1 - 1, right);\n\n            multiSelect(items, i, right2, N2, this.compareMinY);\n\n            for (let j = i; j <= right2; j += N2) {\n\n                const right3 = Math.min(j + N2 - 1, right2);\n\n                // pack each entry recursively\n                node.children.push(this._build(items, j, right3, height - 1));\n            }\n        }\n\n        calcBBox(node, this.toBBox);\n\n        return node;\n    }\n\n    _chooseSubtree(bbox, node, level, path) {\n        while (true) {\n            path.push(node);\n\n            if (node.leaf || path.length - 1 === level) break;\n\n            let minArea = Infinity;\n            let minEnlargement = Infinity;\n            let targetNode;\n\n            for (let i = 0; i < node.children.length; i++) {\n                const child = node.children[i];\n                const area = bboxArea(child);\n                const enlargement = enlargedArea(bbox, child) - area;\n\n                // choose entry with the least area enlargement\n                if (enlargement < minEnlargement) {\n                    minEnlargement = enlargement;\n                    minArea = area < minArea ? area : minArea;\n                    targetNode = child;\n\n                } else if (enlargement === minEnlargement) {\n                    // otherwise choose one with the smallest area\n                    if (area < minArea) {\n                        minArea = area;\n                        targetNode = child;\n                    }\n                }\n            }\n\n            node = targetNode || node.children[0];\n        }\n\n        return node;\n    }\n\n    _insert(item, level, isNode) {\n        const bbox = isNode ? item : this.toBBox(item);\n        const insertPath = [];\n\n        // find the best node for accommodating the item, saving all nodes along the path too\n        const node = this._chooseSubtree(bbox, this.data, level, insertPath);\n\n        // put the item into the node\n        node.children.push(item);\n        extend(node, bbox);\n\n        // split on node overflow; propagate upwards if necessary\n        while (level >= 0) {\n            if (insertPath[level].children.length > this._maxEntries) {\n                this._split(insertPath, level);\n                level--;\n            } else break;\n        }\n\n        // adjust bboxes along the insertion path\n        this._adjustParentBBoxes(bbox, insertPath, level);\n    }\n\n    // split overflowed node into two\n    _split(insertPath, level) {\n        const node = insertPath[level];\n        const M = node.children.length;\n        const m = this._minEntries;\n\n        this._chooseSplitAxis(node, m, M);\n\n        const splitIndex = this._chooseSplitIndex(node, m, M);\n\n        const newNode = createNode(node.children.splice(splitIndex, node.children.length - splitIndex));\n        newNode.height = node.height;\n        newNode.leaf = node.leaf;\n\n        calcBBox(node, this.toBBox);\n        calcBBox(newNode, this.toBBox);\n\n        if (level) insertPath[level - 1].children.push(newNode);\n        else this._splitRoot(node, newNode);\n    }\n\n    _splitRoot(node, newNode) {\n        // split root node\n        this.data = createNode([node, newNode]);\n        this.data.height = node.height + 1;\n        this.data.leaf = false;\n        calcBBox(this.data, this.toBBox);\n    }\n\n    _chooseSplitIndex(node, m, M) {\n        let index;\n        let minOverlap = Infinity;\n        let minArea = Infinity;\n\n        for (let i = m; i <= M - m; i++) {\n            const bbox1 = distBBox(node, 0, i, this.toBBox);\n            const bbox2 = distBBox(node, i, M, this.toBBox);\n\n            const overlap = intersectionArea(bbox1, bbox2);\n            const area = bboxArea(bbox1) + bboxArea(bbox2);\n\n            // choose distribution with minimum overlap\n            if (overlap < minOverlap) {\n                minOverlap = overlap;\n                index = i;\n\n                minArea = area < minArea ? area : minArea;\n\n            } else if (overlap === minOverlap) {\n                // otherwise choose distribution with minimum area\n                if (area < minArea) {\n                    minArea = area;\n                    index = i;\n                }\n            }\n        }\n\n        return index || M - m;\n    }\n\n    // sorts node children by the best axis for split\n    _chooseSplitAxis(node, m, M) {\n        const compareMinX = node.leaf ? this.compareMinX : compareNodeMinX;\n        const compareMinY = node.leaf ? this.compareMinY : compareNodeMinY;\n        const xMargin = this._allDistMargin(node, m, M, compareMinX);\n        const yMargin = this._allDistMargin(node, m, M, compareMinY);\n\n        // if total distributions margin value is minimal for x, sort by minX,\n        // otherwise it's already sorted by minY\n        if (xMargin < yMargin) node.children.sort(compareMinX);\n    }\n\n    // total margin of all possible split distributions where each node is at least m full\n    _allDistMargin(node, m, M, compare) {\n        node.children.sort(compare);\n\n        const toBBox = this.toBBox;\n        const leftBBox = distBBox(node, 0, m, toBBox);\n        const rightBBox = distBBox(node, M - m, M, toBBox);\n        let margin = bboxMargin(leftBBox) + bboxMargin(rightBBox);\n\n        for (let i = m; i < M - m; i++) {\n            const child = node.children[i];\n            extend(leftBBox, node.leaf ? toBBox(child) : child);\n            margin += bboxMargin(leftBBox);\n        }\n\n        for (let i = M - m - 1; i >= m; i--) {\n            const child = node.children[i];\n            extend(rightBBox, node.leaf ? toBBox(child) : child);\n            margin += bboxMargin(rightBBox);\n        }\n\n        return margin;\n    }\n\n    _adjustParentBBoxes(bbox, path, level) {\n        // adjust bboxes along the given tree path\n        for (let i = level; i >= 0; i--) {\n            extend(path[i], bbox);\n        }\n    }\n\n    _condense(path) {\n        // go through the path, removing empty nodes and updating bboxes\n        for (let i = path.length - 1, siblings; i >= 0; i--) {\n            if (path[i].children.length === 0) {\n                if (i > 0) {\n                    siblings = path[i - 1].children;\n                    siblings.splice(siblings.indexOf(path[i]), 1);\n\n                } else this.clear();\n\n            } else calcBBox(path[i], this.toBBox);\n        }\n    }\n}\n\nfunction findItem(item, items, equalsFn) {\n    if (!equalsFn) return items.indexOf(item);\n\n    for (let i = 0; i < items.length; i++) {\n        if (equalsFn(item, items[i])) return i;\n    }\n    return -1;\n}\n\n// calculate node's bbox from bboxes of its children\nfunction calcBBox(node, toBBox) {\n    distBBox(node, 0, node.children.length, toBBox, node);\n}\n\n// min bounding rectangle of node children from k to p-1\nfunction distBBox(node, k, p, toBBox, destNode) {\n    if (!destNode) destNode = createNode(null);\n    destNode.minX = Infinity;\n    destNode.minY = Infinity;\n    destNode.maxX = -Infinity;\n    destNode.maxY = -Infinity;\n\n    for (let i = k; i < p; i++) {\n        const child = node.children[i];\n        extend(destNode, node.leaf ? toBBox(child) : child);\n    }\n\n    return destNode;\n}\n\nfunction extend(a, b) {\n    a.minX = Math.min(a.minX, b.minX);\n    a.minY = Math.min(a.minY, b.minY);\n    a.maxX = Math.max(a.maxX, b.maxX);\n    a.maxY = Math.max(a.maxY, b.maxY);\n    return a;\n}\n\nfunction compareNodeMinX(a, b) { return a.minX - b.minX; }\nfunction compareNodeMinY(a, b) { return a.minY - b.minY; }\n\nfunction bboxArea(a)   { return (a.maxX - a.minX) * (a.maxY - a.minY); }\nfunction bboxMargin(a) { return (a.maxX - a.minX) + (a.maxY - a.minY); }\n\nfunction enlargedArea(a, b) {\n    return (Math.max(b.maxX, a.maxX) - Math.min(b.minX, a.minX)) *\n           (Math.max(b.maxY, a.maxY) - Math.min(b.minY, a.minY));\n}\n\nfunction intersectionArea(a, b) {\n    const minX = Math.max(a.minX, b.minX);\n    const minY = Math.max(a.minY, b.minY);\n    const maxX = Math.min(a.maxX, b.maxX);\n    const maxY = Math.min(a.maxY, b.maxY);\n\n    return Math.max(0, maxX - minX) *\n           Math.max(0, maxY - minY);\n}\n\nfunction contains(a, b) {\n    return a.minX <= b.minX &&\n           a.minY <= b.minY &&\n           b.maxX <= a.maxX &&\n           b.maxY <= a.maxY;\n}\n\nfunction intersects(a, b) {\n    return b.minX <= a.maxX &&\n           b.minY <= a.maxY &&\n           b.maxX >= a.minX &&\n           b.maxY >= a.minY;\n}\n\nfunction createNode(children) {\n    return {\n        children,\n        height: 1,\n        leaf: true,\n        minX: Infinity,\n        minY: Infinity,\n        maxX: -Infinity,\n        maxY: -Infinity\n    };\n}\n\n// sort an array so that items come in groups of n unsorted items, with groups sorted between each other;\n// combines selection algorithm with binary divide & conquer approach\n\nfunction multiSelect(arr, left, right, n, compare) {\n    const stack = [left, right];\n\n    while (stack.length) {\n        right = stack.pop();\n        left = stack.pop();\n\n        if (right - left <= n) continue;\n\n        const mid = left + Math.ceil((right - left) / n / 2) * n;\n        quickselect(arr, mid, left, right, compare);\n\n        stack.push(left, mid, mid, right);\n    }\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * @module helpers\n */\n/**\n * Earth Radius used with the Harvesine formula and approximates using a spherical (non-ellipsoid) Earth.\n *\n * @memberof helpers\n * @type {number}\n */\nexports.earthRadius = 6371008.8;\n/**\n * Unit of measurement factors using a spherical (non-ellipsoid) earth radius.\n *\n * @memberof helpers\n * @type {Object}\n */\nexports.factors = {\n    centimeters: exports.earthRadius * 100,\n    centimetres: exports.earthRadius * 100,\n    degrees: exports.earthRadius / 111325,\n    feet: exports.earthRadius * 3.28084,\n    inches: exports.earthRadius * 39.37,\n    kilometers: exports.earthRadius / 1000,\n    kilometres: exports.earthRadius / 1000,\n    meters: exports.earthRadius,\n    metres: exports.earthRadius,\n    miles: exports.earthRadius / 1609.344,\n    millimeters: exports.earthRadius * 1000,\n    millimetres: exports.earthRadius * 1000,\n    nauticalmiles: exports.earthRadius / 1852,\n    radians: 1,\n    yards: exports.earthRadius * 1.0936,\n};\n/**\n * Units of measurement factors based on 1 meter.\n *\n * @memberof helpers\n * @type {Object}\n */\nexports.unitsFactors = {\n    centimeters: 100,\n    centimetres: 100,\n    degrees: 1 / 111325,\n    feet: 3.28084,\n    inches: 39.37,\n    kilometers: 1 / 1000,\n    kilometres: 1 / 1000,\n    meters: 1,\n    metres: 1,\n    miles: 1 / 1609.344,\n    millimeters: 1000,\n    millimetres: 1000,\n    nauticalmiles: 1 / 1852,\n    radians: 1 / exports.earthRadius,\n    yards: 1.0936133,\n};\n/**\n * Area of measurement factors based on 1 square meter.\n *\n * @memberof helpers\n * @type {Object}\n */\nexports.areaFactors = {\n    acres: 0.000247105,\n    centimeters: 10000,\n    centimetres: 10000,\n    feet: 10.763910417,\n    hectares: 0.0001,\n    inches: 1550.003100006,\n    kilometers: 0.000001,\n    kilometres: 0.000001,\n    meters: 1,\n    metres: 1,\n    miles: 3.86e-7,\n    millimeters: 1000000,\n    millimetres: 1000000,\n    yards: 1.195990046,\n};\n/**\n * Wraps a GeoJSON {@link Geometry} in a GeoJSON {@link Feature}.\n *\n * @name feature\n * @param {Geometry} geometry input geometry\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature} a GeoJSON Feature\n * @example\n * var geometry = {\n *   \"type\": \"Point\",\n *   \"coordinates\": [110, 50]\n * };\n *\n * var feature = turf.feature(geometry);\n *\n * //=feature\n */\nfunction feature(geom, properties, options) {\n    if (options === void 0) { options = {}; }\n    var feat = { type: \"Feature\" };\n    if (options.id === 0 || options.id) {\n        feat.id = options.id;\n    }\n    if (options.bbox) {\n        feat.bbox = options.bbox;\n    }\n    feat.properties = properties || {};\n    feat.geometry = geom;\n    return feat;\n}\nexports.feature = feature;\n/**\n * Creates a GeoJSON {@link Geometry} from a Geometry string type & coordinates.\n * For GeometryCollection type use `helpers.geometryCollection`\n *\n * @name geometry\n * @param {string} type Geometry Type\n * @param {Array<any>} coordinates Coordinates\n * @param {Object} [options={}] Optional Parameters\n * @returns {Geometry} a GeoJSON Geometry\n * @example\n * var type = \"Point\";\n * var coordinates = [110, 50];\n * var geometry = turf.geometry(type, coordinates);\n * // => geometry\n */\nfunction geometry(type, coordinates, _options) {\n    if (_options === void 0) { _options = {}; }\n    switch (type) {\n        case \"Point\":\n            return point(coordinates).geometry;\n        case \"LineString\":\n            return lineString(coordinates).geometry;\n        case \"Polygon\":\n            return polygon(coordinates).geometry;\n        case \"MultiPoint\":\n            return multiPoint(coordinates).geometry;\n        case \"MultiLineString\":\n            return multiLineString(coordinates).geometry;\n        case \"MultiPolygon\":\n            return multiPolygon(coordinates).geometry;\n        default:\n            throw new Error(type + \" is invalid\");\n    }\n}\nexports.geometry = geometry;\n/**\n * Creates a {@link Point} {@link Feature} from a Position.\n *\n * @name point\n * @param {Array<number>} coordinates longitude, latitude position (each in decimal degrees)\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<Point>} a Point feature\n * @example\n * var point = turf.point([-75.343, 39.984]);\n *\n * //=point\n */\nfunction point(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    if (!coordinates) {\n        throw new Error(\"coordinates is required\");\n    }\n    if (!Array.isArray(coordinates)) {\n        throw new Error(\"coordinates must be an Array\");\n    }\n    if (coordinates.length < 2) {\n        throw new Error(\"coordinates must be at least 2 numbers long\");\n    }\n    if (!isNumber(coordinates[0]) || !isNumber(coordinates[1])) {\n        throw new Error(\"coordinates must contain numbers\");\n    }\n    var geom = {\n        type: \"Point\",\n        coordinates: coordinates,\n    };\n    return feature(geom, properties, options);\n}\nexports.point = point;\n/**\n * Creates a {@link Point} {@link FeatureCollection} from an Array of Point coordinates.\n *\n * @name points\n * @param {Array<Array<number>>} coordinates an array of Points\n * @param {Object} [properties={}] Translate these properties to each Feature\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north]\n * associated with the FeatureCollection\n * @param {string|number} [options.id] Identifier associated with the FeatureCollection\n * @returns {FeatureCollection<Point>} Point Feature\n * @example\n * var points = turf.points([\n *   [-75, 39],\n *   [-80, 45],\n *   [-78, 50]\n * ]);\n *\n * //=points\n */\nfunction points(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    return featureCollection(coordinates.map(function (coords) {\n        return point(coords, properties);\n    }), options);\n}\nexports.points = points;\n/**\n * Creates a {@link Polygon} {@link Feature} from an Array of LinearRings.\n *\n * @name polygon\n * @param {Array<Array<Array<number>>>} coordinates an array of LinearRings\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<Polygon>} Polygon Feature\n * @example\n * var polygon = turf.polygon([[[-5, 52], [-4, 56], [-2, 51], [-7, 54], [-5, 52]]], { name: 'poly1' });\n *\n * //=polygon\n */\nfunction polygon(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    for (var _i = 0, coordinates_1 = coordinates; _i < coordinates_1.length; _i++) {\n        var ring = coordinates_1[_i];\n        if (ring.length < 4) {\n            throw new Error(\"Each LinearRing of a Polygon must have 4 or more Positions.\");\n        }\n        for (var j = 0; j < ring[ring.length - 1].length; j++) {\n            // Check if first point of Polygon contains two numbers\n            if (ring[ring.length - 1][j] !== ring[0][j]) {\n                throw new Error(\"First and last Position are not equivalent.\");\n            }\n        }\n    }\n    var geom = {\n        type: \"Polygon\",\n        coordinates: coordinates,\n    };\n    return feature(geom, properties, options);\n}\nexports.polygon = polygon;\n/**\n * Creates a {@link Polygon} {@link FeatureCollection} from an Array of Polygon coordinates.\n *\n * @name polygons\n * @param {Array<Array<Array<Array<number>>>>} coordinates an array of Polygon coordinates\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the FeatureCollection\n * @returns {FeatureCollection<Polygon>} Polygon FeatureCollection\n * @example\n * var polygons = turf.polygons([\n *   [[[-5, 52], [-4, 56], [-2, 51], [-7, 54], [-5, 52]]],\n *   [[[-15, 42], [-14, 46], [-12, 41], [-17, 44], [-15, 42]]],\n * ]);\n *\n * //=polygons\n */\nfunction polygons(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    return featureCollection(coordinates.map(function (coords) {\n        return polygon(coords, properties);\n    }), options);\n}\nexports.polygons = polygons;\n/**\n * Creates a {@link LineString} {@link Feature} from an Array of Positions.\n *\n * @name lineString\n * @param {Array<Array<number>>} coordinates an array of Positions\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<LineString>} LineString Feature\n * @example\n * var linestring1 = turf.lineString([[-24, 63], [-23, 60], [-25, 65], [-20, 69]], {name: 'line 1'});\n * var linestring2 = turf.lineString([[-14, 43], [-13, 40], [-15, 45], [-10, 49]], {name: 'line 2'});\n *\n * //=linestring1\n * //=linestring2\n */\nfunction lineString(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    if (coordinates.length < 2) {\n        throw new Error(\"coordinates must be an array of two or more positions\");\n    }\n    var geom = {\n        type: \"LineString\",\n        coordinates: coordinates,\n    };\n    return feature(geom, properties, options);\n}\nexports.lineString = lineString;\n/**\n * Creates a {@link LineString} {@link FeatureCollection} from an Array of LineString coordinates.\n *\n * @name lineStrings\n * @param {Array<Array<Array<number>>>} coordinates an array of LinearRings\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north]\n * associated with the FeatureCollection\n * @param {string|number} [options.id] Identifier associated with the FeatureCollection\n * @returns {FeatureCollection<LineString>} LineString FeatureCollection\n * @example\n * var linestrings = turf.lineStrings([\n *   [[-24, 63], [-23, 60], [-25, 65], [-20, 69]],\n *   [[-14, 43], [-13, 40], [-15, 45], [-10, 49]]\n * ]);\n *\n * //=linestrings\n */\nfunction lineStrings(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    return featureCollection(coordinates.map(function (coords) {\n        return lineString(coords, properties);\n    }), options);\n}\nexports.lineStrings = lineStrings;\n/**\n * Takes one or more {@link Feature|Features} and creates a {@link FeatureCollection}.\n *\n * @name featureCollection\n * @param {Feature[]} features input features\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {FeatureCollection} FeatureCollection of Features\n * @example\n * var locationA = turf.point([-75.343, 39.984], {name: 'Location A'});\n * var locationB = turf.point([-75.833, 39.284], {name: 'Location B'});\n * var locationC = turf.point([-75.534, 39.123], {name: 'Location C'});\n *\n * var collection = turf.featureCollection([\n *   locationA,\n *   locationB,\n *   locationC\n * ]);\n *\n * //=collection\n */\nfunction featureCollection(features, options) {\n    if (options === void 0) { options = {}; }\n    var fc = { type: \"FeatureCollection\" };\n    if (options.id) {\n        fc.id = options.id;\n    }\n    if (options.bbox) {\n        fc.bbox = options.bbox;\n    }\n    fc.features = features;\n    return fc;\n}\nexports.featureCollection = featureCollection;\n/**\n * Creates a {@link Feature<MultiLineString>} based on a\n * coordinate array. Properties can be added optionally.\n *\n * @name multiLineString\n * @param {Array<Array<Array<number>>>} coordinates an array of LineStrings\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<MultiLineString>} a MultiLineString feature\n * @throws {Error} if no coordinates are passed\n * @example\n * var multiLine = turf.multiLineString([[[0,0],[10,10]]]);\n *\n * //=multiLine\n */\nfunction multiLineString(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    var geom = {\n        type: \"MultiLineString\",\n        coordinates: coordinates,\n    };\n    return feature(geom, properties, options);\n}\nexports.multiLineString = multiLineString;\n/**\n * Creates a {@link Feature<MultiPoint>} based on a\n * coordinate array. Properties can be added optionally.\n *\n * @name multiPoint\n * @param {Array<Array<number>>} coordinates an array of Positions\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<MultiPoint>} a MultiPoint feature\n * @throws {Error} if no coordinates are passed\n * @example\n * var multiPt = turf.multiPoint([[0,0],[10,10]]);\n *\n * //=multiPt\n */\nfunction multiPoint(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    var geom = {\n        type: \"MultiPoint\",\n        coordinates: coordinates,\n    };\n    return feature(geom, properties, options);\n}\nexports.multiPoint = multiPoint;\n/**\n * Creates a {@link Feature<MultiPolygon>} based on a\n * coordinate array. Properties can be added optionally.\n *\n * @name multiPolygon\n * @param {Array<Array<Array<Array<number>>>>} coordinates an array of Polygons\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<MultiPolygon>} a multipolygon feature\n * @throws {Error} if no coordinates are passed\n * @example\n * var multiPoly = turf.multiPolygon([[[[0,0],[0,10],[10,10],[10,0],[0,0]]]]);\n *\n * //=multiPoly\n *\n */\nfunction multiPolygon(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    var geom = {\n        type: \"MultiPolygon\",\n        coordinates: coordinates,\n    };\n    return feature(geom, properties, options);\n}\nexports.multiPolygon = multiPolygon;\n/**\n * Creates a {@link Feature<GeometryCollection>} based on a\n * coordinate array. Properties can be added optionally.\n *\n * @name geometryCollection\n * @param {Array<Geometry>} geometries an array of GeoJSON Geometries\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<GeometryCollection>} a GeoJSON GeometryCollection Feature\n * @example\n * var pt = turf.geometry(\"Point\", [100, 0]);\n * var line = turf.geometry(\"LineString\", [[101, 0], [102, 1]]);\n * var collection = turf.geometryCollection([pt, line]);\n *\n * // => collection\n */\nfunction geometryCollection(geometries, properties, options) {\n    if (options === void 0) { options = {}; }\n    var geom = {\n        type: \"GeometryCollection\",\n        geometries: geometries,\n    };\n    return feature(geom, properties, options);\n}\nexports.geometryCollection = geometryCollection;\n/**\n * Round number to precision\n *\n * @param {number} num Number\n * @param {number} [precision=0] Precision\n * @returns {number} rounded number\n * @example\n * turf.round(120.4321)\n * //=120\n *\n * turf.round(120.4321, 2)\n * //=120.43\n */\nfunction round(num, precision) {\n    if (precision === void 0) { precision = 0; }\n    if (precision && !(precision >= 0)) {\n        throw new Error(\"precision must be a positive number\");\n    }\n    var multiplier = Math.pow(10, precision || 0);\n    return Math.round(num * multiplier) / multiplier;\n}\nexports.round = round;\n/**\n * Convert a distance measurement (assuming a spherical Earth) from radians to a more friendly unit.\n * Valid units: miles, nauticalmiles, inches, yards, meters, metres, kilometers, centimeters, feet\n *\n * @name radiansToLength\n * @param {number} radians in radians across the sphere\n * @param {string} [units=\"kilometers\"] can be degrees, radians, miles, inches, yards, metres,\n * meters, kilometres, kilometers.\n * @returns {number} distance\n */\nfunction radiansToLength(radians, units) {\n    if (units === void 0) { units = \"kilometers\"; }\n    var factor = exports.factors[units];\n    if (!factor) {\n        throw new Error(units + \" units is invalid\");\n    }\n    return radians * factor;\n}\nexports.radiansToLength = radiansToLength;\n/**\n * Convert a distance measurement (assuming a spherical Earth) from a real-world unit into radians\n * Valid units: miles, nauticalmiles, inches, yards, meters, metres, kilometers, centimeters, feet\n *\n * @name lengthToRadians\n * @param {number} distance in real units\n * @param {string} [units=\"kilometers\"] can be degrees, radians, miles, inches, yards, metres,\n * meters, kilometres, kilometers.\n * @returns {number} radians\n */\nfunction lengthToRadians(distance, units) {\n    if (units === void 0) { units = \"kilometers\"; }\n    var factor = exports.factors[units];\n    if (!factor) {\n        throw new Error(units + \" units is invalid\");\n    }\n    return distance / factor;\n}\nexports.lengthToRadians = lengthToRadians;\n/**\n * Convert a distance measurement (assuming a spherical Earth) from a real-world unit into degrees\n * Valid units: miles, nauticalmiles, inches, yards, meters, metres, centimeters, kilometres, feet\n *\n * @name lengthToDegrees\n * @param {number} distance in real units\n * @param {string} [units=\"kilometers\"] can be degrees, radians, miles, inches, yards, metres,\n * meters, kilometres, kilometers.\n * @returns {number} degrees\n */\nfunction lengthToDegrees(distance, units) {\n    return radiansToDegrees(lengthToRadians(distance, units));\n}\nexports.lengthToDegrees = lengthToDegrees;\n/**\n * Converts any bearing angle from the north line direction (positive clockwise)\n * and returns an angle between 0-360 degrees (positive clockwise), 0 being the north line\n *\n * @name bearingToAzimuth\n * @param {number} bearing angle, between -180 and +180 degrees\n * @returns {number} angle between 0 and 360 degrees\n */\nfunction bearingToAzimuth(bearing) {\n    var angle = bearing % 360;\n    if (angle < 0) {\n        angle += 360;\n    }\n    return angle;\n}\nexports.bearingToAzimuth = bearingToAzimuth;\n/**\n * Converts an angle in radians to degrees\n *\n * @name radiansToDegrees\n * @param {number} radians angle in radians\n * @returns {number} degrees between 0 and 360 degrees\n */\nfunction radiansToDegrees(radians) {\n    var degrees = radians % (2 * Math.PI);\n    return (degrees * 180) / Math.PI;\n}\nexports.radiansToDegrees = radiansToDegrees;\n/**\n * Converts an angle in degrees to radians\n *\n * @name degreesToRadians\n * @param {number} degrees angle between 0 and 360 degrees\n * @returns {number} angle in radians\n */\nfunction degreesToRadians(degrees) {\n    var radians = degrees % 360;\n    return (radians * Math.PI) / 180;\n}\nexports.degreesToRadians = degreesToRadians;\n/**\n * Converts a length to the requested unit.\n * Valid units: miles, nauticalmiles, inches, yards, meters, metres, kilometers, centimeters, feet\n *\n * @param {number} length to be converted\n * @param {Units} [originalUnit=\"kilometers\"] of the length\n * @param {Units} [finalUnit=\"kilometers\"] returned unit\n * @returns {number} the converted length\n */\nfunction convertLength(length, originalUnit, finalUnit) {\n    if (originalUnit === void 0) { originalUnit = \"kilometers\"; }\n    if (finalUnit === void 0) { finalUnit = \"kilometers\"; }\n    if (!(length >= 0)) {\n        throw new Error(\"length must be a positive number\");\n    }\n    return radiansToLength(lengthToRadians(length, originalUnit), finalUnit);\n}\nexports.convertLength = convertLength;\n/**\n * Converts a area to the requested unit.\n * Valid units: kilometers, kilometres, meters, metres, centimetres, millimeters, acres, miles, yards, feet, inches, hectares\n * @param {number} area to be converted\n * @param {Units} [originalUnit=\"meters\"] of the distance\n * @param {Units} [finalUnit=\"kilometers\"] returned unit\n * @returns {number} the converted area\n */\nfunction convertArea(area, originalUnit, finalUnit) {\n    if (originalUnit === void 0) { originalUnit = \"meters\"; }\n    if (finalUnit === void 0) { finalUnit = \"kilometers\"; }\n    if (!(area >= 0)) {\n        throw new Error(\"area must be a positive number\");\n    }\n    var startFactor = exports.areaFactors[originalUnit];\n    if (!startFactor) {\n        throw new Error(\"invalid original units\");\n    }\n    var finalFactor = exports.areaFactors[finalUnit];\n    if (!finalFactor) {\n        throw new Error(\"invalid final units\");\n    }\n    return (area / startFactor) * finalFactor;\n}\nexports.convertArea = convertArea;\n/**\n * isNumber\n *\n * @param {*} num Number to validate\n * @returns {boolean} true/false\n * @example\n * turf.isNumber(123)\n * //=true\n * turf.isNumber('foo')\n * //=false\n */\nfunction isNumber(num) {\n    return !isNaN(num) && num !== null && !Array.isArray(num);\n}\nexports.isNumber = isNumber;\n/**\n * isObject\n *\n * @param {*} input variable to validate\n * @returns {boolean} true/false\n * @example\n * turf.isObject({elevation: 10})\n * //=true\n * turf.isObject('foo')\n * //=false\n */\nfunction isObject(input) {\n    return !!input && input.constructor === Object;\n}\nexports.isObject = isObject;\n/**\n * Validate BBox\n *\n * @private\n * @param {Array<number>} bbox BBox to validate\n * @returns {void}\n * @throws Error if BBox is not valid\n * @example\n * validateBBox([-180, -40, 110, 50])\n * //=OK\n * validateBBox([-180, -40])\n * //=Error\n * validateBBox('Foo')\n * //=Error\n * validateBBox(5)\n * //=Error\n * validateBBox(null)\n * //=Error\n * validateBBox(undefined)\n * //=Error\n */\nfunction validateBBox(bbox) {\n    if (!bbox) {\n        throw new Error(\"bbox is required\");\n    }\n    if (!Array.isArray(bbox)) {\n        throw new Error(\"bbox must be an Array\");\n    }\n    if (bbox.length !== 4 && bbox.length !== 6) {\n        throw new Error(\"bbox must be an Array of 4 or 6 numbers\");\n    }\n    bbox.forEach(function (num) {\n        if (!isNumber(num)) {\n            throw new Error(\"bbox must only contain numbers\");\n        }\n    });\n}\nexports.validateBBox = validateBBox;\n/**\n * Validate Id\n *\n * @private\n * @param {string|number} id Id to validate\n * @returns {void}\n * @throws Error if Id is not valid\n * @example\n * validateId([-180, -40, 110, 50])\n * //=Error\n * validateId([-180, -40])\n * //=Error\n * validateId('Foo')\n * //=OK\n * validateId(5)\n * //=OK\n * validateId(null)\n * //=Error\n * validateId(undefined)\n * //=Error\n */\nfunction validateId(id) {\n    if (!id) {\n        throw new Error(\"id is required\");\n    }\n    if ([\"string\", \"number\"].indexOf(typeof id) === -1) {\n        throw new Error(\"id must be a number or a string\");\n    }\n}\nexports.validateId = validateId;\n","'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar helpers = require('@turf/helpers');\n\n/**\n * Callback for coordEach\n *\n * @callback coordEachCallback\n * @param {Array<number>} currentCoord The current coordinate being processed.\n * @param {number} coordIndex The current index of the coordinate being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed.\n * @param {number} geometryIndex The current index of the Geometry being processed.\n */\n\n/**\n * Iterate over coordinates in any GeoJSON object, similar to Array.forEach()\n *\n * @name coordEach\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object\n * @param {Function} callback a method that takes (currentCoord, coordIndex, featureIndex, multiFeatureIndex)\n * @param {boolean} [excludeWrapCoord=false] whether or not to include the final coordinate of LinearRings that wraps the ring in its iteration.\n * @returns {void}\n * @example\n * var features = turf.featureCollection([\n *   turf.point([26, 37], {\"foo\": \"bar\"}),\n *   turf.point([36, 53], {\"hello\": \"world\"})\n * ]);\n *\n * turf.coordEach(features, function (currentCoord, coordIndex, featureIndex, multiFeatureIndex, geometryIndex) {\n *   //=currentCoord\n *   //=coordIndex\n *   //=featureIndex\n *   //=multiFeatureIndex\n *   //=geometryIndex\n * });\n */\nfunction coordEach(geojson, callback, excludeWrapCoord) {\n  // Handles null Geometry -- Skips this GeoJSON\n  if (geojson === null) return;\n  var j,\n    k,\n    l,\n    geometry,\n    stopG,\n    coords,\n    geometryMaybeCollection,\n    wrapShrink = 0,\n    coordIndex = 0,\n    isGeometryCollection,\n    type = geojson.type,\n    isFeatureCollection = type === \"FeatureCollection\",\n    isFeature = type === \"Feature\",\n    stop = isFeatureCollection ? geojson.features.length : 1;\n\n  // This logic may look a little weird. The reason why it is that way\n  // is because it's trying to be fast. GeoJSON supports multiple kinds\n  // of objects at its root: FeatureCollection, Features, Geometries.\n  // This function has the responsibility of handling all of them, and that\n  // means that some of the `for` loops you see below actually just don't apply\n  // to certain inputs. For instance, if you give this just a\n  // Point geometry, then both loops are short-circuited and all we do\n  // is gradually rename the input until it's called 'geometry'.\n  //\n  // This also aims to allocate as few resources as possible: just a\n  // few numbers and booleans, rather than any temporary arrays as would\n  // be required with the normalization approach.\n  for (var featureIndex = 0; featureIndex < stop; featureIndex++) {\n    geometryMaybeCollection = isFeatureCollection\n      ? geojson.features[featureIndex].geometry\n      : isFeature\n      ? geojson.geometry\n      : geojson;\n    isGeometryCollection = geometryMaybeCollection\n      ? geometryMaybeCollection.type === \"GeometryCollection\"\n      : false;\n    stopG = isGeometryCollection\n      ? geometryMaybeCollection.geometries.length\n      : 1;\n\n    for (var geomIndex = 0; geomIndex < stopG; geomIndex++) {\n      var multiFeatureIndex = 0;\n      var geometryIndex = 0;\n      geometry = isGeometryCollection\n        ? geometryMaybeCollection.geometries[geomIndex]\n        : geometryMaybeCollection;\n\n      // Handles null Geometry -- Skips this geometry\n      if (geometry === null) continue;\n      coords = geometry.coordinates;\n      var geomType = geometry.type;\n\n      wrapShrink =\n        excludeWrapCoord &&\n        (geomType === \"Polygon\" || geomType === \"MultiPolygon\")\n          ? 1\n          : 0;\n\n      switch (geomType) {\n        case null:\n          break;\n        case \"Point\":\n          if (\n            callback(\n              coords,\n              coordIndex,\n              featureIndex,\n              multiFeatureIndex,\n              geometryIndex\n            ) === false\n          )\n            return false;\n          coordIndex++;\n          multiFeatureIndex++;\n          break;\n        case \"LineString\":\n        case \"MultiPoint\":\n          for (j = 0; j < coords.length; j++) {\n            if (\n              callback(\n                coords[j],\n                coordIndex,\n                featureIndex,\n                multiFeatureIndex,\n                geometryIndex\n              ) === false\n            )\n              return false;\n            coordIndex++;\n            if (geomType === \"MultiPoint\") multiFeatureIndex++;\n          }\n          if (geomType === \"LineString\") multiFeatureIndex++;\n          break;\n        case \"Polygon\":\n        case \"MultiLineString\":\n          for (j = 0; j < coords.length; j++) {\n            for (k = 0; k < coords[j].length - wrapShrink; k++) {\n              if (\n                callback(\n                  coords[j][k],\n                  coordIndex,\n                  featureIndex,\n                  multiFeatureIndex,\n                  geometryIndex\n                ) === false\n              )\n                return false;\n              coordIndex++;\n            }\n            if (geomType === \"MultiLineString\") multiFeatureIndex++;\n            if (geomType === \"Polygon\") geometryIndex++;\n          }\n          if (geomType === \"Polygon\") multiFeatureIndex++;\n          break;\n        case \"MultiPolygon\":\n          for (j = 0; j < coords.length; j++) {\n            geometryIndex = 0;\n            for (k = 0; k < coords[j].length; k++) {\n              for (l = 0; l < coords[j][k].length - wrapShrink; l++) {\n                if (\n                  callback(\n                    coords[j][k][l],\n                    coordIndex,\n                    featureIndex,\n                    multiFeatureIndex,\n                    geometryIndex\n                  ) === false\n                )\n                  return false;\n                coordIndex++;\n              }\n              geometryIndex++;\n            }\n            multiFeatureIndex++;\n          }\n          break;\n        case \"GeometryCollection\":\n          for (j = 0; j < geometry.geometries.length; j++)\n            if (\n              coordEach(geometry.geometries[j], callback, excludeWrapCoord) ===\n              false\n            )\n              return false;\n          break;\n        default:\n          throw new Error(\"Unknown Geometry Type\");\n      }\n    }\n  }\n}\n\n/**\n * Callback for coordReduce\n *\n * The first time the callback function is called, the values provided as arguments depend\n * on whether the reduce method has an initialValue argument.\n *\n * If an initialValue is provided to the reduce method:\n *  - The previousValue argument is initialValue.\n *  - The currentValue argument is the value of the first element present in the array.\n *\n * If an initialValue is not provided:\n *  - The previousValue argument is the value of the first element present in the array.\n *  - The currentValue argument is the value of the second element present in the array.\n *\n * @callback coordReduceCallback\n * @param {*} previousValue The accumulated value previously returned in the last invocation\n * of the callback, or initialValue, if supplied.\n * @param {Array<number>} currentCoord The current coordinate being processed.\n * @param {number} coordIndex The current index of the coordinate being processed.\n * Starts at index 0, if an initialValue is provided, and at index 1 otherwise.\n * @param {number} featureIndex The current index of the Feature being processed.\n * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed.\n * @param {number} geometryIndex The current index of the Geometry being processed.\n */\n\n/**\n * Reduce coordinates in any GeoJSON object, similar to Array.reduce()\n *\n * @name coordReduce\n * @param {FeatureCollection|Geometry|Feature} geojson any GeoJSON object\n * @param {Function} callback a method that takes (previousValue, currentCoord, coordIndex)\n * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.\n * @param {boolean} [excludeWrapCoord=false] whether or not to include the final coordinate of LinearRings that wraps the ring in its iteration.\n * @returns {*} The value that results from the reduction.\n * @example\n * var features = turf.featureCollection([\n *   turf.point([26, 37], {\"foo\": \"bar\"}),\n *   turf.point([36, 53], {\"hello\": \"world\"})\n * ]);\n *\n * turf.coordReduce(features, function (previousValue, currentCoord, coordIndex, featureIndex, multiFeatureIndex, geometryIndex) {\n *   //=previousValue\n *   //=currentCoord\n *   //=coordIndex\n *   //=featureIndex\n *   //=multiFeatureIndex\n *   //=geometryIndex\n *   return currentCoord;\n * });\n */\nfunction coordReduce(geojson, callback, initialValue, excludeWrapCoord) {\n  var previousValue = initialValue;\n  coordEach(\n    geojson,\n    function (\n      currentCoord,\n      coordIndex,\n      featureIndex,\n      multiFeatureIndex,\n      geometryIndex\n    ) {\n      if (coordIndex === 0 && initialValue === undefined)\n        previousValue = currentCoord;\n      else\n        previousValue = callback(\n          previousValue,\n          currentCoord,\n          coordIndex,\n          featureIndex,\n          multiFeatureIndex,\n          geometryIndex\n        );\n    },\n    excludeWrapCoord\n  );\n  return previousValue;\n}\n\n/**\n * Callback for propEach\n *\n * @callback propEachCallback\n * @param {Object} currentProperties The current Properties being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n */\n\n/**\n * Iterate over properties in any GeoJSON object, similar to Array.forEach()\n *\n * @name propEach\n * @param {FeatureCollection|Feature} geojson any GeoJSON object\n * @param {Function} callback a method that takes (currentProperties, featureIndex)\n * @returns {void}\n * @example\n * var features = turf.featureCollection([\n *     turf.point([26, 37], {foo: 'bar'}),\n *     turf.point([36, 53], {hello: 'world'})\n * ]);\n *\n * turf.propEach(features, function (currentProperties, featureIndex) {\n *   //=currentProperties\n *   //=featureIndex\n * });\n */\nfunction propEach(geojson, callback) {\n  var i;\n  switch (geojson.type) {\n    case \"FeatureCollection\":\n      for (i = 0; i < geojson.features.length; i++) {\n        if (callback(geojson.features[i].properties, i) === false) break;\n      }\n      break;\n    case \"Feature\":\n      callback(geojson.properties, 0);\n      break;\n  }\n}\n\n/**\n * Callback for propReduce\n *\n * The first time the callback function is called, the values provided as arguments depend\n * on whether the reduce method has an initialValue argument.\n *\n * If an initialValue is provided to the reduce method:\n *  - The previousValue argument is initialValue.\n *  - The currentValue argument is the value of the first element present in the array.\n *\n * If an initialValue is not provided:\n *  - The previousValue argument is the value of the first element present in the array.\n *  - The currentValue argument is the value of the second element present in the array.\n *\n * @callback propReduceCallback\n * @param {*} previousValue The accumulated value previously returned in the last invocation\n * of the callback, or initialValue, if supplied.\n * @param {*} currentProperties The current Properties being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n */\n\n/**\n * Reduce properties in any GeoJSON object into a single value,\n * similar to how Array.reduce works. However, in this case we lazily run\n * the reduction, so an array of all properties is unnecessary.\n *\n * @name propReduce\n * @param {FeatureCollection|Feature} geojson any GeoJSON object\n * @param {Function} callback a method that takes (previousValue, currentProperties, featureIndex)\n * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.\n * @returns {*} The value that results from the reduction.\n * @example\n * var features = turf.featureCollection([\n *     turf.point([26, 37], {foo: 'bar'}),\n *     turf.point([36, 53], {hello: 'world'})\n * ]);\n *\n * turf.propReduce(features, function (previousValue, currentProperties, featureIndex) {\n *   //=previousValue\n *   //=currentProperties\n *   //=featureIndex\n *   return currentProperties\n * });\n */\nfunction propReduce(geojson, callback, initialValue) {\n  var previousValue = initialValue;\n  propEach(geojson, function (currentProperties, featureIndex) {\n    if (featureIndex === 0 && initialValue === undefined)\n      previousValue = currentProperties;\n    else\n      previousValue = callback(previousValue, currentProperties, featureIndex);\n  });\n  return previousValue;\n}\n\n/**\n * Callback for featureEach\n *\n * @callback featureEachCallback\n * @param {Feature<any>} currentFeature The current Feature being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n */\n\n/**\n * Iterate over features in any GeoJSON object, similar to\n * Array.forEach.\n *\n * @name featureEach\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object\n * @param {Function} callback a method that takes (currentFeature, featureIndex)\n * @returns {void}\n * @example\n * var features = turf.featureCollection([\n *   turf.point([26, 37], {foo: 'bar'}),\n *   turf.point([36, 53], {hello: 'world'})\n * ]);\n *\n * turf.featureEach(features, function (currentFeature, featureIndex) {\n *   //=currentFeature\n *   //=featureIndex\n * });\n */\nfunction featureEach(geojson, callback) {\n  if (geojson.type === \"Feature\") {\n    callback(geojson, 0);\n  } else if (geojson.type === \"FeatureCollection\") {\n    for (var i = 0; i < geojson.features.length; i++) {\n      if (callback(geojson.features[i], i) === false) break;\n    }\n  }\n}\n\n/**\n * Callback for featureReduce\n *\n * The first time the callback function is called, the values provided as arguments depend\n * on whether the reduce method has an initialValue argument.\n *\n * If an initialValue is provided to the reduce method:\n *  - The previousValue argument is initialValue.\n *  - The currentValue argument is the value of the first element present in the array.\n *\n * If an initialValue is not provided:\n *  - The previousValue argument is the value of the first element present in the array.\n *  - The currentValue argument is the value of the second element present in the array.\n *\n * @callback featureReduceCallback\n * @param {*} previousValue The accumulated value previously returned in the last invocation\n * of the callback, or initialValue, if supplied.\n * @param {Feature} currentFeature The current Feature being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n */\n\n/**\n * Reduce features in any GeoJSON object, similar to Array.reduce().\n *\n * @name featureReduce\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object\n * @param {Function} callback a method that takes (previousValue, currentFeature, featureIndex)\n * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.\n * @returns {*} The value that results from the reduction.\n * @example\n * var features = turf.featureCollection([\n *   turf.point([26, 37], {\"foo\": \"bar\"}),\n *   turf.point([36, 53], {\"hello\": \"world\"})\n * ]);\n *\n * turf.featureReduce(features, function (previousValue, currentFeature, featureIndex) {\n *   //=previousValue\n *   //=currentFeature\n *   //=featureIndex\n *   return currentFeature\n * });\n */\nfunction featureReduce(geojson, callback, initialValue) {\n  var previousValue = initialValue;\n  featureEach(geojson, function (currentFeature, featureIndex) {\n    if (featureIndex === 0 && initialValue === undefined)\n      previousValue = currentFeature;\n    else previousValue = callback(previousValue, currentFeature, featureIndex);\n  });\n  return previousValue;\n}\n\n/**\n * Get all coordinates from any GeoJSON object.\n *\n * @name coordAll\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object\n * @returns {Array<Array<number>>} coordinate position array\n * @example\n * var features = turf.featureCollection([\n *   turf.point([26, 37], {foo: 'bar'}),\n *   turf.point([36, 53], {hello: 'world'})\n * ]);\n *\n * var coords = turf.coordAll(features);\n * //= [[26, 37], [36, 53]]\n */\nfunction coordAll(geojson) {\n  var coords = [];\n  coordEach(geojson, function (coord) {\n    coords.push(coord);\n  });\n  return coords;\n}\n\n/**\n * Callback for geomEach\n *\n * @callback geomEachCallback\n * @param {Geometry} currentGeometry The current Geometry being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n * @param {Object} featureProperties The current Feature Properties being processed.\n * @param {Array<number>} featureBBox The current Feature BBox being processed.\n * @param {number|string} featureId The current Feature Id being processed.\n */\n\n/**\n * Iterate over each geometry in any GeoJSON object, similar to Array.forEach()\n *\n * @name geomEach\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object\n * @param {Function} callback a method that takes (currentGeometry, featureIndex, featureProperties, featureBBox, featureId)\n * @returns {void}\n * @example\n * var features = turf.featureCollection([\n *     turf.point([26, 37], {foo: 'bar'}),\n *     turf.point([36, 53], {hello: 'world'})\n * ]);\n *\n * turf.geomEach(features, function (currentGeometry, featureIndex, featureProperties, featureBBox, featureId) {\n *   //=currentGeometry\n *   //=featureIndex\n *   //=featureProperties\n *   //=featureBBox\n *   //=featureId\n * });\n */\nfunction geomEach(geojson, callback) {\n  var i,\n    j,\n    g,\n    geometry,\n    stopG,\n    geometryMaybeCollection,\n    isGeometryCollection,\n    featureProperties,\n    featureBBox,\n    featureId,\n    featureIndex = 0,\n    isFeatureCollection = geojson.type === \"FeatureCollection\",\n    isFeature = geojson.type === \"Feature\",\n    stop = isFeatureCollection ? geojson.features.length : 1;\n\n  // This logic may look a little weird. The reason why it is that way\n  // is because it's trying to be fast. GeoJSON supports multiple kinds\n  // of objects at its root: FeatureCollection, Features, Geometries.\n  // This function has the responsibility of handling all of them, and that\n  // means that some of the `for` loops you see below actually just don't apply\n  // to certain inputs. For instance, if you give this just a\n  // Point geometry, then both loops are short-circuited and all we do\n  // is gradually rename the input until it's called 'geometry'.\n  //\n  // This also aims to allocate as few resources as possible: just a\n  // few numbers and booleans, rather than any temporary arrays as would\n  // be required with the normalization approach.\n  for (i = 0; i < stop; i++) {\n    geometryMaybeCollection = isFeatureCollection\n      ? geojson.features[i].geometry\n      : isFeature\n      ? geojson.geometry\n      : geojson;\n    featureProperties = isFeatureCollection\n      ? geojson.features[i].properties\n      : isFeature\n      ? geojson.properties\n      : {};\n    featureBBox = isFeatureCollection\n      ? geojson.features[i].bbox\n      : isFeature\n      ? geojson.bbox\n      : undefined;\n    featureId = isFeatureCollection\n      ? geojson.features[i].id\n      : isFeature\n      ? geojson.id\n      : undefined;\n    isGeometryCollection = geometryMaybeCollection\n      ? geometryMaybeCollection.type === \"GeometryCollection\"\n      : false;\n    stopG = isGeometryCollection\n      ? geometryMaybeCollection.geometries.length\n      : 1;\n\n    for (g = 0; g < stopG; g++) {\n      geometry = isGeometryCollection\n        ? geometryMaybeCollection.geometries[g]\n        : geometryMaybeCollection;\n\n      // Handle null Geometry\n      if (geometry === null) {\n        if (\n          callback(\n            null,\n            featureIndex,\n            featureProperties,\n            featureBBox,\n            featureId\n          ) === false\n        )\n          return false;\n        continue;\n      }\n      switch (geometry.type) {\n        case \"Point\":\n        case \"LineString\":\n        case \"MultiPoint\":\n        case \"Polygon\":\n        case \"MultiLineString\":\n        case \"MultiPolygon\": {\n          if (\n            callback(\n              geometry,\n              featureIndex,\n              featureProperties,\n              featureBBox,\n              featureId\n            ) === false\n          )\n            return false;\n          break;\n        }\n        case \"GeometryCollection\": {\n          for (j = 0; j < geometry.geometries.length; j++) {\n            if (\n              callback(\n                geometry.geometries[j],\n                featureIndex,\n                featureProperties,\n                featureBBox,\n                featureId\n              ) === false\n            )\n              return false;\n          }\n          break;\n        }\n        default:\n          throw new Error(\"Unknown Geometry Type\");\n      }\n    }\n    // Only increase `featureIndex` per each feature\n    featureIndex++;\n  }\n}\n\n/**\n * Callback for geomReduce\n *\n * The first time the callback function is called, the values provided as arguments depend\n * on whether the reduce method has an initialValue argument.\n *\n * If an initialValue is provided to the reduce method:\n *  - The previousValue argument is initialValue.\n *  - The currentValue argument is the value of the first element present in the array.\n *\n * If an initialValue is not provided:\n *  - The previousValue argument is the value of the first element present in the array.\n *  - The currentValue argument is the value of the second element present in the array.\n *\n * @callback geomReduceCallback\n * @param {*} previousValue The accumulated value previously returned in the last invocation\n * of the callback, or initialValue, if supplied.\n * @param {Geometry} currentGeometry The current Geometry being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n * @param {Object} featureProperties The current Feature Properties being processed.\n * @param {Array<number>} featureBBox The current Feature BBox being processed.\n * @param {number|string} featureId The current Feature Id being processed.\n */\n\n/**\n * Reduce geometry in any GeoJSON object, similar to Array.reduce().\n *\n * @name geomReduce\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object\n * @param {Function} callback a method that takes (previousValue, currentGeometry, featureIndex, featureProperties, featureBBox, featureId)\n * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.\n * @returns {*} The value that results from the reduction.\n * @example\n * var features = turf.featureCollection([\n *     turf.point([26, 37], {foo: 'bar'}),\n *     turf.point([36, 53], {hello: 'world'})\n * ]);\n *\n * turf.geomReduce(features, function (previousValue, currentGeometry, featureIndex, featureProperties, featureBBox, featureId) {\n *   //=previousValue\n *   //=currentGeometry\n *   //=featureIndex\n *   //=featureProperties\n *   //=featureBBox\n *   //=featureId\n *   return currentGeometry\n * });\n */\nfunction geomReduce(geojson, callback, initialValue) {\n  var previousValue = initialValue;\n  geomEach(\n    geojson,\n    function (\n      currentGeometry,\n      featureIndex,\n      featureProperties,\n      featureBBox,\n      featureId\n    ) {\n      if (featureIndex === 0 && initialValue === undefined)\n        previousValue = currentGeometry;\n      else\n        previousValue = callback(\n          previousValue,\n          currentGeometry,\n          featureIndex,\n          featureProperties,\n          featureBBox,\n          featureId\n        );\n    }\n  );\n  return previousValue;\n}\n\n/**\n * Callback for flattenEach\n *\n * @callback flattenEachCallback\n * @param {Feature} currentFeature The current flattened feature being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed.\n */\n\n/**\n * Iterate over flattened features in any GeoJSON object, similar to\n * Array.forEach.\n *\n * @name flattenEach\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object\n * @param {Function} callback a method that takes (currentFeature, featureIndex, multiFeatureIndex)\n * @example\n * var features = turf.featureCollection([\n *     turf.point([26, 37], {foo: 'bar'}),\n *     turf.multiPoint([[40, 30], [36, 53]], {hello: 'world'})\n * ]);\n *\n * turf.flattenEach(features, function (currentFeature, featureIndex, multiFeatureIndex) {\n *   //=currentFeature\n *   //=featureIndex\n *   //=multiFeatureIndex\n * });\n */\nfunction flattenEach(geojson, callback) {\n  geomEach(geojson, function (geometry, featureIndex, properties, bbox, id) {\n    // Callback for single geometry\n    var type = geometry === null ? null : geometry.type;\n    switch (type) {\n      case null:\n      case \"Point\":\n      case \"LineString\":\n      case \"Polygon\":\n        if (\n          callback(\n            helpers.feature(geometry, properties, { bbox: bbox, id: id }),\n            featureIndex,\n            0\n          ) === false\n        )\n          return false;\n        return;\n    }\n\n    var geomType;\n\n    // Callback for multi-geometry\n    switch (type) {\n      case \"MultiPoint\":\n        geomType = \"Point\";\n        break;\n      case \"MultiLineString\":\n        geomType = \"LineString\";\n        break;\n      case \"MultiPolygon\":\n        geomType = \"Polygon\";\n        break;\n    }\n\n    for (\n      var multiFeatureIndex = 0;\n      multiFeatureIndex < geometry.coordinates.length;\n      multiFeatureIndex++\n    ) {\n      var coordinate = geometry.coordinates[multiFeatureIndex];\n      var geom = {\n        type: geomType,\n        coordinates: coordinate,\n      };\n      if (\n        callback(helpers.feature(geom, properties), featureIndex, multiFeatureIndex) ===\n        false\n      )\n        return false;\n    }\n  });\n}\n\n/**\n * Callback for flattenReduce\n *\n * The first time the callback function is called, the values provided as arguments depend\n * on whether the reduce method has an initialValue argument.\n *\n * If an initialValue is provided to the reduce method:\n *  - The previousValue argument is initialValue.\n *  - The currentValue argument is the value of the first element present in the array.\n *\n * If an initialValue is not provided:\n *  - The previousValue argument is the value of the first element present in the array.\n *  - The currentValue argument is the value of the second element present in the array.\n *\n * @callback flattenReduceCallback\n * @param {*} previousValue The accumulated value previously returned in the last invocation\n * of the callback, or initialValue, if supplied.\n * @param {Feature} currentFeature The current Feature being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed.\n */\n\n/**\n * Reduce flattened features in any GeoJSON object, similar to Array.reduce().\n *\n * @name flattenReduce\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object\n * @param {Function} callback a method that takes (previousValue, currentFeature, featureIndex, multiFeatureIndex)\n * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.\n * @returns {*} The value that results from the reduction.\n * @example\n * var features = turf.featureCollection([\n *     turf.point([26, 37], {foo: 'bar'}),\n *     turf.multiPoint([[40, 30], [36, 53]], {hello: 'world'})\n * ]);\n *\n * turf.flattenReduce(features, function (previousValue, currentFeature, featureIndex, multiFeatureIndex) {\n *   //=previousValue\n *   //=currentFeature\n *   //=featureIndex\n *   //=multiFeatureIndex\n *   return currentFeature\n * });\n */\nfunction flattenReduce(geojson, callback, initialValue) {\n  var previousValue = initialValue;\n  flattenEach(\n    geojson,\n    function (currentFeature, featureIndex, multiFeatureIndex) {\n      if (\n        featureIndex === 0 &&\n        multiFeatureIndex === 0 &&\n        initialValue === undefined\n      )\n        previousValue = currentFeature;\n      else\n        previousValue = callback(\n          previousValue,\n          currentFeature,\n          featureIndex,\n          multiFeatureIndex\n        );\n    }\n  );\n  return previousValue;\n}\n\n/**\n * Callback for segmentEach\n *\n * @callback segmentEachCallback\n * @param {Feature<LineString>} currentSegment The current Segment being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed.\n * @param {number} geometryIndex The current index of the Geometry being processed.\n * @param {number} segmentIndex The current index of the Segment being processed.\n * @returns {void}\n */\n\n/**\n * Iterate over 2-vertex line segment in any GeoJSON object, similar to Array.forEach()\n * (Multi)Point geometries do not contain segments therefore they are ignored during this operation.\n *\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON\n * @param {Function} callback a method that takes (currentSegment, featureIndex, multiFeatureIndex, geometryIndex, segmentIndex)\n * @returns {void}\n * @example\n * var polygon = turf.polygon([[[-50, 5], [-40, -10], [-50, -10], [-40, 5], [-50, 5]]]);\n *\n * // Iterate over GeoJSON by 2-vertex segments\n * turf.segmentEach(polygon, function (currentSegment, featureIndex, multiFeatureIndex, geometryIndex, segmentIndex) {\n *   //=currentSegment\n *   //=featureIndex\n *   //=multiFeatureIndex\n *   //=geometryIndex\n *   //=segmentIndex\n * });\n *\n * // Calculate the total number of segments\n * var total = 0;\n * turf.segmentEach(polygon, function () {\n *     total++;\n * });\n */\nfunction segmentEach(geojson, callback) {\n  flattenEach(geojson, function (feature, featureIndex, multiFeatureIndex) {\n    var segmentIndex = 0;\n\n    // Exclude null Geometries\n    if (!feature.geometry) return;\n    // (Multi)Point geometries do not contain segments therefore they are ignored during this operation.\n    var type = feature.geometry.type;\n    if (type === \"Point\" || type === \"MultiPoint\") return;\n\n    // Generate 2-vertex line segments\n    var previousCoords;\n    var previousFeatureIndex = 0;\n    var previousMultiIndex = 0;\n    var prevGeomIndex = 0;\n    if (\n      coordEach(\n        feature,\n        function (\n          currentCoord,\n          coordIndex,\n          featureIndexCoord,\n          multiPartIndexCoord,\n          geometryIndex\n        ) {\n          // Simulating a meta.coordReduce() since `reduce` operations cannot be stopped by returning `false`\n          if (\n            previousCoords === undefined ||\n            featureIndex > previousFeatureIndex ||\n            multiPartIndexCoord > previousMultiIndex ||\n            geometryIndex > prevGeomIndex\n          ) {\n            previousCoords = currentCoord;\n            previousFeatureIndex = featureIndex;\n            previousMultiIndex = multiPartIndexCoord;\n            prevGeomIndex = geometryIndex;\n            segmentIndex = 0;\n            return;\n          }\n          var currentSegment = helpers.lineString(\n            [previousCoords, currentCoord],\n            feature.properties\n          );\n          if (\n            callback(\n              currentSegment,\n              featureIndex,\n              multiFeatureIndex,\n              geometryIndex,\n              segmentIndex\n            ) === false\n          )\n            return false;\n          segmentIndex++;\n          previousCoords = currentCoord;\n        }\n      ) === false\n    )\n      return false;\n  });\n}\n\n/**\n * Callback for segmentReduce\n *\n * The first time the callback function is called, the values provided as arguments depend\n * on whether the reduce method has an initialValue argument.\n *\n * If an initialValue is provided to the reduce method:\n *  - The previousValue argument is initialValue.\n *  - The currentValue argument is the value of the first element present in the array.\n *\n * If an initialValue is not provided:\n *  - The previousValue argument is the value of the first element present in the array.\n *  - The currentValue argument is the value of the second element present in the array.\n *\n * @callback segmentReduceCallback\n * @param {*} previousValue The accumulated value previously returned in the last invocation\n * of the callback, or initialValue, if supplied.\n * @param {Feature<LineString>} currentSegment The current Segment being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed.\n * @param {number} geometryIndex The current index of the Geometry being processed.\n * @param {number} segmentIndex The current index of the Segment being processed.\n */\n\n/**\n * Reduce 2-vertex line segment in any GeoJSON object, similar to Array.reduce()\n * (Multi)Point geometries do not contain segments therefore they are ignored during this operation.\n *\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON\n * @param {Function} callback a method that takes (previousValue, currentSegment, currentIndex)\n * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.\n * @returns {void}\n * @example\n * var polygon = turf.polygon([[[-50, 5], [-40, -10], [-50, -10], [-40, 5], [-50, 5]]]);\n *\n * // Iterate over GeoJSON by 2-vertex segments\n * turf.segmentReduce(polygon, function (previousSegment, currentSegment, featureIndex, multiFeatureIndex, geometryIndex, segmentIndex) {\n *   //= previousSegment\n *   //= currentSegment\n *   //= featureIndex\n *   //= multiFeatureIndex\n *   //= geometryIndex\n *   //= segmentIndex\n *   return currentSegment\n * });\n *\n * // Calculate the total number of segments\n * var initialValue = 0\n * var total = turf.segmentReduce(polygon, function (previousValue) {\n *     previousValue++;\n *     return previousValue;\n * }, initialValue);\n */\nfunction segmentReduce(geojson, callback, initialValue) {\n  var previousValue = initialValue;\n  var started = false;\n  segmentEach(\n    geojson,\n    function (\n      currentSegment,\n      featureIndex,\n      multiFeatureIndex,\n      geometryIndex,\n      segmentIndex\n    ) {\n      if (started === false && initialValue === undefined)\n        previousValue = currentSegment;\n      else\n        previousValue = callback(\n          previousValue,\n          currentSegment,\n          featureIndex,\n          multiFeatureIndex,\n          geometryIndex,\n          segmentIndex\n        );\n      started = true;\n    }\n  );\n  return previousValue;\n}\n\n/**\n * Callback for lineEach\n *\n * @callback lineEachCallback\n * @param {Feature<LineString>} currentLine The current LineString|LinearRing being processed\n * @param {number} featureIndex The current index of the Feature being processed\n * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed\n * @param {number} geometryIndex The current index of the Geometry being processed\n */\n\n/**\n * Iterate over line or ring coordinates in LineString, Polygon, MultiLineString, MultiPolygon Features or Geometries,\n * similar to Array.forEach.\n *\n * @name lineEach\n * @param {Geometry|Feature<LineString|Polygon|MultiLineString|MultiPolygon>} geojson object\n * @param {Function} callback a method that takes (currentLine, featureIndex, multiFeatureIndex, geometryIndex)\n * @example\n * var multiLine = turf.multiLineString([\n *   [[26, 37], [35, 45]],\n *   [[36, 53], [38, 50], [41, 55]]\n * ]);\n *\n * turf.lineEach(multiLine, function (currentLine, featureIndex, multiFeatureIndex, geometryIndex) {\n *   //=currentLine\n *   //=featureIndex\n *   //=multiFeatureIndex\n *   //=geometryIndex\n * });\n */\nfunction lineEach(geojson, callback) {\n  // validation\n  if (!geojson) throw new Error(\"geojson is required\");\n\n  flattenEach(geojson, function (feature, featureIndex, multiFeatureIndex) {\n    if (feature.geometry === null) return;\n    var type = feature.geometry.type;\n    var coords = feature.geometry.coordinates;\n    switch (type) {\n      case \"LineString\":\n        if (callback(feature, featureIndex, multiFeatureIndex, 0, 0) === false)\n          return false;\n        break;\n      case \"Polygon\":\n        for (\n          var geometryIndex = 0;\n          geometryIndex < coords.length;\n          geometryIndex++\n        ) {\n          if (\n            callback(\n              helpers.lineString(coords[geometryIndex], feature.properties),\n              featureIndex,\n              multiFeatureIndex,\n              geometryIndex\n            ) === false\n          )\n            return false;\n        }\n        break;\n    }\n  });\n}\n\n/**\n * Callback for lineReduce\n *\n * The first time the callback function is called, the values provided as arguments depend\n * on whether the reduce method has an initialValue argument.\n *\n * If an initialValue is provided to the reduce method:\n *  - The previousValue argument is initialValue.\n *  - The currentValue argument is the value of the first element present in the array.\n *\n * If an initialValue is not provided:\n *  - The previousValue argument is the value of the first element present in the array.\n *  - The currentValue argument is the value of the second element present in the array.\n *\n * @callback lineReduceCallback\n * @param {*} previousValue The accumulated value previously returned in the last invocation\n * of the callback, or initialValue, if supplied.\n * @param {Feature<LineString>} currentLine The current LineString|LinearRing being processed.\n * @param {number} featureIndex The current index of the Feature being processed\n * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed\n * @param {number} geometryIndex The current index of the Geometry being processed\n */\n\n/**\n * Reduce features in any GeoJSON object, similar to Array.reduce().\n *\n * @name lineReduce\n * @param {Geometry|Feature<LineString|Polygon|MultiLineString|MultiPolygon>} geojson object\n * @param {Function} callback a method that takes (previousValue, currentLine, featureIndex, multiFeatureIndex, geometryIndex)\n * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.\n * @returns {*} The value that results from the reduction.\n * @example\n * var multiPoly = turf.multiPolygon([\n *   turf.polygon([[[12,48],[2,41],[24,38],[12,48]], [[9,44],[13,41],[13,45],[9,44]]]),\n *   turf.polygon([[[5, 5], [0, 0], [2, 2], [4, 4], [5, 5]]])\n * ]);\n *\n * turf.lineReduce(multiPoly, function (previousValue, currentLine, featureIndex, multiFeatureIndex, geometryIndex) {\n *   //=previousValue\n *   //=currentLine\n *   //=featureIndex\n *   //=multiFeatureIndex\n *   //=geometryIndex\n *   return currentLine\n * });\n */\nfunction lineReduce(geojson, callback, initialValue) {\n  var previousValue = initialValue;\n  lineEach(\n    geojson,\n    function (currentLine, featureIndex, multiFeatureIndex, geometryIndex) {\n      if (featureIndex === 0 && initialValue === undefined)\n        previousValue = currentLine;\n      else\n        previousValue = callback(\n          previousValue,\n          currentLine,\n          featureIndex,\n          multiFeatureIndex,\n          geometryIndex\n        );\n    }\n  );\n  return previousValue;\n}\n\n/**\n * Finds a particular 2-vertex LineString Segment from a GeoJSON using `@turf/meta` indexes.\n *\n * Negative indexes are permitted.\n * Point & MultiPoint will always return null.\n *\n * @param {FeatureCollection|Feature|Geometry} geojson Any GeoJSON Feature or Geometry\n * @param {Object} [options={}] Optional parameters\n * @param {number} [options.featureIndex=0] Feature Index\n * @param {number} [options.multiFeatureIndex=0] Multi-Feature Index\n * @param {number} [options.geometryIndex=0] Geometry Index\n * @param {number} [options.segmentIndex=0] Segment Index\n * @param {Object} [options.properties={}] Translate Properties to output LineString\n * @param {BBox} [options.bbox={}] Translate BBox to output LineString\n * @param {number|string} [options.id={}] Translate Id to output LineString\n * @returns {Feature<LineString>} 2-vertex GeoJSON Feature LineString\n * @example\n * var multiLine = turf.multiLineString([\n *     [[10, 10], [50, 30], [30, 40]],\n *     [[-10, -10], [-50, -30], [-30, -40]]\n * ]);\n *\n * // First Segment (defaults are 0)\n * turf.findSegment(multiLine);\n * // => Feature<LineString<[[10, 10], [50, 30]]>>\n *\n * // First Segment of 2nd Multi Feature\n * turf.findSegment(multiLine, {multiFeatureIndex: 1});\n * // => Feature<LineString<[[-10, -10], [-50, -30]]>>\n *\n * // Last Segment of Last Multi Feature\n * turf.findSegment(multiLine, {multiFeatureIndex: -1, segmentIndex: -1});\n * // => Feature<LineString<[[-50, -30], [-30, -40]]>>\n */\nfunction findSegment(geojson, options) {\n  // Optional Parameters\n  options = options || {};\n  if (!helpers.isObject(options)) throw new Error(\"options is invalid\");\n  var featureIndex = options.featureIndex || 0;\n  var multiFeatureIndex = options.multiFeatureIndex || 0;\n  var geometryIndex = options.geometryIndex || 0;\n  var segmentIndex = options.segmentIndex || 0;\n\n  // Find FeatureIndex\n  var properties = options.properties;\n  var geometry;\n\n  switch (geojson.type) {\n    case \"FeatureCollection\":\n      if (featureIndex < 0)\n        featureIndex = geojson.features.length + featureIndex;\n      properties = properties || geojson.features[featureIndex].properties;\n      geometry = geojson.features[featureIndex].geometry;\n      break;\n    case \"Feature\":\n      properties = properties || geojson.properties;\n      geometry = geojson.geometry;\n      break;\n    case \"Point\":\n    case \"MultiPoint\":\n      return null;\n    case \"LineString\":\n    case \"Polygon\":\n    case \"MultiLineString\":\n    case \"MultiPolygon\":\n      geometry = geojson;\n      break;\n    default:\n      throw new Error(\"geojson is invalid\");\n  }\n\n  // Find SegmentIndex\n  if (geometry === null) return null;\n  var coords = geometry.coordinates;\n  switch (geometry.type) {\n    case \"Point\":\n    case \"MultiPoint\":\n      return null;\n    case \"LineString\":\n      if (segmentIndex < 0) segmentIndex = coords.length + segmentIndex - 1;\n      return helpers.lineString(\n        [coords[segmentIndex], coords[segmentIndex + 1]],\n        properties,\n        options\n      );\n    case \"Polygon\":\n      if (geometryIndex < 0) geometryIndex = coords.length + geometryIndex;\n      if (segmentIndex < 0)\n        segmentIndex = coords[geometryIndex].length + segmentIndex - 1;\n      return helpers.lineString(\n        [\n          coords[geometryIndex][segmentIndex],\n          coords[geometryIndex][segmentIndex + 1],\n        ],\n        properties,\n        options\n      );\n    case \"MultiLineString\":\n      if (multiFeatureIndex < 0)\n        multiFeatureIndex = coords.length + multiFeatureIndex;\n      if (segmentIndex < 0)\n        segmentIndex = coords[multiFeatureIndex].length + segmentIndex - 1;\n      return helpers.lineString(\n        [\n          coords[multiFeatureIndex][segmentIndex],\n          coords[multiFeatureIndex][segmentIndex + 1],\n        ],\n        properties,\n        options\n      );\n    case \"MultiPolygon\":\n      if (multiFeatureIndex < 0)\n        multiFeatureIndex = coords.length + multiFeatureIndex;\n      if (geometryIndex < 0)\n        geometryIndex = coords[multiFeatureIndex].length + geometryIndex;\n      if (segmentIndex < 0)\n        segmentIndex =\n          coords[multiFeatureIndex][geometryIndex].length - segmentIndex - 1;\n      return helpers.lineString(\n        [\n          coords[multiFeatureIndex][geometryIndex][segmentIndex],\n          coords[multiFeatureIndex][geometryIndex][segmentIndex + 1],\n        ],\n        properties,\n        options\n      );\n  }\n  throw new Error(\"geojson is invalid\");\n}\n\n/**\n * Finds a particular Point from a GeoJSON using `@turf/meta` indexes.\n *\n * Negative indexes are permitted.\n *\n * @param {FeatureCollection|Feature|Geometry} geojson Any GeoJSON Feature or Geometry\n * @param {Object} [options={}] Optional parameters\n * @param {number} [options.featureIndex=0] Feature Index\n * @param {number} [options.multiFeatureIndex=0] Multi-Feature Index\n * @param {number} [options.geometryIndex=0] Geometry Index\n * @param {number} [options.coordIndex=0] Coord Index\n * @param {Object} [options.properties={}] Translate Properties to output Point\n * @param {BBox} [options.bbox={}] Translate BBox to output Point\n * @param {number|string} [options.id={}] Translate Id to output Point\n * @returns {Feature<Point>} 2-vertex GeoJSON Feature Point\n * @example\n * var multiLine = turf.multiLineString([\n *     [[10, 10], [50, 30], [30, 40]],\n *     [[-10, -10], [-50, -30], [-30, -40]]\n * ]);\n *\n * // First Segment (defaults are 0)\n * turf.findPoint(multiLine);\n * // => Feature<Point<[10, 10]>>\n *\n * // First Segment of the 2nd Multi-Feature\n * turf.findPoint(multiLine, {multiFeatureIndex: 1});\n * // => Feature<Point<[-10, -10]>>\n *\n * // Last Segment of last Multi-Feature\n * turf.findPoint(multiLine, {multiFeatureIndex: -1, coordIndex: -1});\n * // => Feature<Point<[-30, -40]>>\n */\nfunction findPoint(geojson, options) {\n  // Optional Parameters\n  options = options || {};\n  if (!helpers.isObject(options)) throw new Error(\"options is invalid\");\n  var featureIndex = options.featureIndex || 0;\n  var multiFeatureIndex = options.multiFeatureIndex || 0;\n  var geometryIndex = options.geometryIndex || 0;\n  var coordIndex = options.coordIndex || 0;\n\n  // Find FeatureIndex\n  var properties = options.properties;\n  var geometry;\n\n  switch (geojson.type) {\n    case \"FeatureCollection\":\n      if (featureIndex < 0)\n        featureIndex = geojson.features.length + featureIndex;\n      properties = properties || geojson.features[featureIndex].properties;\n      geometry = geojson.features[featureIndex].geometry;\n      break;\n    case \"Feature\":\n      properties = properties || geojson.properties;\n      geometry = geojson.geometry;\n      break;\n    case \"Point\":\n    case \"MultiPoint\":\n      return null;\n    case \"LineString\":\n    case \"Polygon\":\n    case \"MultiLineString\":\n    case \"MultiPolygon\":\n      geometry = geojson;\n      break;\n    default:\n      throw new Error(\"geojson is invalid\");\n  }\n\n  // Find Coord Index\n  if (geometry === null) return null;\n  var coords = geometry.coordinates;\n  switch (geometry.type) {\n    case \"Point\":\n      return helpers.point(coords, properties, options);\n    case \"MultiPoint\":\n      if (multiFeatureIndex < 0)\n        multiFeatureIndex = coords.length + multiFeatureIndex;\n      return helpers.point(coords[multiFeatureIndex], properties, options);\n    case \"LineString\":\n      if (coordIndex < 0) coordIndex = coords.length + coordIndex;\n      return helpers.point(coords[coordIndex], properties, options);\n    case \"Polygon\":\n      if (geometryIndex < 0) geometryIndex = coords.length + geometryIndex;\n      if (coordIndex < 0)\n        coordIndex = coords[geometryIndex].length + coordIndex;\n      return helpers.point(coords[geometryIndex][coordIndex], properties, options);\n    case \"MultiLineString\":\n      if (multiFeatureIndex < 0)\n        multiFeatureIndex = coords.length + multiFeatureIndex;\n      if (coordIndex < 0)\n        coordIndex = coords[multiFeatureIndex].length + coordIndex;\n      return helpers.point(coords[multiFeatureIndex][coordIndex], properties, options);\n    case \"MultiPolygon\":\n      if (multiFeatureIndex < 0)\n        multiFeatureIndex = coords.length + multiFeatureIndex;\n      if (geometryIndex < 0)\n        geometryIndex = coords[multiFeatureIndex].length + geometryIndex;\n      if (coordIndex < 0)\n        coordIndex =\n          coords[multiFeatureIndex][geometryIndex].length - coordIndex;\n      return helpers.point(\n        coords[multiFeatureIndex][geometryIndex][coordIndex],\n        properties,\n        options\n      );\n  }\n  throw new Error(\"geojson is invalid\");\n}\n\nexports.coordAll = coordAll;\nexports.coordEach = coordEach;\nexports.coordReduce = coordReduce;\nexports.featureEach = featureEach;\nexports.featureReduce = featureReduce;\nexports.findPoint = findPoint;\nexports.findSegment = findSegment;\nexports.flattenEach = flattenEach;\nexports.flattenReduce = flattenReduce;\nexports.geomEach = geomEach;\nexports.geomReduce = geomReduce;\nexports.lineEach = lineEach;\nexports.lineReduce = lineReduce;\nexports.propEach = propEach;\nexports.propReduce = propReduce;\nexports.segmentEach = segmentEach;\nexports.segmentReduce = segmentReduce;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar meta_1 = require(\"@turf/meta\");\n/**\n * Takes a set of features, calculates the bbox of all input features, and returns a bounding box.\n *\n * @name bbox\n * @param {GeoJSON} geojson any GeoJSON object\n * @returns {BBox} bbox extent in [minX, minY, maxX, maxY] order\n * @example\n * var line = turf.lineString([[-74, 40], [-78, 42], [-82, 35]]);\n * var bbox = turf.bbox(line);\n * var bboxPolygon = turf.bboxPolygon(bbox);\n *\n * //addToMap\n * var addToMap = [line, bboxPolygon]\n */\nfunction bbox(geojson) {\n    var result = [Infinity, Infinity, -Infinity, -Infinity];\n    meta_1.coordEach(geojson, function (coord) {\n        if (result[0] > coord[0]) {\n            result[0] = coord[0];\n        }\n        if (result[1] > coord[1]) {\n            result[1] = coord[1];\n        }\n        if (result[2] < coord[0]) {\n            result[2] = coord[0];\n        }\n        if (result[3] < coord[1]) {\n            result[3] = coord[1];\n        }\n    });\n    return result;\n}\nbbox[\"default\"] = bbox;\nexports.default = bbox;\n","var rbush = require('rbush');\nvar helpers = require('@turf/helpers');\nvar meta = require('@turf/meta');\nvar turfBBox = require('@turf/bbox').default;\nvar featureEach = meta.featureEach;\nvar coordEach = meta.coordEach;\nvar polygon = helpers.polygon;\nvar featureCollection = helpers.featureCollection;\n\n/**\n * GeoJSON implementation of [RBush](https://github.com/mourner/rbush#rbush) spatial index.\n *\n * @name rbush\n * @param {number} [maxEntries=9] defines the maximum number of entries in a tree node. 9 (used by default) is a\n * reasonable choice for most applications. Higher value means faster insertion and slower search, and vice versa.\n * @returns {RBush} GeoJSON RBush\n * @example\n * var geojsonRbush = require('geojson-rbush').default;\n * var tree = geojsonRbush();\n */\nfunction geojsonRbush(maxEntries) {\n    var tree = new rbush(maxEntries);\n    /**\n     * [insert](https://github.com/mourner/rbush#data-format)\n     *\n     * @param {Feature} feature insert single GeoJSON Feature\n     * @returns {RBush} GeoJSON RBush\n     * @example\n     * var poly = turf.polygon([[[-78, 41], [-67, 41], [-67, 48], [-78, 48], [-78, 41]]]);\n     * tree.insert(poly)\n     */\n    tree.insert = function (feature) {\n        if (feature.type !== 'Feature') throw new Error('invalid feature');\n        feature.bbox = feature.bbox ? feature.bbox : turfBBox(feature);\n        return rbush.prototype.insert.call(this, feature);\n    };\n\n    /**\n     * [load](https://github.com/mourner/rbush#bulk-inserting-data)\n     *\n     * @param {FeatureCollection|Array<Feature>} features load entire GeoJSON FeatureCollection\n     * @returns {RBush} GeoJSON RBush\n     * @example\n     * var polys = turf.polygons([\n     *     [[[-78, 41], [-67, 41], [-67, 48], [-78, 48], [-78, 41]]],\n     *     [[[-93, 32], [-83, 32], [-83, 39], [-93, 39], [-93, 32]]]\n     * ]);\n     * tree.load(polys);\n     */\n    tree.load = function (features) {\n        var load = [];\n        // Load an Array of Features\n        if (Array.isArray(features)) {\n            features.forEach(function (feature) {\n                if (feature.type !== 'Feature') throw new Error('invalid features');\n                feature.bbox = feature.bbox ? feature.bbox : turfBBox(feature);\n                load.push(feature);\n            });\n        } else {\n            // Load a FeatureCollection\n            featureEach(features, function (feature) {\n                if (feature.type !== 'Feature') throw new Error('invalid features');\n                feature.bbox = feature.bbox ? feature.bbox : turfBBox(feature);\n                load.push(feature);\n            });\n        }\n        return rbush.prototype.load.call(this, load);\n    };\n\n    /**\n     * [remove](https://github.com/mourner/rbush#removing-data)\n     *\n     * @param {Feature} feature remove single GeoJSON Feature\n     * @param {Function} equals Pass a custom equals function to compare by value for removal.\n     * @returns {RBush} GeoJSON RBush\n     * @example\n     * var poly = turf.polygon([[[-78, 41], [-67, 41], [-67, 48], [-78, 48], [-78, 41]]]);\n     *\n     * tree.remove(poly);\n     */\n    tree.remove = function (feature, equals) {\n        if (feature.type !== 'Feature') throw new Error('invalid feature');\n        feature.bbox = feature.bbox ? feature.bbox : turfBBox(feature);\n        return rbush.prototype.remove.call(this, feature, equals);\n    };\n\n    /**\n     * [clear](https://github.com/mourner/rbush#removing-data)\n     *\n     * @returns {RBush} GeoJSON Rbush\n     * @example\n     * tree.clear()\n     */\n    tree.clear = function () {\n        return rbush.prototype.clear.call(this);\n    };\n\n    /**\n     * [search](https://github.com/mourner/rbush#search)\n     *\n     * @param {BBox|FeatureCollection|Feature} geojson search with GeoJSON\n     * @returns {FeatureCollection} all features that intersects with the given GeoJSON.\n     * @example\n     * var poly = turf.polygon([[[-78, 41], [-67, 41], [-67, 48], [-78, 48], [-78, 41]]]);\n     *\n     * tree.search(poly);\n     */\n    tree.search = function (geojson) {\n        var features = rbush.prototype.search.call(this, this.toBBox(geojson));\n        return featureCollection(features);\n    };\n\n    /**\n     * [collides](https://github.com/mourner/rbush#collisions)\n     *\n     * @param {BBox|FeatureCollection|Feature} geojson collides with GeoJSON\n     * @returns {boolean} true if there are any items intersecting the given GeoJSON, otherwise false.\n     * @example\n     * var poly = turf.polygon([[[-78, 41], [-67, 41], [-67, 48], [-78, 48], [-78, 41]]]);\n     *\n     * tree.collides(poly);\n     */\n    tree.collides = function (geojson) {\n        return rbush.prototype.collides.call(this, this.toBBox(geojson));\n    };\n\n    /**\n     * [all](https://github.com/mourner/rbush#search)\n     *\n     * @returns {FeatureCollection} all the features in RBush\n     * @example\n     * tree.all()\n     */\n    tree.all = function () {\n        var features = rbush.prototype.all.call(this);\n        return featureCollection(features);\n    };\n\n    /**\n     * [toJSON](https://github.com/mourner/rbush#export-and-import)\n     *\n     * @returns {any} export data as JSON object\n     * @example\n     * var exported = tree.toJSON()\n     */\n    tree.toJSON = function () {\n        return rbush.prototype.toJSON.call(this);\n    };\n\n    /**\n     * [fromJSON](https://github.com/mourner/rbush#export-and-import)\n     *\n     * @param {any} json import previously exported data\n     * @returns {RBush} GeoJSON RBush\n     * @example\n     * var exported = {\n     *   \"children\": [\n     *     {\n     *       \"type\": \"Feature\",\n     *       \"geometry\": {\n     *         \"type\": \"Point\",\n     *         \"coordinates\": [110, 50]\n     *       },\n     *       \"properties\": {},\n     *       \"bbox\": [110, 50, 110, 50]\n     *     }\n     *   ],\n     *   \"height\": 1,\n     *   \"leaf\": true,\n     *   \"minX\": 110,\n     *   \"minY\": 50,\n     *   \"maxX\": 110,\n     *   \"maxY\": 50\n     * }\n     * tree.fromJSON(exported)\n     */\n    tree.fromJSON = function (json) {\n        return rbush.prototype.fromJSON.call(this, json);\n    };\n\n    /**\n     * Converts GeoJSON to {minX, minY, maxX, maxY} schema\n     *\n     * @private\n     * @param {BBox|FeatureCollection|Feature} geojson feature(s) to retrieve BBox from\n     * @returns {Object} converted to {minX, minY, maxX, maxY}\n     */\n    tree.toBBox = function (geojson) {\n        var bbox;\n        if (geojson.bbox) bbox = geojson.bbox;\n        else if (Array.isArray(geojson) && geojson.length === 4) bbox = geojson;\n        else if (Array.isArray(geojson) && geojson.length === 6) bbox = [geojson[0], geojson[1], geojson[3], geojson[4]];\n        else if (geojson.type === 'Feature') bbox = turfBBox(geojson);\n        else if (geojson.type === 'FeatureCollection') bbox = turfBBox(geojson);\n        else throw new Error('invalid geojson')\n\n        return {\n            minX: bbox[0],\n            minY: bbox[1],\n            maxX: bbox[2],\n            maxY: bbox[3]\n        };\n    };\n    return tree;\n}\n\nmodule.exports = geojsonRbush;\nmodule.exports.default = geojsonRbush;\n","import { feature, featureCollection, point, } from \"@turf/helpers\";\nimport { getCoords } from \"@turf/invariant\";\nimport lineSegment from \"@turf/line-segment\";\nimport { featureEach } from \"@turf/meta\";\nimport rbush from \"geojson-rbush\";\n/**\n * Takes any LineString or Polygon GeoJSON and returns the intersecting point(s).\n *\n * @name lineIntersect\n * @param {GeoJSON} line1 any LineString or Polygon\n * @param {GeoJSON} line2 any LineString or Polygon\n * @returns {FeatureCollection<Point>} point(s) that intersect both\n * @example\n * var line1 = turf.lineString([[126, -11], [129, -21]]);\n * var line2 = turf.lineString([[123, -18], [131, -14]]);\n * var intersects = turf.lineIntersect(line1, line2);\n *\n * //addToMap\n * var addToMap = [line1, line2, intersects]\n */\nfunction lineIntersect(line1, line2) {\n    var unique = {};\n    var results = [];\n    // First, normalize geometries to features\n    // Then, handle simple 2-vertex segments\n    if (line1.type === \"LineString\") {\n        line1 = feature(line1);\n    }\n    if (line2.type === \"LineString\") {\n        line2 = feature(line2);\n    }\n    if (line1.type === \"Feature\" &&\n        line2.type === \"Feature\" &&\n        line1.geometry !== null &&\n        line2.geometry !== null &&\n        line1.geometry.type === \"LineString\" &&\n        line2.geometry.type === \"LineString\" &&\n        line1.geometry.coordinates.length === 2 &&\n        line2.geometry.coordinates.length === 2) {\n        var intersect = intersects(line1, line2);\n        if (intersect) {\n            results.push(intersect);\n        }\n        return featureCollection(results);\n    }\n    // Handles complex GeoJSON Geometries\n    var tree = rbush();\n    tree.load(lineSegment(line2));\n    featureEach(lineSegment(line1), function (segment) {\n        featureEach(tree.search(segment), function (match) {\n            var intersect = intersects(segment, match);\n            if (intersect) {\n                // prevent duplicate points https://github.com/Turfjs/turf/issues/688\n                var key = getCoords(intersect).join(\",\");\n                if (!unique[key]) {\n                    unique[key] = true;\n                    results.push(intersect);\n                }\n            }\n        });\n    });\n    return featureCollection(results);\n}\n/**\n * Find a point that intersects LineStrings with two coordinates each\n *\n * @private\n * @param {Feature<LineString>} line1 GeoJSON LineString (Must only contain 2 coordinates)\n * @param {Feature<LineString>} line2 GeoJSON LineString (Must only contain 2 coordinates)\n * @returns {Feature<Point>} intersecting GeoJSON Point\n */\nfunction intersects(line1, line2) {\n    var coords1 = getCoords(line1);\n    var coords2 = getCoords(line2);\n    if (coords1.length !== 2) {\n        throw new Error(\"<intersects> line1 must only contain 2 coordinates\");\n    }\n    if (coords2.length !== 2) {\n        throw new Error(\"<intersects> line2 must only contain 2 coordinates\");\n    }\n    var x1 = coords1[0][0];\n    var y1 = coords1[0][1];\n    var x2 = coords1[1][0];\n    var y2 = coords1[1][1];\n    var x3 = coords2[0][0];\n    var y3 = coords2[0][1];\n    var x4 = coords2[1][0];\n    var y4 = coords2[1][1];\n    var denom = (y4 - y3) * (x2 - x1) - (x4 - x3) * (y2 - y1);\n    var numeA = (x4 - x3) * (y1 - y3) - (y4 - y3) * (x1 - x3);\n    var numeB = (x2 - x1) * (y1 - y3) - (y2 - y1) * (x1 - x3);\n    if (denom === 0) {\n        if (numeA === 0 && numeB === 0) {\n            return null;\n        }\n        return null;\n    }\n    var uA = numeA / denom;\n    var uB = numeB / denom;\n    if (uA >= 0 && uA <= 1 && uB >= 0 && uB <= 1) {\n        var x = x1 + uA * (x2 - x1);\n        var y = y1 + uA * (y2 - y1);\n        return point([x, y]);\n    }\n    return null;\n}\nexport default lineIntersect;\n","import { featureCollection, lineString, multiLineString } from \"@turf/helpers\";\nimport { getGeom } from \"@turf/invariant\";\n/**\n * Converts a {@link Polygon} to {@link LineString|(Multi)LineString} or {@link MultiPolygon} to a\n * {@link FeatureCollection} of {@link LineString|(Multi)LineString}.\n *\n * @name polygonToLine\n * @param {Feature<Polygon|MultiPolygon>} poly Feature to convert\n * @param {Object} [options={}] Optional parameters\n * @param {Object} [options.properties={}] translates GeoJSON properties to Feature\n * @returns {FeatureCollection|Feature<LineString|MultiLinestring>} converted (Multi)Polygon to (Multi)LineString\n * @example\n * var poly = turf.polygon([[[125, -30], [145, -30], [145, -20], [125, -20], [125, -30]]]);\n *\n * var line = turf.polygonToLine(poly);\n *\n * //addToMap\n * var addToMap = [line];\n */\nexport default function (poly, options) {\n    if (options === void 0) { options = {}; }\n    var geom = getGeom(poly);\n    if (!options.properties && poly.type === \"Feature\") {\n        options.properties = poly.properties;\n    }\n    switch (geom.type) {\n        case \"Polygon\":\n            return polygonToLine(geom, options);\n        case \"MultiPolygon\":\n            return multiPolygonToLine(geom, options);\n        default:\n            throw new Error(\"invalid poly\");\n    }\n}\n/**\n * @private\n */\nexport function polygonToLine(poly, options) {\n    if (options === void 0) { options = {}; }\n    var geom = getGeom(poly);\n    var coords = geom.coordinates;\n    var properties = options.properties\n        ? options.properties\n        : poly.type === \"Feature\"\n            ? poly.properties\n            : {};\n    return coordsToLine(coords, properties);\n}\n/**\n * @private\n */\nexport function multiPolygonToLine(multiPoly, options) {\n    if (options === void 0) { options = {}; }\n    var geom = getGeom(multiPoly);\n    var coords = geom.coordinates;\n    var properties = options.properties\n        ? options.properties\n        : multiPoly.type === \"Feature\"\n            ? multiPoly.properties\n            : {};\n    var lines = [];\n    coords.forEach(function (coord) {\n        lines.push(coordsToLine(coord, properties));\n    });\n    return featureCollection(lines);\n}\n/**\n * @private\n */\nexport function coordsToLine(coords, properties) {\n    if (coords.length > 1) {\n        return multiLineString(coords, properties);\n    }\n    return lineString(coords[0], properties);\n}\n","import booleanPointInPolygon from \"@turf/boolean-point-in-polygon\";\nimport lineIntersect from \"@turf/line-intersect\";\nimport { flattenEach } from \"@turf/meta\";\nimport polygonToLine from \"@turf/polygon-to-line\";\n/**\n * Boolean-disjoint returns (TRUE) if the intersection of the two geometries is an empty set.\n *\n * @name booleanDisjoint\n * @param {Geometry|Feature<any>} feature1 GeoJSON Feature or Geometry\n * @param {Geometry|Feature<any>} feature2 GeoJSON Feature or Geometry\n * @returns {boolean} true/false\n * @example\n * var point = turf.point([2, 2]);\n * var line = turf.lineString([[1, 1], [1, 2], [1, 3], [1, 4]]);\n *\n * turf.booleanDisjoint(line, point);\n * //=true\n */\nfunction booleanDisjoint(feature1, feature2) {\n    var bool = true;\n    flattenEach(feature1, function (flatten1) {\n        flattenEach(feature2, function (flatten2) {\n            if (bool === false) {\n                return false;\n            }\n            bool = disjoint(flatten1.geometry, flatten2.geometry);\n        });\n    });\n    return bool;\n}\n/**\n * Disjoint operation for simple Geometries (Point/LineString/Polygon)\n *\n * @private\n * @param {Geometry<any>} geom1 GeoJSON Geometry\n * @param {Geometry<any>} geom2 GeoJSON Geometry\n * @returns {boolean} true/false\n */\nfunction disjoint(geom1, geom2) {\n    switch (geom1.type) {\n        case \"Point\":\n            switch (geom2.type) {\n                case \"Point\":\n                    return !compareCoords(geom1.coordinates, geom2.coordinates);\n                case \"LineString\":\n                    return !isPointOnLine(geom2, geom1);\n                case \"Polygon\":\n                    return !booleanPointInPolygon(geom1, geom2);\n            }\n            /* istanbul ignore next */\n            break;\n        case \"LineString\":\n            switch (geom2.type) {\n                case \"Point\":\n                    return !isPointOnLine(geom1, geom2);\n                case \"LineString\":\n                    return !isLineOnLine(geom1, geom2);\n                case \"Polygon\":\n                    return !isLineInPoly(geom2, geom1);\n            }\n            /* istanbul ignore next */\n            break;\n        case \"Polygon\":\n            switch (geom2.type) {\n                case \"Point\":\n                    return !booleanPointInPolygon(geom2, geom1);\n                case \"LineString\":\n                    return !isLineInPoly(geom1, geom2);\n                case \"Polygon\":\n                    return !isPolyInPoly(geom2, geom1);\n            }\n    }\n    return false;\n}\n// http://stackoverflow.com/a/11908158/1979085\nfunction isPointOnLine(lineString, pt) {\n    for (var i = 0; i < lineString.coordinates.length - 1; i++) {\n        if (isPointOnLineSegment(lineString.coordinates[i], lineString.coordinates[i + 1], pt.coordinates)) {\n            return true;\n        }\n    }\n    return false;\n}\nfunction isLineOnLine(lineString1, lineString2) {\n    var doLinesIntersect = lineIntersect(lineString1, lineString2);\n    if (doLinesIntersect.features.length > 0) {\n        return true;\n    }\n    return false;\n}\nfunction isLineInPoly(polygon, lineString) {\n    for (var _i = 0, _a = lineString.coordinates; _i < _a.length; _i++) {\n        var coord = _a[_i];\n        if (booleanPointInPolygon(coord, polygon)) {\n            return true;\n        }\n    }\n    var doLinesIntersect = lineIntersect(lineString, polygonToLine(polygon));\n    if (doLinesIntersect.features.length > 0) {\n        return true;\n    }\n    return false;\n}\n/**\n * Is Polygon (geom1) in Polygon (geom2)\n * Only takes into account outer rings\n * See http://stackoverflow.com/a/4833823/1979085\n *\n * @private\n * @param {Geometry|Feature<Polygon>} feature1 Polygon1\n * @param {Geometry|Feature<Polygon>} feature2 Polygon2\n * @returns {boolean} true/false\n */\nfunction isPolyInPoly(feature1, feature2) {\n    for (var _i = 0, _a = feature1.coordinates[0]; _i < _a.length; _i++) {\n        var coord1 = _a[_i];\n        if (booleanPointInPolygon(coord1, feature2)) {\n            return true;\n        }\n    }\n    for (var _b = 0, _c = feature2.coordinates[0]; _b < _c.length; _b++) {\n        var coord2 = _c[_b];\n        if (booleanPointInPolygon(coord2, feature1)) {\n            return true;\n        }\n    }\n    var doLinesIntersect = lineIntersect(polygonToLine(feature1), polygonToLine(feature2));\n    if (doLinesIntersect.features.length > 0) {\n        return true;\n    }\n    return false;\n}\nfunction isPointOnLineSegment(lineSegmentStart, lineSegmentEnd, pt) {\n    var dxc = pt[0] - lineSegmentStart[0];\n    var dyc = pt[1] - lineSegmentStart[1];\n    var dxl = lineSegmentEnd[0] - lineSegmentStart[0];\n    var dyl = lineSegmentEnd[1] - lineSegmentStart[1];\n    var cross = dxc * dyl - dyc * dxl;\n    if (cross !== 0) {\n        return false;\n    }\n    if (Math.abs(dxl) >= Math.abs(dyl)) {\n        if (dxl > 0) {\n            return lineSegmentStart[0] <= pt[0] && pt[0] <= lineSegmentEnd[0];\n        }\n        else {\n            return lineSegmentEnd[0] <= pt[0] && pt[0] <= lineSegmentStart[0];\n        }\n    }\n    else if (dyl > 0) {\n        return lineSegmentStart[1] <= pt[1] && pt[1] <= lineSegmentEnd[1];\n    }\n    else {\n        return lineSegmentEnd[1] <= pt[1] && pt[1] <= lineSegmentStart[1];\n    }\n}\n/**\n * compareCoords\n *\n * @private\n * @param {Position} pair1 point [x,y]\n * @param {Position} pair2 point [x,y]\n * @returns {boolean} true/false if coord pairs match\n */\nfunction compareCoords(pair1, pair2) {\n    return pair1[0] === pair2[0] && pair1[1] === pair2[1];\n}\nexport default booleanDisjoint;\n","import booleanDisjoint from \"@turf/boolean-disjoint\";\nimport { flattenEach } from \"@turf/meta\";\n/**\n * Boolean-intersects returns (TRUE) two geometries intersect.\n *\n * @name booleanIntersects\n * @param {Geometry|Feature<any>} feature1 GeoJSON Feature or Geometry\n * @param {Geometry|Feature<any>} feature2 GeoJSON Feature or Geometry\n * @returns {boolean} true/false\n * @example\n * var point = turf.point([2, 2]);\n * var line = turf.lineString([[1, 1], [1, 2], [1, 3], [1, 4]]);\n *\n * turf.booleanIntersects(line, point);\n * //=true\n */\nexport default function booleanIntersects(feature1, feature2) {\n    var bool = false;\n    flattenEach(feature1, function (flatten1) {\n        flattenEach(feature2, function (flatten2) {\n            if (bool === true) {\n                return true;\n            }\n            bool = !booleanDisjoint(flatten1.geometry, flatten2.geometry);\n        });\n    });\n    return bool;\n}\n","import { BBox } from \"geojson\";\n\nconst d2r = Math.PI / 180,\n      r2d = 180 / Math.PI,\n      MAX_ZOOM = 28;\n\nexport function getBboxZoom(bbox: BBox) {\n  for (let z = 0; z < MAX_ZOOM; z++) {\n    const mask = 1 << (32 - (z + 1));\n    if (((bbox[0] & mask) !== (bbox[2] & mask)) ||\n        ((bbox[1] & mask) !== (bbox[3] & mask))) {\n      return z;\n    }\n  }\n\n  return MAX_ZOOM;\n}\n\n/**\n * Get the smallest tile to cover a bbox\n */\nexport function bboxToTile(bboxCoords: BBox, minZoom?: number): Array<number> {\n  const min = pointToTile(bboxCoords[0], bboxCoords[1], 32);\n  const max = pointToTile(bboxCoords[2], bboxCoords[3], 32);\n  const bbox: BBox = [min[0], min[1], max[0], max[1]];\n\n  const z = Math.min(getBboxZoom(bbox), typeof minZoom !== 'undefined' ? minZoom : MAX_ZOOM);\n  if (z === 0) return [0, 0, 0];\n  const x = bbox[0] >>> (32 - z);\n  const y = bbox[1] >>> (32 - z);\n  return [x, y, z];\n}\n\n/**\n * Get the tile for a point at a specified zoom level\n */\nexport function pointToTile(lon: number, lat: number, z: number) {\n  var tile = pointToTileFraction(lon, lat, z);\n  tile[0] = Math.floor(tile[0]);\n  tile[1] = Math.floor(tile[1]);\n  return tile;\n}\n\n/**\n * Get the precise fractional tile location for a point at a zoom level\n */\nfunction pointToTileFraction(lon: number, lat: number, z: number) {\n  var sin = Math.sin(lat * d2r),\n      z2 = Math.pow(2, z),\n      x = z2 * (lon / 360 + 0.5),\n      y = z2 * (0.5 - 0.25 * Math.log((1 + sin) / (1 - sin)) / Math.PI);\n\n  // Wrap Tile X\n  x = x % z2;\n  if (x < 0) x = x + z2;\n  return [x, y, z];\n}\n","import { LngLatWithAltitude } from \"./types\";\nimport { calculateZFXY, getBBox, getChildren, getFloor, getParent, isZFXYTile, parseZFXYString, ZFXYTile, zfxyWraparound, getSurrounding, getCenterLngLatAlt } from \"./zfxy\";\nimport { generateTilehash, parseZFXYTilehash } from \"./zfxy_tilehash\";\nimport turfBBox from '@turf/bbox';\nimport turfBooleanIntersects from '@turf/boolean-intersects';\nimport type { Geometry, Polygon } from \"geojson\";\nimport { bboxToTile, pointToTile } from \"./tilebelt\";\n\nconst DEFAULT_ZOOM = 25 as const;\n\nexport class Space {\n  center: LngLatWithAltitude\n  alt: number\n  zoom: number\n\n  zfxy: ZFXYTile\n\n  id: string\n  zfxyStr: string\n  tilehash: string\n\n  /**\n   * Create a new Space\n   *\n   * @param input A LngLatWithAltitude or string containing either a ZFXY or tilehash-encoded ZFXY.\n   * @param zoom Optional. Defaults to 25 when `input` is LngLatWithAltitude. Ignored when ZXFY or tilehash is provided.\n   */\n  constructor(input: LngLatWithAltitude | ZFXYTile | string, zoom?: number) {\n    if (typeof input === 'string') {\n      // parse string\n      let zfxy = parseZFXYString(input) || parseZFXYTilehash(input);\n      if (zfxy) {\n        this.zfxy = zfxy;\n        this._regenerateAttributesFromZFXY();\n      } else {\n        throw new Error(`parse ZFXY failed with input: ${input}`);\n      }\n      return;\n    } else if (isZFXYTile(input)) {\n      this.zfxy = input;\n      this._regenerateAttributesFromZFXY();\n      return;\n    } else {\n      this.zfxy = calculateZFXY({\n        ...input,\n        zoom: (typeof zoom !== 'undefined') ? zoom : DEFAULT_ZOOM,\n      });\n    }\n\n    this._regenerateAttributesFromZFXY();\n  }\n\n  /* - PUBLIC API - */\n\n  up(by: number = 1) {\n    return this.move({f: by});\n  }\n\n  down(by: number = 1) {\n    return this.move({f: -by});\n  }\n\n  north(by: number = 1) {\n    return this.move({y: by});\n  }\n\n  south(by: number = 1) {\n    return this.move({y: -by});\n  }\n\n  east(by: number = 1) {\n    return this.move({x: by});\n  }\n\n  west(by: number = 1) {\n    return this.move({x: -by});\n  }\n\n  move(by: Partial<Omit<ZFXYTile, 'z'>>) {\n    const newSpace = new Space(this.zfxy);\n    newSpace.zfxy = zfxyWraparound({\n      z: newSpace.zfxy.z,\n      f: newSpace.zfxy.f + (by.f || 0),\n      x: newSpace.zfxy.x + (by.x || 0),\n      y: newSpace.zfxy.y + (by.y || 0),\n    });\n    newSpace._regenerateAttributesFromZFXY();\n    return newSpace;\n  }\n\n  parent(atZoom?: number) {\n    const steps = (typeof atZoom === 'undefined') ? 1 : this.zfxy.z - atZoom;\n    return new Space(getParent(this.zfxy, steps));\n  }\n\n  children() {\n    return getChildren(this.zfxy).map((tile) => new Space(tile));\n  }\n\n  /** Return an array of Space objects at the same zoom level that surround this Space\n   * object. This method does not return the Space object itself, so the array will\n   * contain 26 Space objects.\n   */\n  surroundings(): Space[] {\n    return [\n      ...(\n        getSurrounding(this.zfxy)\n        .filter(({z,f,x,y}) => `/${z}/${f}/${x}/${y}` !== this.zfxyStr)\n        .map((tile) => new Space(tile))\n      ),\n      ...(\n        getSurrounding(this.up().zfxy)\n        .map((tile) => new Space(tile))\n      ),\n      ...(\n        getSurrounding(this.down().zfxy)\n        .map((tile) => new Space(tile))\n      ),\n    ];\n  }\n\n  /** Returns true if a point lies within this Space. If the position's altitude is not\n   * specified, it is ignored from the calculation.\n   */\n  contains(position: LngLatWithAltitude) {\n    const geom = this.toGeoJSON();\n    const point = {\n      type: 'Point',\n      coordinates: [position.lng, position.lat],\n    };\n    const floor = this.alt;\n    const ceil = getFloor({...this.zfxy, f: this.zfxy.f + 1});\n    return (\n      turfBooleanIntersects(geom, point) &&\n      (typeof position.alt !== 'undefined' === true ?\n        position.alt >= floor && position.alt < ceil\n        :\n        true\n      )\n    );\n  }\n\n  /** Calculates the polygon of this Space and returns a 2D GeoJSON Polygon. */\n  toGeoJSON(): Polygon {\n    const [nw, se] = getBBox(this.zfxy);\n    return {\n      type: 'Polygon',\n      coordinates: [\n        [\n          [nw.lng, nw.lat],\n          [nw.lng, se.lat],\n          [se.lng, se.lat],\n          [se.lng, nw.lat],\n          [nw.lng, nw.lat],\n        ],\n      ],\n    };\n  }\n\n  /** Calculates the 3D polygon of this Space and returns the vertices of that polygon. */\n  vertices3d(): [number, number, number][] {\n    const [nw, se] = getBBox(this.zfxy);\n    const floor = getFloor(this.zfxy);\n    const ceil = getFloor({...this.zfxy, f: this.zfxy.f + 1});\n    return [\n      [nw.lng, nw.lat, floor],\n      [nw.lng, se.lat, floor],\n      [se.lng, se.lat, floor],\n      [se.lng, nw.lat, floor],\n      [nw.lng, nw.lat, ceil],\n      [nw.lng, se.lat, ceil],\n      [se.lng, se.lat, ceil],\n      [se.lng, nw.lat, ceil],\n    ];\n  }\n\n  static getSpaceById(id: string, zoom?: number) {\n    return new Space(id, zoom);\n  }\n\n  static getSpaceByLocation(loc: LngLatWithAltitude, zoom?: number) {\n    return new Space(loc, zoom);\n  }\n\n  static getSpaceByZFXY(zfxyStr: string) {\n    return new Space(zfxyStr);\n  }\n\n  /** Calculates the smallest spatial ID to fully contain the polygon. Currently only supports 2D polygons. */\n  static boundingSpaceForGeometry(geom: Geometry, minZoom?: number): Space {\n    minZoom = minZoom || 25;\n    const bbox = turfBBox(geom);\n    const largestTile = bboxToTile(bbox, minZoom);\n    const [ x, y, z ] = largestTile;\n    return new Space({x, y, z, f: 0});\n  }\n\n  /** Calculate an array of spaces that make up the polygon. Currently only supports 2D polygons. */\n  static spacesForGeometry(geom: Geometry, zoom: number): Space[] {\n    const z = zoom;\n\n    if (z === 0) {\n      // not recommended.\n      return [new Space('0/0/0/0')];\n    }\n\n    if (geom.type === 'GeometryCollection') {\n      throw new Error('GeometryCollection not supported');\n    }\n\n    // this can be optimized a lot!\n    const bbox = turfBBox(geom),\n          min = pointToTile(bbox[0], bbox[1], 32),\n          max = pointToTile(bbox[2], bbox[3], 32),\n          minX = (Math.min(min[0], max[0])) >>> (32 - z),\n          minY = (Math.min(min[1], max[1])) >>> (32 - z),\n          maxX = (Math.max(max[0], min[0]) >>> (32 - z)) + 1,\n          maxY = (Math.max(max[1], min[1]) >>> (32 - z)) + 1,\n          spaces: Space[] = [];\n\n    // scanline polygon fill algorithm\n    for (let x = minX; x <= maxX; x++) {\n      for (let y = minY; y <= maxY; y++) {\n        const space = new Space({x, y, z, f: 0});\n        if (turfBooleanIntersects(geom, space.toGeoJSON())) {\n          spaces.push(space);\n        }\n      }\n    }\n    return spaces;\n  }\n\n  private _regenerateAttributesFromZFXY() {\n    this.alt = getFloor(this.zfxy);\n    this.center = getCenterLngLatAlt(this.zfxy);\n    this.zoom = this.zfxy.z;\n    this.id = this.tilehash = generateTilehash(this.zfxy);\n    this.zfxyStr = `/${this.zfxy.z}/${this.zfxy.f}/${this.zfxy.x}/${this.zfxy.y}`;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}