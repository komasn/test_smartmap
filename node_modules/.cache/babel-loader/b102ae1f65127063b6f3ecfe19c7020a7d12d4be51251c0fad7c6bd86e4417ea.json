{"ast":null,"code":"import _regeneratorRuntime from\"/home/magari/git/test_smartmap/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";import _objectSpread from\"/home/magari/git/test_smartmap/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import _asyncToGenerator from\"/home/magari/git/test_smartmap/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";import _createForOfIteratorHelper from\"/home/magari/git/test_smartmap/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";import _toConsumableArray from\"/home/magari/git/test_smartmap/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";import _slicedToArray from\"/home/magari/git/test_smartmap/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import{useEffect,useLayoutEffect,useMemo,useRef,useState}from'react';import{walkCategories}from'./api/catalog';import{customStyleToLineStringTemplate,customStyleToPointTemplate,customStyleToPolygonTemplate,DEFAULT_LINESTRING_STYLE,DEFAULT_POINT_STYLE,DEFAULT_POLYGON_STYLE,getCustomStyle,WEB_COLORS}from'./utils/mapStyling';import CityOS__Takamatsu from'./cityos/cityos_takamatsu';import mapStyle from'./style.json';import{jsx as _jsx}from\"react/jsx-runtime\";var LAYER_TEMPLATES=[[\"Polygon\",function(i,customStyle){var color=WEB_COLORS[i*1999%WEB_COLORS.length];return customStyle?customStyle.flatMap(function(style){return customStyleToPolygonTemplate(style,color);}):DEFAULT_POLYGON_STYLE(color);}],[\"LineString\",function(i,customStyle){var color=WEB_COLORS[i*1999%WEB_COLORS.length];return customStyle?customStyle.flatMap(function(style){return customStyleToLineStringTemplate(style,color);}):DEFAULT_LINESTRING_STYLE(color);}],[\"Point\",function(i,customStyle){var color=WEB_COLORS[i*1999%WEB_COLORS.length];return customStyle?customStyle.flatMap(function(style){return customStyleToPointTemplate(style,color);}):DEFAULT_POINT_STYLE(color);}]];var MainMap=function MainMap(_ref){var catalogData=_ref.catalogData,selectedLayers=_ref.selectedLayers,setSelectedFeatures=_ref.setSelectedFeatures;var _useState=useState(undefined),_useState2=_slicedToArray(_useState,2),map=_useState2[0],setMap=_useState2[1];var _useState3=useState(undefined),_useState4=_slicedToArray(_useState3,2),cityOS=_useState4[0],setCityOS=_useState4[1];var mapContainer=useRef(null);var catalogDataItems=useMemo(function(){return _toConsumableArray(walkCategories(catalogData));},[catalogData]);useLayoutEffect(function(){var map=new window.geolonia.Map({container:mapContainer.current,// style: `${process.env.PUBLIC_URL}/style.json`,\nstyle:mapStyle,hash:true,center:[134.0403,34.334],fitBoundsOptions:{padding:50},// 意図せず傾き・回転を変更してしまうことを防ぐ\nmaxPitch:0,maxRotate:0,minZoom:9,zoom:9.2});window._mainMap=map;var cityOS=new CityOS__Takamatsu(map);setCityOS(cityOS);map.on(\"load\",function(){// start GSI base map modification\nvar _iterator=_createForOfIteratorHelper(map.getStyle().layers),_step;try{for(_iterator.s();!(_step=_iterator.n()).done;){var layer=_step.value;var id=layer.id;if(id.startsWith(\"oc-\")||id==='poi-z16'||id==='poi-z16-primary'||(layer.metadata||{})['visible-on-3d']){map.removeLayer(layer.id);}else if(\"source-layer\"in layer){var sl=layer[\"source-layer\"];if(sl===\"landcover\"||sl===\"landuse\"||sl===\"building\"){map.removeLayer(layer.id);}}}// end GSI base map modification\n}catch(err){_iterator.e(err);}finally{_iterator.f();}map.addSource('negative-city-mask',{type:'vector',url:'https://tileserver.geolonia.com/takamatsu_negative_mask/tiles.json?key=YOUR-API-KEY'});map.addLayer({id:'negative-city-mask-layer',source:'negative-city-mask','source-layer':'negativecitymask',type:'fill',paint:{'fill-color':'#ff0000',//          'fill-opacity': .3,\n'fill-opacity':0}});map.addLayer({id:'negative-city-mask-layer-border',source:'negative-city-mask','source-layer':'negativecitymask',type:'line',paint:{'line-color':'#ff0000',//          'line-opacity': 0.5,\n'line-opacity':0,'line-width':2}});map.addSource('takamatsu',{type:'vector',url:\"https://tileserver.geolonia.com/takamatsu_main_v0/tiles.json?key=YOUR-API-KEY\"});map.addSource('kihonzu',{type:'vector',url:\"https://tileserver.geolonia.com/takamatsu_kihonzu_v1/tiles.json?key=YOUR-API-KEY\"});setMap(map);});map.on('click',function(e){var features=map.queryRenderedFeatures(e.point).filter(function(feature){return feature.source==='takamatsu'||feature.source==='kihonzu'||feature.properties._viewer_selectable===true;});if(features.length===0){setSelectedFeatures([]);return;}setSelectedFeatures(features.map(function(feature){var catalogData=catalogDataItems.find(function(item){return item.type===\"DataItem\"&&((feature.source==='takamatsu'||feature.properties._viewer_selectable===true)&&item.class===feature.properties.class||'customDataSource'in item&&item.customDataSource===feature.source);});if(!catalogData){throw new Error(\"Catalog data not available for feature: \".concat(feature));}return{catalog:catalogData,properties:feature.properties};}));});return function(){map.remove();};},[catalogDataItems,mapContainer,setMap,setSelectedFeatures]);useEffect(function(){if(!map)return;var shouldStop=false;_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee(){var index,_iterator2,_step2,_loop,_ret;return _regeneratorRuntime().wrap(function _callee$(_context3){while(1)switch(_context3.prev=_context3.next){case 0:index=-1;_iterator2=_createForOfIteratorHelper(walkCategories(catalogData));_context3.prev=2;_loop=/*#__PURE__*/_regeneratorRuntime().mark(function _loop(){var definition,definitionId,isSelected,color,sourceId,geojsonEndpoint,mapSource,geojsonResp,geojson,_iterator3,_step3,feature,_loop2,_i,_LAYER_TEMPLATES;return _regeneratorRuntime().wrap(function _loop$(_context2){while(1)switch(_context2.prev=_context2.next){case 0:definition=_step2.value;index+=1;if(!shouldStop){_context2.next=4;break;}return _context2.abrupt(\"return\",{v:void 0});case 4:definitionId=definition.id;isSelected=selectedLayers.includes(definitionId);if(!(\"liveLocationId\"in definition)){_context2.next=9;break;}if(isSelected){color=WEB_COLORS[index*1999%WEB_COLORS.length];// CityOS SDK will take care of the data fetching\n// and the map will be updated automatically.\n// But we have to add a style layer to the map manually.\nsourceId=cityOS===null||cityOS===void 0?void 0:cityOS.addLiveDataSet(definition.liveLocationId,{featureFilter:function featureFilter(feature){feature.properties||(feature.properties={});feature.properties.class=definition.class;feature.properties._viewer_selectable=true;return feature;}});if(sourceId){map.addLayer({id:\"\".concat(sourceId,\"-points\"),type:'circle',source:sourceId,paint:{'circle-radius':7,'circle-color':color,'circle-opacity':.8,'circle-stroke-width':1,'circle-stroke-color':'gray','circle-stroke-opacity':1}});}}else{cityOS===null||cityOS===void 0?void 0:cityOS.removeLiveDataSet(definition.liveLocationId);}return _context2.abrupt(\"return\",0);case 9:geojsonEndpoint=undefined;if(!(\"geojsonEndpoint\"in definition)){_context2.next=23;break;}// this is a GeoJSON layer\ngeojsonEndpoint=definition.geojsonEndpoint;mapSource=map.getSource(definitionId);if(!(!mapSource&&isSelected)){_context2.next=23;break;}_context2.next=16;return fetch(geojsonEndpoint);case 16:geojsonResp=_context2.sent;_context2.next=19;return geojsonResp.json();case 19:geojson=_context2.sent;_iterator3=_createForOfIteratorHelper(geojson.features);try{for(_iterator3.s();!(_step3=_iterator3.n()).done;){feature=_step3.value;feature.properties.class=definition.class;feature.properties._viewer_selectable=true;}}catch(err){_iterator3.e(err);}finally{_iterator3.f();}map.addSource(definitionId,{type:'geojson',data:geojson});case 23:_loop2=/*#__PURE__*/_regeneratorRuntime().mark(function _loop2(){var _LAYER_TEMPLATES$_i,sublayerName,template,fullLayerName,mapLayers,customStyle,_iterator4,_step4,subtemplate,filterExp,layerConfig,_iterator5,_step5,mapLayer;return _regeneratorRuntime().wrap(function _loop2$(_context){while(1)switch(_context.prev=_context.next){case 0:_LAYER_TEMPLATES$_i=_slicedToArray(_LAYER_TEMPLATES[_i],2),sublayerName=_LAYER_TEMPLATES$_i[0],template=_LAYER_TEMPLATES$_i[1];fullLayerName=\"takamatsu/\".concat(definitionId,\"/\").concat(sublayerName);mapLayers=map.getStyle().layers.filter(function(layer){return layer.id.startsWith(fullLayerName);});customStyle=getCustomStyle(definition);_iterator4=_createForOfIteratorHelper(template(index,customStyle));try{for(_iterator4.s();!(_step4=_iterator4.n()).done;){subtemplate=_step4.value;if(mapLayers.length===0&&isSelected){filterExp=[\"all\",[\"==\",\"$type\",sublayerName]];if(definition.class){filterExp.push([\"==\",\"class\",definition.class]);}if(subtemplate.filter){filterExp.push(subtemplate.filter);}layerConfig=_objectSpread(_objectSpread({},subtemplate),{},{filter:filterExp,id:fullLayerName+subtemplate.id});if(geojsonEndpoint){layerConfig.source=definitionId;delete layerConfig['source-layer'];}else if('customDataSource'in definition){layerConfig.source=definition.customDataSource;layerConfig['source-layer']=definition.customDataSourceLayer||definition.customDataSource;}map.addLayer(layerConfig,'poi');if(!map.getLayer(layerConfig.id)){console.error(\"Failed to add layer \".concat(layerConfig.id,\"!!!\"));debugger;}}else if(mapLayers.length>0&&!isSelected){_iterator5=_createForOfIteratorHelper(mapLayers);try{for(_iterator5.s();!(_step5=_iterator5.n()).done;){mapLayer=_step5.value;map.removeLayer(mapLayer.id);}}catch(err){_iterator5.e(err);}finally{_iterator5.f();}}}}catch(err){_iterator4.e(err);}finally{_iterator4.f();}case 6:case\"end\":return _context.stop();}},_loop2);});_i=0,_LAYER_TEMPLATES=LAYER_TEMPLATES;case 25:if(!(_i<_LAYER_TEMPLATES.length)){_context2.next=30;break;}return _context2.delegateYield(_loop2(),\"t0\",27);case 27:_i++;_context2.next=25;break;case 30:case\"end\":return _context2.stop();}},_loop);});_iterator2.s();case 5:if((_step2=_iterator2.n()).done){_context3.next=14;break;}return _context3.delegateYield(_loop(),\"t0\",7);case 7:_ret=_context3.t0;if(!(_ret===0)){_context3.next=10;break;}return _context3.abrupt(\"continue\",12);case 10:if(!_ret){_context3.next=12;break;}return _context3.abrupt(\"return\",_ret.v);case 12:_context3.next=5;break;case 14:_context3.next=19;break;case 16:_context3.prev=16;_context3.t1=_context3[\"catch\"](2);_iterator2.e(_context3.t1);case 19:_context3.prev=19;_iterator2.f();return _context3.finish(19);case 22:case\"end\":return _context3.stop();}},_callee,null,[[2,16,19,22]]);}))();return function(){shouldStop=true;};},[map,catalogData,selectedLayers,cityOS]);return/*#__PURE__*/_jsx(\"div\",{className:\"map\",ref:mapContainer,\"data-lang\":\"ja\",\"data-navigation-control\":\"on\",\"data-gesture-handling\":\"off\"});};export default MainMap;","map":{"version":3,"names":["useEffect","useLayoutEffect","useMemo","useRef","useState","walkCategories","customStyleToLineStringTemplate","customStyleToPointTemplate","customStyleToPolygonTemplate","DEFAULT_LINESTRING_STYLE","DEFAULT_POINT_STYLE","DEFAULT_POLYGON_STYLE","getCustomStyle","WEB_COLORS","CityOS__Takamatsu","mapStyle","jsx","_jsx","LAYER_TEMPLATES","i","customStyle","color","length","flatMap","style","MainMap","_ref","catalogData","selectedLayers","setSelectedFeatures","_useState","undefined","_useState2","_slicedToArray","map","setMap","_useState3","_useState4","cityOS","setCityOS","mapContainer","catalogDataItems","_toConsumableArray","window","geolonia","Map","container","current","hash","center","fitBoundsOptions","padding","maxPitch","maxRotate","minZoom","zoom","_mainMap","on","_iterator","_createForOfIteratorHelper","getStyle","layers","_step","s","n","done","layer","value","id","startsWith","metadata","removeLayer","sl","err","e","f","addSource","type","url","addLayer","source","paint","features","queryRenderedFeatures","point","filter","feature","properties","_viewer_selectable","find","item","class","customDataSource","Error","concat","catalog","remove","shouldStop","_asyncToGenerator","_regeneratorRuntime","mark","_callee","index","_iterator2","_step2","_loop","_ret","wrap","_callee$","_context3","prev","next","definition","definitionId","isSelected","sourceId","geojsonEndpoint","mapSource","geojsonResp","geojson","_iterator3","_step3","_loop2","_i","_LAYER_TEMPLATES","_loop$","_context2","abrupt","v","includes","addLiveDataSet","liveLocationId","featureFilter","removeLiveDataSet","getSource","fetch","sent","json","data","_LAYER_TEMPLATES$_i","sublayerName","template","fullLayerName","mapLayers","_iterator4","_step4","subtemplate","filterExp","layerConfig","_iterator5","_step5","mapLayer","_loop2$","_context","push","_objectSpread","customDataSourceLayer","getLayer","console","error","stop","delegateYield","t0","t1","finish","className","ref"],"sources":["/home/magari/git/test_smartmap/src/MainMap.tsx"],"sourcesContent":["import { useEffect, useLayoutEffect, useMemo, useRef, useState } from 'react';\nimport type * as maplibregl from 'maplibre-gl';\nimport { CatalogFeature, CatalogItem, walkCategories } from './api/catalog';\nimport { CustomStyle, customStyleToLineStringTemplate, customStyleToPointTemplate, customStyleToPolygonTemplate, DEFAULT_LINESTRING_STYLE, DEFAULT_POINT_STYLE, DEFAULT_POLYGON_STYLE, getCustomStyle, LayerTemplate, WEB_COLORS } from './utils/mapStyling';\nimport CityOS__Takamatsu from './cityos/cityos_takamatsu';\n\nimport mapStyle from './style.json';\n\ndeclare global {\n  interface Window {\n    geolonia: any;\n  }\n}\n\nconst LAYER_TEMPLATES: [string, (idx: number, customStyle?: CustomStyle[]) => LayerTemplate[]][] = [\n  [ \"Polygon\", (i, customStyle) => {\n    const color = WEB_COLORS[i * 1999 % WEB_COLORS.length];\n    return customStyle ?\n      customStyle.flatMap((style) => customStyleToPolygonTemplate(style, color)) :\n      DEFAULT_POLYGON_STYLE(color);\n  } ],\n  [ \"LineString\", (i, customStyle) => {\n    const color = WEB_COLORS[i * 1999 % WEB_COLORS.length];\n    return customStyle ?\n      customStyle.flatMap((style) => customStyleToLineStringTemplate(style, color)) :\n      DEFAULT_LINESTRING_STYLE(color);\n  }],\n  [ \"Point\", (i, customStyle) => {\n    const color = WEB_COLORS[i * 1999 % WEB_COLORS.length];\n    return customStyle ?\n      customStyle.flatMap((style) => customStyleToPointTemplate(style, color)) :\n      DEFAULT_POINT_STYLE(color);\n  }],\n];\n\ninterface Props {\n  catalogData: CatalogItem[];\n  selectedLayers: string[];\n  setSelectedFeatures: React.Dispatch<React.SetStateAction<CatalogFeature[]>>\n}\n\nconst MainMap: React.FC<Props> = ({catalogData, selectedLayers, setSelectedFeatures}) => {\n  const [map, setMap] = useState<maplibregl.Map | undefined>(undefined);\n  const [cityOS, setCityOS] = useState<CityOS__Takamatsu | undefined>(undefined);\n  const mapContainer = useRef<HTMLDivElement>(null);\n\n  const catalogDataItems = useMemo(() => {\n    return [...walkCategories(catalogData)];\n  }, [catalogData]);\n\n  useLayoutEffect(() => {\n    const map: maplibregl.Map = new window.geolonia.Map({\n      container: mapContainer.current,\n      // style: `${process.env.PUBLIC_URL}/style.json`,\n      style: mapStyle,\n      hash: true,\n      center: [ 134.0403, 34.334 ],\n      fitBoundsOptions: { padding: 50 },\n      // 意図せず傾き・回転を変更してしまうことを防ぐ\n      maxPitch: 0,\n      maxRotate: 0,\n      minZoom: 9,\n      zoom: 9.2,\n    });\n\n    (window as any)._mainMap = map;\n\n    const cityOS = new CityOS__Takamatsu(map);\n    setCityOS(cityOS);\n\n    map.on(\"load\", () => {\n      // start GSI base map modification\n      for (const layer of map.getStyle().layers!) {\n        const id = layer.id;\n        if (id.startsWith(\"oc-\") || id === 'poi-z16' || id === 'poi-z16-primary' || (layer.metadata as any || {})['visible-on-3d']) {\n          map.removeLayer(layer.id);\n        } else if (\"source-layer\" in layer) {\n          const sl = layer[\"source-layer\"];\n          if (sl === \"landcover\" || sl === \"landuse\" || sl === \"building\") {\n            map.removeLayer(layer.id);\n          }\n        }\n      }\n      // end GSI base map modification\n\n      map.addSource('negative-city-mask', {\n        type: 'vector',\n        url: 'https://tileserver.geolonia.com/takamatsu_negative_mask/tiles.json?key=YOUR-API-KEY',\n      })\n      map.addLayer({\n        id: 'negative-city-mask-layer',\n        source: 'negative-city-mask',\n        'source-layer': 'negativecitymask',\n        type: 'fill',\n        paint: {\n          'fill-color': '#ff0000',\n//          'fill-opacity': .3,\n          'fill-opacity': 0,\n}\n      });\n      map.addLayer({\n        id: 'negative-city-mask-layer-border',\n        source: 'negative-city-mask',\n        'source-layer': 'negativecitymask',\n        type: 'line',\n        paint: {\n          'line-color': '#ff0000',\n//          'line-opacity': 0.5,\n          'line-opacity': 0,\n          'line-width': 2,\n        }\n      })\n\n      map.addSource('takamatsu', {\n        type: 'vector',\n        url: \"https://tileserver.geolonia.com/takamatsu_main_v0/tiles.json?key=YOUR-API-KEY\"\n      });\n      map.addSource('kihonzu', {\n        type: 'vector',\n        url: \"https://tileserver.geolonia.com/takamatsu_kihonzu_v1/tiles.json?key=YOUR-API-KEY\"\n      });\n\n      setMap(map);\n    });\n\n    map.on('click', (e) => {\n      const features = map\n        .queryRenderedFeatures(e.point)\n        .filter(feature => (\n          feature.source === 'takamatsu' ||\n          feature.source === 'kihonzu' ||\n          feature.properties._viewer_selectable === true\n        ));\n      if (features.length === 0) {\n        setSelectedFeatures([]);\n        return;\n      }\n      setSelectedFeatures(features.map(feature => {\n        const catalogData = catalogDataItems.find(item => (\n          item.type === \"DataItem\" && (\n            ((feature.source === 'takamatsu' || feature.properties._viewer_selectable === true) && item.class === feature.properties.class) ||\n            ('customDataSource' in item && item.customDataSource === feature.source)\n          )\n        ));\n        if (!catalogData) {\n          throw new Error(`Catalog data not available for feature: ${feature}`);\n        }\n        return {\n          catalog: catalogData,\n          properties: feature.properties,\n        };\n      }));\n    });\n\n    return () => {\n      map.remove();\n    };\n  }, [catalogDataItems, mapContainer, setMap, setSelectedFeatures]);\n\n  useEffect(() => {\n    if (!map) return;\n\n    let shouldStop = false;\n    (async () => {\n      let index = -1;\n      for (const definition of walkCategories(catalogData)) {\n        index += 1;\n        if (shouldStop) return;\n\n        const definitionId = definition.id;\n        const isSelected = selectedLayers.includes(definitionId);\n\n        if (\"liveLocationId\" in definition) {\n          if (isSelected) {\n            const color = WEB_COLORS[index * 1999 % WEB_COLORS.length];\n            // CityOS SDK will take care of the data fetching\n            // and the map will be updated automatically.\n            // But we have to add a style layer to the map manually.\n            const sourceId = cityOS?.addLiveDataSet(definition.liveLocationId, {\n              featureFilter: (feature) => {\n                feature.properties ||= {};\n                feature.properties.class = definition.class;\n                feature.properties!._viewer_selectable = true;\n                return feature;\n              }\n            });\n            if (sourceId) {\n              map.addLayer({\n                id: `${sourceId}-points`,\n                type: 'circle',\n                source: sourceId,\n                paint: {\n                  'circle-radius': 7,\n                  'circle-color': color,\n                  'circle-opacity': .8,\n                  'circle-stroke-width': 1,\n                  'circle-stroke-color': 'gray',\n                  'circle-stroke-opacity': 1,\n                }\n              });\n            }\n          } else {\n            cityOS?.removeLiveDataSet(definition.liveLocationId);\n          }\n          continue;\n        }\n\n        let geojsonEndpoint: string | undefined = undefined;\n        if (\"geojsonEndpoint\" in definition) {\n          // this is a GeoJSON layer\n          geojsonEndpoint = definition.geojsonEndpoint;\n\n          const mapSource = map.getSource(definitionId);\n          if (!mapSource && isSelected) {\n            const geojsonResp = await fetch(geojsonEndpoint);\n            const geojson = await geojsonResp.json();\n            for (const feature of geojson.features) {\n              feature.properties.class = definition.class;\n              feature.properties._viewer_selectable = true;\n            }\n            map.addSource(definitionId, {\n              type: 'geojson',\n              data: geojson,\n            });\n          }\n        }\n\n        for (const [sublayerName, template] of LAYER_TEMPLATES) {\n          const fullLayerName = `takamatsu/${definitionId}/${sublayerName}`;\n          const mapLayers = map.getStyle().layers.filter((layer) => layer.id.startsWith(fullLayerName));\n          const customStyle = getCustomStyle(definition);\n          for (const subtemplate of template(index, customStyle)) {\n            if (mapLayers.length === 0 && isSelected) {\n              const filterExp: maplibregl.FilterSpecification = [\"all\", [\"==\", \"$type\", sublayerName]];\n              if (definition.class) {\n                filterExp.push([\"==\", \"class\", definition.class]);\n              }\n              if (subtemplate.filter) {\n                filterExp.push(subtemplate.filter as any);\n              }\n              const layerConfig: maplibregl.LayerSpecification = {\n                ...subtemplate,\n                filter: filterExp,\n                id: fullLayerName + subtemplate.id,\n              };\n              if (geojsonEndpoint) {\n                layerConfig.source = definitionId;\n                delete layerConfig['source-layer'];\n              } else if ('customDataSource' in definition) {\n                layerConfig.source = definition.customDataSource;\n                layerConfig['source-layer'] = definition.customDataSourceLayer || definition.customDataSource;\n              }\n              map.addLayer(layerConfig, 'poi');\n              if (!map.getLayer(layerConfig.id)) {\n                console.error(`Failed to add layer ${layerConfig.id}!!!`);\n                debugger;\n              }\n            } else if (mapLayers.length > 0 && !isSelected) {\n              for (const mapLayer of mapLayers) {\n                map.removeLayer(mapLayer.id);\n              }\n            }\n          }\n        }\n      }\n    })();\n\n    return () => {\n      shouldStop = true;\n    }\n  }, [map, catalogData, selectedLayers, cityOS]);\n\n  return (\n    <div\n      className='map'\n      ref={mapContainer}\n      data-lang=\"ja\"\n      data-navigation-control=\"on\"\n      data-gesture-handling=\"off\"\n    ></div>\n  );\n}\n\nexport default MainMap;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}