{"ast":null,"code":"var _jsxFileName = \"/home/magari/git/test_smartmap/src/utils/ReplaceTextToLink.tsx\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ReplaceTextToLink = props => {\n  const {\n    text\n  } = props;\n  if (typeof text !== 'string') {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: text\n    }, void 0, false);\n  }\n  const urlRegex = /https?:\\/\\/[-_.!~*'()a-zA-Z0-9;/?:@&=+$,%#]+/g;\n  const telRegex = /0\\d{1,4}-\\d{1,4}-\\d{4}/g;\n  const regex = new RegExp(`(${urlRegex.source}|${telRegex.source})`, 'g');\n  const parts = text.split(regex);\n  const result = parts.map((part, index) => {\n    if (part.match(urlRegex)) {\n      return /*#__PURE__*/_jsxDEV(\"a\", {\n        href: part,\n        target: \"_blank\",\n        rel: \"noopener noreferrer\",\n        children: part\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 9\n      }, this);\n    } else if (part.match(telRegex)) {\n      return /*#__PURE__*/_jsxDEV(\"a\", {\n        href: `tel:${part}`,\n        children: part\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 9\n      }, this);\n    }\n    return part;\n  });\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: result\n  }, void 0, false);\n};\n_c = ReplaceTextToLink;\nexport default ReplaceTextToLink;\nvar _c;\n$RefreshReg$(_c, \"ReplaceTextToLink\");","map":{"version":3,"names":["ReplaceTextToLink","props","text","_jsxDEV","_Fragment","children","urlRegex","telRegex","regex","RegExp","source","parts","split","result","map","part","index","match","href","target","rel","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/magari/git/test_smartmap/src/utils/ReplaceTextToLink.tsx"],"sourcesContent":["type Props = {\n  text: string\n}\n\nconst ReplaceTextToLink = (props: Props) => {\n  const { text } = props;\n\n  if (typeof text !== 'string') {\n    return (<>{text}</>)\n  }\n\n  const urlRegex = /https?:\\/\\/[-_.!~*'()a-zA-Z0-9;/?:@&=+$,%#]+/g;\n  const telRegex = /0\\d{1,4}-\\d{1,4}-\\d{4}/g;\n  const regex = new RegExp(`(${urlRegex.source}|${telRegex.source})`, 'g');\n\n  const parts = text.split(regex);\n\n  const result = parts.map((part, index) => {\n\n    if (part.match(urlRegex)) {\n      return (\n        <a\n          key={index}\n          href={part}\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          {part}\n        </a>\n      );\n    } else if (part.match(telRegex)) {\n      return (\n        <a\n          key={index}\n          href={`tel:${part}`}\n        >\n          {part}\n        </a>\n      );\n    }\n\n    return part;\n  });\n\n  return <>{result}</>;\n};\n\n\nexport default ReplaceTextToLink\n"],"mappings":";;;AAIA,MAAMA,iBAAiB,GAAIC,KAAY,IAAK;EAC1C,MAAM;IAAEC;EAAK,CAAC,GAAGD,KAAK;EAEtB,IAAI,OAAOC,IAAI,KAAK,QAAQ,EAAE;IAC5B,oBAAQC,OAAA,CAAAC,SAAA;MAAAC,QAAA,EAAGH;IAAI,gBAAG,CAAC;EACrB;EAEA,MAAMI,QAAQ,GAAG,+CAA+C;EAChE,MAAMC,QAAQ,GAAG,yBAAyB;EAC1C,MAAMC,KAAK,GAAG,IAAIC,MAAM,CAAE,IAAGH,QAAQ,CAACI,MAAO,IAAGH,QAAQ,CAACG,MAAO,GAAE,EAAE,GAAG,CAAC;EAExE,MAAMC,KAAK,GAAGT,IAAI,CAACU,KAAK,CAACJ,KAAK,CAAC;EAE/B,MAAMK,MAAM,GAAGF,KAAK,CAACG,GAAG,CAAC,CAACC,IAAI,EAAEC,KAAK,KAAK;IAExC,IAAID,IAAI,CAACE,KAAK,CAACX,QAAQ,CAAC,EAAE;MACxB,oBACEH,OAAA;QAEEe,IAAI,EAAEH,IAAK;QACXI,MAAM,EAAC,QAAQ;QACfC,GAAG,EAAC,qBAAqB;QAAAf,QAAA,EAExBU;MAAI,GALAC,KAAK;QAAAK,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAMT,CAAC;IAER,CAAC,MAAM,IAAIT,IAAI,CAACE,KAAK,CAACV,QAAQ,CAAC,EAAE;MAC/B,oBACEJ,OAAA;QAEEe,IAAI,EAAG,OAAMH,IAAK,EAAE;QAAAV,QAAA,EAEnBU;MAAI,GAHAC,KAAK;QAAAK,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAIT,CAAC;IAER;IAEA,OAAOT,IAAI;EACb,CAAC,CAAC;EAEF,oBAAOZ,OAAA,CAAAC,SAAA;IAAAC,QAAA,EAAGQ;EAAM,gBAAG,CAAC;AACtB,CAAC;AAACY,EAAA,GAzCIzB,iBAAiB;AA4CvB,eAAeA,iBAAiB;AAAA,IAAAyB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}