{"ast":null,"code":"import _slicedToArray from\"/home/magari/git/test_smartmap/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import _createForOfIteratorHelper from\"/home/magari/git/test_smartmap/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";import _objectSpread from\"/home/magari/git/test_smartmap/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import _classCallCheck from\"/home/magari/git/test_smartmap/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";import _createClass from\"/home/magari/git/test_smartmap/node_modules/@babel/runtime/helpers/esm/createClass.js\";import turfBBox from\"@turf/bbox\";import LiveDataSet from\"./lib/live_data_set\";var CityOS__Takamatsu=/*#__PURE__*/function(){function CityOS__Takamatsu(map){_classCallCheck(this,CityOS__Takamatsu);this.map=void 0;this.liveDataSets=void 0;this.map=map;this.liveDataSets=[];}_createClass(CityOS__Takamatsu,[{key:\"addLiveDataSet\",value:function addLiveDataSet(id,options){var _this=this;var internalId=\"cityos-kawaga-takamatsu-\".concat(id);var mapSourceId=\"gl-live-data-\".concat(id);var existingLds=this.liveDataSets.find(function(lds){return lds.id===internalId;});if(typeof existingLds!=='undefined'){// this live data set is already added to the map\nreturn mapSourceId;}var lds=new LiveDataSet(internalId);var stayFitToBounds=!!(options!==null&&options!==void 0&&options.stayFitToBounds);this.map.addSource(mapSourceId,{type:'geojson',data:{type:\"FeatureCollection\",features:[]}});lds.addEventListener('featuresUpdated',function(_event){var event=_event;var features=event.detail.features.map(function(feature){var props=_objectSpread({},feature.properties);// props.class = options?.layerName || 'undefined';\n// props._viewer_selectable = true;\ndelete props.tilehash;delete props.ttl;delete props.coords;feature.properties=props;return options!==null&&options!==void 0&&options.featureFilter?options.featureFilter(feature):feature;});var data={type:\"FeatureCollection\",features:features};_this.map.getSource(mapSourceId).setData(data);if(stayFitToBounds&&data.features.length>0){var bbox=turfBBox(data);// we only have 2d data in here\nif(bbox.length===4){_this.map.fitBounds(bbox,{maxZoom:13,padding:100,animate:false});}}});this.liveDataSets.push(lds);return mapSourceId;}},{key:\"removeLiveDataSet\",value:function removeLiveDataSet(id){var sourceId=\"gl-live-data-\".concat(id);var internalId=\"cityos-kawaga-takamatsu-\".concat(id);var liveDataSetIndex=this.liveDataSets.findIndex(function(lds){return lds.id===internalId;});if(liveDataSetIndex===-1)return;var _iterator=_createForOfIteratorHelper(this.map.getStyle().layers),_step;try{for(_iterator.s();!(_step=_iterator.n()).done;){var layer=_step.value;if('source'in layer&&layer.source===sourceId){this.map.removeLayer(layer.id);}}}catch(err){_iterator.e(err);}finally{_iterator.f();}this.map.removeSource(sourceId);var _this$liveDataSets$sp=this.liveDataSets.splice(liveDataSetIndex,1),_this$liveDataSets$sp2=_slicedToArray(_this$liveDataSets$sp,1),lds=_this$liveDataSets$sp2[0];lds.remove();}}]);return CityOS__Takamatsu;}();export default CityOS__Takamatsu;","map":{"version":3,"names":["turfBBox","LiveDataSet","CityOS__Takamatsu","map","_classCallCheck","liveDataSets","_createClass","key","value","addLiveDataSet","id","options","_this","internalId","concat","mapSourceId","existingLds","find","lds","stayFitToBounds","addSource","type","data","features","addEventListener","_event","event","detail","feature","props","_objectSpread","properties","tilehash","ttl","coords","featureFilter","getSource","setData","length","bbox","fitBounds","maxZoom","padding","animate","push","removeLiveDataSet","sourceId","liveDataSetIndex","findIndex","_iterator","_createForOfIteratorHelper","getStyle","layers","_step","s","n","done","layer","source","removeLayer","err","e","f","removeSource","_this$liveDataSets$sp","splice","_this$liveDataSets$sp2","_slicedToArray","remove"],"sources":["/home/magari/git/test_smartmap/src/cityos/cityos_takamatsu.ts"],"sourcesContent":["import type { Map as GeoloniaMap, GeoJSONSource } from \"maplibre-gl\";\nimport turfBBox from \"@turf/bbox\";\nimport LiveDataSet, { LiveDataSetEvent } from \"./lib/live_data_set\";\n\ntype FeatureFilter = (feature: GeoJSON.Feature) => GeoJSON.Feature;\n\nclass CityOS__Takamatsu {\n  map: GeoloniaMap;\n  liveDataSets: LiveDataSet[];\n\n  constructor(map: GeoloniaMap) {\n    this.map = map;\n    this.liveDataSets = [];\n  }\n\n  addLiveDataSet(id: string, options?: { featureFilter?: FeatureFilter, stayFitToBounds?: boolean }) {\n    const internalId = `cityos-kawaga-takamatsu-${id}`;\n    const mapSourceId = `gl-live-data-${id}`;\n\n    const existingLds = this.liveDataSets.find(lds => lds.id === internalId);\n    if (typeof existingLds !== 'undefined') {\n      // this live data set is already added to the map\n      return mapSourceId;\n    }\n    const lds = new LiveDataSet(internalId);\n    const stayFitToBounds = !!options?.stayFitToBounds;\n\n    this.map.addSource(mapSourceId, {\n      type: 'geojson',\n      data: { type: \"FeatureCollection\", features: [] },\n    });\n\n    lds.addEventListener('featuresUpdated', (_event) => {\n      const event = _event as LiveDataSetEvent;\n      const features = event.detail.features.map(feature => {\n        const props = {...feature.properties};\n        // props.class = options?.layerName || 'undefined';\n        // props._viewer_selectable = true;\n        delete props.tilehash;\n        delete props.ttl;\n        delete props.coords;\n        feature.properties = props;\n        return options?.featureFilter ? options.featureFilter(feature) : feature;\n      });\n      const data: GeoJSON.FeatureCollection = {type: \"FeatureCollection\", features};\n      (this.map.getSource(mapSourceId) as GeoJSONSource).setData(data);\n      if (stayFitToBounds && data.features.length > 0) {\n        const bbox = turfBBox(data);\n        // we only have 2d data in here\n        if (bbox.length === 4) {\n          this.map.fitBounds(bbox, { maxZoom: 13, padding: 100, animate: false });\n        }\n      }\n    });\n    this.liveDataSets.push(lds);\n\n    return mapSourceId;\n  }\n\n  removeLiveDataSet(id: string) {\n    const sourceId = `gl-live-data-${id}`;\n    const internalId = `cityos-kawaga-takamatsu-${id}`;\n    const liveDataSetIndex = this.liveDataSets.findIndex((lds) => lds.id === internalId);\n    if (liveDataSetIndex === -1) return;\n\n    for (const layer of this.map.getStyle().layers) {\n      if ('source' in layer && layer.source === sourceId) {\n        this.map.removeLayer(layer.id);\n      }\n    }\n    this.map.removeSource(sourceId);\n    const [lds] = this.liveDataSets.splice(liveDataSetIndex, 1);\n    lds.remove();\n  }\n}\n\nexport default CityOS__Takamatsu;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}