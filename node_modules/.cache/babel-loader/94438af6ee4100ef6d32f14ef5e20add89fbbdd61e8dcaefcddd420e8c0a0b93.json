{"ast":null,"code":"import { Space } from \"@spatial-id/javascript-sdk\";\nimport websocket from \"./websocket\";\nconst WS_HTTP_URL = `https://api-ws-admin.geolonia.com/${process.env.REACT_APP_API_STAGE || 'dev'}`;\nconst dataToGeoJSONFeature = data => {\n  let geometry;\n  if (typeof data.msg.coords !== 'undefined') {\n    geometry = {\n      type: \"Point\",\n      coordinates: data.msg.coords\n    };\n  } else {\n    geometry = new Space(data.tilehash).toGeoJSON();\n  }\n  return {\n    type: \"Feature\",\n    id: data.id,\n    properties: {\n      tilehash: data.tilehash,\n      zfxy: data.zfxy,\n      ttl: data.ttl,\n      ...data.msg\n    },\n    geometry\n  };\n};\nexport class LiveDataSetEvent extends CustomEvent {}\nexport default class LiveDataSet extends EventTarget {\n  constructor(id) {\n    super();\n    this.id = void 0;\n    this.features = void 0;\n    this._internalPingTimeout = void 0;\n    this._wsMessageHandler = void 0;\n    this.id = id;\n    this.features = [];\n    this._wsMessageHandler = data => {\n      const newFeature = dataToGeoJSONFeature(data);\n      this.features = [...this.features.filter(feat => feat.id !== data.id), newFeature];\n      this.dispatchEvent(new LiveDataSetEvent('featuresUpdated', {\n        detail: {\n          features: this.features\n        }\n      }));\n    };\n    websocket.subscribe(this.id, this._wsMessageHandler);\n    this._retrieveInitialDataSet().catch(e => {\n      // ignore error for now\n      console.warn(`Initial data set couldn't be loaded:`, e);\n    });\n    this._internalPing();\n  }\n\n  /** Call this when you no longer want to use this LiveDataSet. */\n  remove() {\n    if (this._internalPingTimeout) window.clearTimeout(this._internalPingTimeout);\n    websocket.unsubscribe(this.id, this._wsMessageHandler);\n  }\n  _filterFeaturesByTTL(nowTs) {\n    const now = typeof nowTs === 'undefined' ? Math.floor(new Date().getTime() / 1000) : nowTs;\n    const filteredFeatures = this.features.filter(feat => {\n      var _feat$properties, _feat$properties2;\n      return !((_feat$properties = feat.properties) !== null && _feat$properties !== void 0 && _feat$properties.ttl) || ((_feat$properties2 = feat.properties) === null || _feat$properties2 === void 0 ? void 0 : _feat$properties2.ttl) >= now;\n    });\n    if (filteredFeatures.length !== this.features.length) {\n      this.features = filteredFeatures;\n      this.dispatchEvent(new LiveDataSetEvent('featuresUpdated', {\n        detail: {\n          features: this.features\n        }\n      }));\n    }\n  }\n  _internalPing() {\n    this._filterFeaturesByTTL();\n    this._internalPingTimeout = window.setTimeout(this._internalPing.bind(this), 300);\n  }\n  async _retrieveInitialDataSet() {\n    const initialDataResp = await fetch(`${WS_HTTP_URL}/channels/${this.id}/messages`);\n    const initialDataJson = await initialDataResp.json();\n    this.features = initialDataJson.data.map(data => {\n      return dataToGeoJSONFeature(data);\n    });\n    this.dispatchEvent(new LiveDataSetEvent('featuresUpdated', {\n      detail: {\n        features: this.features\n      }\n    }));\n  }\n}","map":{"version":3,"names":["Space","websocket","WS_HTTP_URL","process","env","REACT_APP_API_STAGE","dataToGeoJSONFeature","data","geometry","msg","coords","type","coordinates","tilehash","toGeoJSON","id","properties","zfxy","ttl","LiveDataSetEvent","CustomEvent","LiveDataSet","EventTarget","constructor","features","_internalPingTimeout","_wsMessageHandler","newFeature","filter","feat","dispatchEvent","detail","subscribe","_retrieveInitialDataSet","catch","e","console","warn","_internalPing","remove","window","clearTimeout","unsubscribe","_filterFeaturesByTTL","nowTs","now","Math","floor","Date","getTime","filteredFeatures","_feat$properties","_feat$properties2","length","setTimeout","bind","initialDataResp","fetch","initialDataJson","json","map"],"sources":["/home/magari/git/test_smartmap/src/cityos/lib/live_data_set.ts"],"sourcesContent":["import { Space } from \"@spatial-id/javascript-sdk\";\nimport websocket, { MessageCallbackFunc } from \"./websocket\";\nimport type GeoJSON from \"geojson\";\n\nconst WS_HTTP_URL = `https://api-ws-admin.geolonia.com/${process.env.REACT_APP_API_STAGE || 'dev'}`;\n\nconst dataToGeoJSONFeature: (data: any) => GeoJSON.Feature = (data) => {\n  let geometry: GeoJSON.Geometry;\n  if (typeof data.msg.coords !== 'undefined') {\n    geometry = { type: \"Point\", coordinates: data.msg.coords };\n  } else {\n    geometry = new Space(data.tilehash).toGeoJSON();\n  }\n  return {\n    type: \"Feature\",\n    id: data.id,\n    properties: {\n      tilehash: data.tilehash,\n      zfxy: data.zfxy,\n      ttl: data.ttl,\n      ...data.msg,\n    },\n    geometry,\n  };\n};\n\ntype LiveDataSetEventDetail = {\n  features: GeoJSON.Feature[];\n}\nexport class LiveDataSetEvent extends CustomEvent<LiveDataSetEventDetail> {}\n\nexport default class LiveDataSet extends EventTarget {\n  id: string;\n  features: GeoJSON.Feature[];\n\n  private _internalPingTimeout: number | undefined;\n  private _wsMessageHandler: MessageCallbackFunc;\n\n  constructor(id: string) {\n    super();\n\n    this.id = id;\n    this.features = [];\n    this._wsMessageHandler = (data) => {\n      const newFeature = dataToGeoJSONFeature(data);\n      this.features = [\n        ...this.features.filter((feat) => feat.id !== data.id),\n        newFeature,\n      ];\n      this.dispatchEvent(new LiveDataSetEvent('featuresUpdated', { detail: { features: this.features } }));\n    };\n    websocket.subscribe(this.id, this._wsMessageHandler);\n    this._retrieveInitialDataSet().catch(e => {\n      // ignore error for now\n      console.warn(`Initial data set couldn't be loaded:`, e);\n    });\n\n    this._internalPing();\n  }\n\n  /** Call this when you no longer want to use this LiveDataSet. */\n  remove() {\n    if (this._internalPingTimeout) window.clearTimeout(this._internalPingTimeout);\n    websocket.unsubscribe(this.id, this._wsMessageHandler);\n  }\n\n  private _filterFeaturesByTTL(nowTs?: number) {\n    const now = typeof nowTs === 'undefined' ? Math.floor(new Date().getTime() / 1000) : nowTs;\n    const filteredFeatures = this.features.filter((feat) => (\n      !feat.properties?.ttl || (feat.properties?.ttl >= now)\n    ));\n    if (filteredFeatures.length !== this.features.length) {\n      this.features = filteredFeatures;\n      this.dispatchEvent(new LiveDataSetEvent('featuresUpdated', { detail: { features: this.features } }));\n    }\n  }\n\n  private _internalPing() {\n    this._filterFeaturesByTTL();\n    this._internalPingTimeout = window.setTimeout(this._internalPing.bind(this), 300);\n  }\n\n  private async _retrieveInitialDataSet() {\n    const initialDataResp = await fetch(`${WS_HTTP_URL}/channels/${this.id}/messages`);\n    const initialDataJson = await initialDataResp.json();\n\n    this.features = initialDataJson.data.map((data: any) => {\n      return dataToGeoJSONFeature(data);\n    });\n    this.dispatchEvent(new LiveDataSetEvent('featuresUpdated', { detail: { features: this.features } }));\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}