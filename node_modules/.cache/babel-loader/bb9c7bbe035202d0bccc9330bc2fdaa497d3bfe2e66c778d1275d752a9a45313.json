{"ast":null,"code":"var _jsxFileName = \"/home/magari/git/test_smartmap/src/MainMap.tsx\",\n  _s = $RefreshSig$();\nimport { useEffect, useLayoutEffect, useMemo, useRef, useState } from 'react';\nimport { walkCategories } from './api/catalog';\nimport { customStyleToLineStringTemplate, customStyleToPointTemplate, customStyleToPolygonTemplate, DEFAULT_LINESTRING_STYLE, DEFAULT_POINT_STYLE, DEFAULT_POLYGON_STYLE, getCustomStyle, WEB_COLORS } from './utils/mapStyling';\nimport CityOS__Takamatsu from './cityos/cityos_takamatsu';\nimport mapStyle from './style.json';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst LAYER_TEMPLATES = [[\"Polygon\", (i, customStyle) => {\n  const color = WEB_COLORS[i * 1999 % WEB_COLORS.length];\n  return customStyle ? customStyle.flatMap(style => customStyleToPolygonTemplate(style, color)) : DEFAULT_POLYGON_STYLE(color);\n}], [\"LineString\", (i, customStyle) => {\n  const color = WEB_COLORS[i * 1999 % WEB_COLORS.length];\n  return customStyle ? customStyle.flatMap(style => customStyleToLineStringTemplate(style, color)) : DEFAULT_LINESTRING_STYLE(color);\n}], [\"Point\", (i, customStyle) => {\n  const color = WEB_COLORS[i * 1999 % WEB_COLORS.length];\n  return customStyle ? customStyle.flatMap(style => customStyleToPointTemplate(style, color)) : DEFAULT_POINT_STYLE(color);\n}]];\nconst MainMap = ({\n  catalogData,\n  selectedLayers,\n  setSelectedFeatures\n}) => {\n  _s();\n  const [map, setMap] = useState(undefined);\n  const [cityOS, setCityOS] = useState(undefined);\n  const mapContainer = useRef(null);\n  const catalogDataItems = useMemo(() => {\n    return [...walkCategories(catalogData)];\n  }, [catalogData]);\n  useLayoutEffect(() => {\n    const map = new window.geolonia.Map({\n      container: mapContainer.current,\n      // style: `${process.env.PUBLIC_URL}/style.json`,\n      style: mapStyle,\n      hash: true,\n      center: [134.0403, 34.334],\n      fitBoundsOptions: {\n        padding: 50\n      },\n      // 意図せず傾き・回転を変更してしまうことを防ぐ\n      maxPitch: 0,\n      maxRotate: 0,\n      minZoom: 9,\n      zoom: 9.2\n    });\n    window._mainMap = map;\n    const cityOS = new CityOS__Takamatsu(map);\n    setCityOS(cityOS);\n    map.on(\"load\", () => {\n      // start GSI base map modification\n      for (const layer of map.getStyle().layers) {\n        const id = layer.id;\n        if (id.startsWith(\"oc-\") || id === 'poi-z16' || id === 'poi-z16-primary' || (layer.metadata || {})['visible-on-3d']) {\n          map.removeLayer(layer.id);\n        } else if (\"source-layer\" in layer) {\n          const sl = layer[\"source-layer\"];\n          if (sl === \"landcover\" || sl === \"landuse\" || sl === \"building\") {\n            map.removeLayer(layer.id);\n          }\n        }\n      }\n      // end GSI base map modification\n\n      map.addSource('negative-city-mask', {\n        type: 'vector',\n        url: 'https://tileserver.geolonia.com/takamatsu_negative_mask/tiles.json?key=YOUR-API-KEY'\n      });\n      map.addLayer({\n        id: 'negative-city-mask-layer',\n        source: 'negative-city-mask',\n        'source-layer': 'negativecitymask',\n        type: 'fill',\n        paint: {\n          'fill-color': '#ff0000'\n          //          'fill-opacity': .3,\n        }\n      });\n\n      map.addLayer({\n        id: 'negative-city-mask-layer-border',\n        source: 'negative-city-mask',\n        'source-layer': 'negativecitymask',\n        type: 'line',\n        paint: {\n          'line-color': '#ff0000',\n          //          'line-opacity': 0.5,\n          'line-width': 2\n        }\n      });\n      map.addSource('takamatsu', {\n        type: 'vector',\n        url: \"https://tileserver.geolonia.com/takamatsu_main_v0/tiles.json?key=YOUR-API-KEY\"\n      });\n      map.addSource('kihonzu', {\n        type: 'vector',\n        url: \"https://tileserver.geolonia.com/takamatsu_kihonzu_v1/tiles.json?key=YOUR-API-KEY\"\n      });\n      setMap(map);\n    });\n    map.on('click', e => {\n      const features = map.queryRenderedFeatures(e.point).filter(feature => feature.source === 'takamatsu' || feature.source === 'kihonzu' || feature.properties._viewer_selectable === true);\n      if (features.length === 0) {\n        setSelectedFeatures([]);\n        return;\n      }\n      setSelectedFeatures(features.map(feature => {\n        const catalogData = catalogDataItems.find(item => item.type === \"DataItem\" && ((feature.source === 'takamatsu' || feature.properties._viewer_selectable === true) && item.class === feature.properties.class || 'customDataSource' in item && item.customDataSource === feature.source));\n        if (!catalogData) {\n          throw new Error(`Catalog data not available for feature: ${feature}`);\n        }\n        return {\n          catalog: catalogData,\n          properties: feature.properties\n        };\n      }));\n    });\n    return () => {\n      map.remove();\n    };\n  }, [catalogDataItems, mapContainer, setMap, setSelectedFeatures]);\n  useEffect(() => {\n    if (!map) return;\n    let shouldStop = false;\n    (async () => {\n      let index = -1;\n      for (const definition of walkCategories(catalogData)) {\n        index += 1;\n        if (shouldStop) return;\n        const definitionId = definition.id;\n        const isSelected = selectedLayers.includes(definitionId);\n        if (\"liveLocationId\" in definition) {\n          if (isSelected) {\n            const color = WEB_COLORS[index * 1999 % WEB_COLORS.length];\n            // CityOS SDK will take care of the data fetching\n            // and the map will be updated automatically.\n            // But we have to add a style layer to the map manually.\n            const sourceId = cityOS === null || cityOS === void 0 ? void 0 : cityOS.addLiveDataSet(definition.liveLocationId, {\n              featureFilter: feature => {\n                feature.properties ||= {};\n                feature.properties.class = definition.class;\n                feature.properties._viewer_selectable = true;\n                return feature;\n              }\n            });\n            if (sourceId) {\n              map.addLayer({\n                id: `${sourceId}-points`,\n                type: 'circle',\n                source: sourceId,\n                paint: {\n                  'circle-radius': 7,\n                  'circle-color': color,\n                  'circle-opacity': .8,\n                  'circle-stroke-width': 1,\n                  'circle-stroke-color': 'gray',\n                  'circle-stroke-opacity': 1\n                }\n              });\n            }\n          } else {\n            cityOS === null || cityOS === void 0 ? void 0 : cityOS.removeLiveDataSet(definition.liveLocationId);\n          }\n          continue;\n        }\n        let geojsonEndpoint = undefined;\n        if (\"geojsonEndpoint\" in definition) {\n          // this is a GeoJSON layer\n          geojsonEndpoint = definition.geojsonEndpoint;\n          const mapSource = map.getSource(definitionId);\n          if (!mapSource && isSelected) {\n            const geojsonResp = await fetch(geojsonEndpoint);\n            const geojson = await geojsonResp.json();\n            for (const feature of geojson.features) {\n              feature.properties.class = definition.class;\n              feature.properties._viewer_selectable = true;\n            }\n            map.addSource(definitionId, {\n              type: 'geojson',\n              data: geojson\n            });\n          }\n        }\n        for (const [sublayerName, template] of LAYER_TEMPLATES) {\n          const fullLayerName = `takamatsu/${definitionId}/${sublayerName}`;\n          const mapLayers = map.getStyle().layers.filter(layer => layer.id.startsWith(fullLayerName));\n          const customStyle = getCustomStyle(definition);\n          for (const subtemplate of template(index, customStyle)) {\n            if (mapLayers.length === 0 && isSelected) {\n              const filterExp = [\"all\", [\"==\", \"$type\", sublayerName]];\n              if (definition.class) {\n                filterExp.push([\"==\", \"class\", definition.class]);\n              }\n              if (subtemplate.filter) {\n                filterExp.push(subtemplate.filter);\n              }\n              const layerConfig = {\n                ...subtemplate,\n                filter: filterExp,\n                id: fullLayerName + subtemplate.id\n              };\n              if (geojsonEndpoint) {\n                layerConfig.source = definitionId;\n                delete layerConfig['source-layer'];\n              } else if ('customDataSource' in definition) {\n                layerConfig.source = definition.customDataSource;\n                layerConfig['source-layer'] = definition.customDataSourceLayer || definition.customDataSource;\n              }\n              map.addLayer(layerConfig, 'poi');\n              if (!map.getLayer(layerConfig.id)) {\n                console.error(`Failed to add layer ${layerConfig.id}!!!`);\n                debugger;\n              }\n            } else if (mapLayers.length > 0 && !isSelected) {\n              for (const mapLayer of mapLayers) {\n                map.removeLayer(mapLayer.id);\n              }\n            }\n          }\n        }\n      }\n    })();\n    return () => {\n      shouldStop = true;\n    };\n  }, [map, catalogData, selectedLayers, cityOS]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"map\",\n    ref: mapContainer,\n    \"data-lang\": \"ja\",\n    \"data-navigation-control\": \"on\",\n    \"data-gesture-handling\": \"off\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 272,\n    columnNumber: 5\n  }, this);\n};\n_s(MainMap, \"zYoq3vI6QllaQRW0lSoXOxeNFoc=\");\n_c = MainMap;\nexport default MainMap;\nvar _c;\n$RefreshReg$(_c, \"MainMap\");","map":{"version":3,"names":["useEffect","useLayoutEffect","useMemo","useRef","useState","walkCategories","customStyleToLineStringTemplate","customStyleToPointTemplate","customStyleToPolygonTemplate","DEFAULT_LINESTRING_STYLE","DEFAULT_POINT_STYLE","DEFAULT_POLYGON_STYLE","getCustomStyle","WEB_COLORS","CityOS__Takamatsu","mapStyle","jsxDEV","_jsxDEV","LAYER_TEMPLATES","i","customStyle","color","length","flatMap","style","MainMap","catalogData","selectedLayers","setSelectedFeatures","_s","map","setMap","undefined","cityOS","setCityOS","mapContainer","catalogDataItems","window","geolonia","Map","container","current","hash","center","fitBoundsOptions","padding","maxPitch","maxRotate","minZoom","zoom","_mainMap","on","layer","getStyle","layers","id","startsWith","metadata","removeLayer","sl","addSource","type","url","addLayer","source","paint","e","features","queryRenderedFeatures","point","filter","feature","properties","_viewer_selectable","find","item","class","customDataSource","Error","catalog","remove","shouldStop","index","definition","definitionId","isSelected","includes","sourceId","addLiveDataSet","liveLocationId","featureFilter","removeLiveDataSet","geojsonEndpoint","mapSource","getSource","geojsonResp","fetch","geojson","json","data","sublayerName","template","fullLayerName","mapLayers","subtemplate","filterExp","push","layerConfig","customDataSourceLayer","getLayer","console","error","mapLayer","className","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/magari/git/test_smartmap/src/MainMap.tsx"],"sourcesContent":["import { useEffect, useLayoutEffect, useMemo, useRef, useState } from 'react';\nimport type * as maplibregl from 'maplibre-gl';\nimport { CatalogFeature, CatalogItem, walkCategories } from './api/catalog';\nimport { CustomStyle, customStyleToLineStringTemplate, customStyleToPointTemplate, customStyleToPolygonTemplate, DEFAULT_LINESTRING_STYLE, DEFAULT_POINT_STYLE, DEFAULT_POLYGON_STYLE, getCustomStyle, LayerTemplate, WEB_COLORS } from './utils/mapStyling';\nimport CityOS__Takamatsu from './cityos/cityos_takamatsu';\n\nimport mapStyle from './style.json';\n\ndeclare global {\n  interface Window {\n    geolonia: any;\n  }\n}\n\nconst LAYER_TEMPLATES: [string, (idx: number, customStyle?: CustomStyle[]) => LayerTemplate[]][] = [\n  [ \"Polygon\", (i, customStyle) => {\n    const color = WEB_COLORS[i * 1999 % WEB_COLORS.length];\n    return customStyle ?\n      customStyle.flatMap((style) => customStyleToPolygonTemplate(style, color)) :\n      DEFAULT_POLYGON_STYLE(color);\n  } ],\n  [ \"LineString\", (i, customStyle) => {\n    const color = WEB_COLORS[i * 1999 % WEB_COLORS.length];\n    return customStyle ?\n      customStyle.flatMap((style) => customStyleToLineStringTemplate(style, color)) :\n      DEFAULT_LINESTRING_STYLE(color);\n  }],\n  [ \"Point\", (i, customStyle) => {\n    const color = WEB_COLORS[i * 1999 % WEB_COLORS.length];\n    return customStyle ?\n      customStyle.flatMap((style) => customStyleToPointTemplate(style, color)) :\n      DEFAULT_POINT_STYLE(color);\n  }],\n];\n\ninterface Props {\n  catalogData: CatalogItem[];\n  selectedLayers: string[];\n  setSelectedFeatures: React.Dispatch<React.SetStateAction<CatalogFeature[]>>\n}\n\nconst MainMap: React.FC<Props> = ({catalogData, selectedLayers, setSelectedFeatures}) => {\n  const [map, setMap] = useState<maplibregl.Map | undefined>(undefined);\n  const [cityOS, setCityOS] = useState<CityOS__Takamatsu | undefined>(undefined);\n  const mapContainer = useRef<HTMLDivElement>(null);\n\n  const catalogDataItems = useMemo(() => {\n    return [...walkCategories(catalogData)];\n  }, [catalogData]);\n\n  useLayoutEffect(() => {\n    const map: maplibregl.Map = new window.geolonia.Map({\n      container: mapContainer.current,\n      // style: `${process.env.PUBLIC_URL}/style.json`,\n      style: mapStyle,\n      hash: true,\n      center: [ 134.0403, 34.334 ],\n      fitBoundsOptions: { padding: 50 },\n      // 意図せず傾き・回転を変更してしまうことを防ぐ\n      maxPitch: 0,\n      maxRotate: 0,\n      minZoom: 9,\n      zoom: 9.2,\n    });\n\n    (window as any)._mainMap = map;\n\n    const cityOS = new CityOS__Takamatsu(map);\n    setCityOS(cityOS);\n\n    map.on(\"load\", () => {\n      // start GSI base map modification\n      for (const layer of map.getStyle().layers!) {\n        const id = layer.id;\n        if (id.startsWith(\"oc-\") || id === 'poi-z16' || id === 'poi-z16-primary' || (layer.metadata as any || {})['visible-on-3d']) {\n          map.removeLayer(layer.id);\n        } else if (\"source-layer\" in layer) {\n          const sl = layer[\"source-layer\"];\n          if (sl === \"landcover\" || sl === \"landuse\" || sl === \"building\") {\n            map.removeLayer(layer.id);\n          }\n        }\n      }\n      // end GSI base map modification\n\n      map.addSource('negative-city-mask', {\n        type: 'vector',\n        url: 'https://tileserver.geolonia.com/takamatsu_negative_mask/tiles.json?key=YOUR-API-KEY',\n      })\n      map.addLayer({\n        id: 'negative-city-mask-layer',\n        source: 'negative-city-mask',\n        'source-layer': 'negativecitymask',\n        type: 'fill',\n        paint: {\n          'fill-color': '#ff0000',\n//          'fill-opacity': .3,\n        }\n      });\n      map.addLayer({\n        id: 'negative-city-mask-layer-border',\n        source: 'negative-city-mask',\n        'source-layer': 'negativecitymask',\n        type: 'line',\n        paint: {\n          'line-color': '#ff0000',\n//          'line-opacity': 0.5,\n          'line-width': 2,\n        }\n      })\n\n      map.addSource('takamatsu', {\n        type: 'vector',\n        url: \"https://tileserver.geolonia.com/takamatsu_main_v0/tiles.json?key=YOUR-API-KEY\"\n      });\n      map.addSource('kihonzu', {\n        type: 'vector',\n        url: \"https://tileserver.geolonia.com/takamatsu_kihonzu_v1/tiles.json?key=YOUR-API-KEY\"\n      });\n\n      setMap(map);\n    });\n\n    map.on('click', (e) => {\n      const features = map\n        .queryRenderedFeatures(e.point)\n        .filter(feature => (\n          feature.source === 'takamatsu' ||\n          feature.source === 'kihonzu' ||\n          feature.properties._viewer_selectable === true\n        ));\n      if (features.length === 0) {\n        setSelectedFeatures([]);\n        return;\n      }\n      setSelectedFeatures(features.map(feature => {\n        const catalogData = catalogDataItems.find(item => (\n          item.type === \"DataItem\" && (\n            ((feature.source === 'takamatsu' || feature.properties._viewer_selectable === true) && item.class === feature.properties.class) ||\n            ('customDataSource' in item && item.customDataSource === feature.source)\n          )\n        ));\n        if (!catalogData) {\n          throw new Error(`Catalog data not available for feature: ${feature}`);\n        }\n        return {\n          catalog: catalogData,\n          properties: feature.properties,\n        };\n      }));\n    });\n\n    return () => {\n      map.remove();\n    };\n  }, [catalogDataItems, mapContainer, setMap, setSelectedFeatures]);\n\n  useEffect(() => {\n    if (!map) return;\n\n    let shouldStop = false;\n    (async () => {\n      let index = -1;\n      for (const definition of walkCategories(catalogData)) {\n        index += 1;\n        if (shouldStop) return;\n\n        const definitionId = definition.id;\n        const isSelected = selectedLayers.includes(definitionId);\n\n        if (\"liveLocationId\" in definition) {\n          if (isSelected) {\n            const color = WEB_COLORS[index * 1999 % WEB_COLORS.length];\n            // CityOS SDK will take care of the data fetching\n            // and the map will be updated automatically.\n            // But we have to add a style layer to the map manually.\n            const sourceId = cityOS?.addLiveDataSet(definition.liveLocationId, {\n              featureFilter: (feature) => {\n                feature.properties ||= {};\n                feature.properties.class = definition.class;\n                feature.properties!._viewer_selectable = true;\n                return feature;\n              }\n            });\n            if (sourceId) {\n              map.addLayer({\n                id: `${sourceId}-points`,\n                type: 'circle',\n                source: sourceId,\n                paint: {\n                  'circle-radius': 7,\n                  'circle-color': color,\n                  'circle-opacity': .8,\n                  'circle-stroke-width': 1,\n                  'circle-stroke-color': 'gray',\n                  'circle-stroke-opacity': 1,\n                }\n              });\n            }\n          } else {\n            cityOS?.removeLiveDataSet(definition.liveLocationId);\n          }\n          continue;\n        }\n\n        let geojsonEndpoint: string | undefined = undefined;\n        if (\"geojsonEndpoint\" in definition) {\n          // this is a GeoJSON layer\n          geojsonEndpoint = definition.geojsonEndpoint;\n\n          const mapSource = map.getSource(definitionId);\n          if (!mapSource && isSelected) {\n            const geojsonResp = await fetch(geojsonEndpoint);\n            const geojson = await geojsonResp.json();\n            for (const feature of geojson.features) {\n              feature.properties.class = definition.class;\n              feature.properties._viewer_selectable = true;\n            }\n            map.addSource(definitionId, {\n              type: 'geojson',\n              data: geojson,\n            });\n          }\n        }\n\n        for (const [sublayerName, template] of LAYER_TEMPLATES) {\n          const fullLayerName = `takamatsu/${definitionId}/${sublayerName}`;\n          const mapLayers = map.getStyle().layers.filter((layer) => layer.id.startsWith(fullLayerName));\n          const customStyle = getCustomStyle(definition);\n          for (const subtemplate of template(index, customStyle)) {\n            if (mapLayers.length === 0 && isSelected) {\n              const filterExp: maplibregl.FilterSpecification = [\"all\", [\"==\", \"$type\", sublayerName]];\n              if (definition.class) {\n                filterExp.push([\"==\", \"class\", definition.class]);\n              }\n              if (subtemplate.filter) {\n                filterExp.push(subtemplate.filter as any);\n              }\n              const layerConfig: maplibregl.LayerSpecification = {\n                ...subtemplate,\n                filter: filterExp,\n                id: fullLayerName + subtemplate.id,\n              };\n              if (geojsonEndpoint) {\n                layerConfig.source = definitionId;\n                delete layerConfig['source-layer'];\n              } else if ('customDataSource' in definition) {\n                layerConfig.source = definition.customDataSource;\n                layerConfig['source-layer'] = definition.customDataSourceLayer || definition.customDataSource;\n              }\n              map.addLayer(layerConfig, 'poi');\n              if (!map.getLayer(layerConfig.id)) {\n                console.error(`Failed to add layer ${layerConfig.id}!!!`);\n                debugger;\n              }\n            } else if (mapLayers.length > 0 && !isSelected) {\n              for (const mapLayer of mapLayers) {\n                map.removeLayer(mapLayer.id);\n              }\n            }\n          }\n        }\n      }\n    })();\n\n    return () => {\n      shouldStop = true;\n    }\n  }, [map, catalogData, selectedLayers, cityOS]);\n\n  return (\n    <div\n      className='map'\n      ref={mapContainer}\n      data-lang=\"ja\"\n      data-navigation-control=\"on\"\n      data-gesture-handling=\"off\"\n    ></div>\n  );\n}\n\nexport default MainMap;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}